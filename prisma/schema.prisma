datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Venue {
  id                        Int                    @id @default(autoincrement())
  pricePerNightInEURCent    Int
  rating                    Float
  capacity                  Int
  amountsOfBeds             Int
  extraSleepingDetails      String
  name                      String
  images                    Json
  description               String
  checkInHourPM             Int
  checkOutHourAM            Int
  distanceFromCityCenterInM Int
  facebookUrl               String
  instagramUrl              String
  twitterUrl                String
  websiteUrl                String
  streetNumber              String
  streetName                String
  postalCode                String
  city                      String
  owner                     User                   @relation(fields: [ownerId], references: [id])
  ownerId                   Int
  amenities                 Amenity[]
  VenueRatingUser           VenueRatingUser[]
  venueReservationUser      VenueReservationUser[]
  venueFavouriteUser        VenueFavouriteUser[]
}

model User {
  id                   Int                    @id @default(autoincrement())
  email                String                 @unique
  name                 String
  phoneNumber          String
  password             String
  venues               Venue[]
  venueRatingUser      VenueRatingUser[]
  venueReservationUser VenueReservationUser[]
  venueFavouriteUser   VenueFavouriteUser[]
}

model Amenity {
  id         Int        @id @default(autoincrement())
  name       String
  category   Category   @relation(fields: [categoryId], references: [id])
  categoryId Int
  occasions  Occasion[]
  venues     Venue[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  amenities Amenity[]
}

model Occasion {
  id        Int       @id @default(autoincrement())
  name      String
  amenities Amenity[]
}

model VenueRatingUser {
  id      Int     @id @default(autoincrement())
  venue   Venue   @relation(fields: [venueId], references: [id])
  venueId Int
  user    User    @relation(fields: [userId], references: [id])
  userId  Int
  score   Float
  review  String?
}

model VenueReservationUser {
  id        Int        @id @default(autoincrement())
  venue     Venue      @relation(fields: [venueId], references: [id])
  venueId   Int
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
  dateStart DateTime
  dateEnd   DateTime
  status    StatusEnum
}

model VenueFavouriteUser {
  id      Int   @id @default(autoincrement())
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  venue   Venue @relation(fields: [venueId], references: [id])
  venueId Int

  @@unique([userId, venueId])
}

enum StatusEnum {
  RESERVED
  IN_PROGRESS
  COMPLETED
}
