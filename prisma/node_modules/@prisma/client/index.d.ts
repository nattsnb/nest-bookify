
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Amenity
 * 
 */
export type Amenity = $Result.DefaultSelection<Prisma.$AmenityPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Occasion
 * 
 */
export type Occasion = $Result.DefaultSelection<Prisma.$OccasionPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model VenueFavouriteUser
 * 
 */
export type VenueFavouriteUser = $Result.DefaultSelection<Prisma.$VenueFavouriteUserPayload>
/**
 * Model VenueRatingUser
 * 
 */
export type VenueRatingUser = $Result.DefaultSelection<Prisma.$VenueRatingUserPayload>
/**
 * Model VenueReservationUser
 * 
 */
export type VenueReservationUser = $Result.DefaultSelection<Prisma.$VenueReservationUserPayload>
/**
 * Model Venue
 * 
 */
export type Venue = $Result.DefaultSelection<Prisma.$VenuePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const StatusEnum: {
  RESERVED: 'RESERVED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED'
};

export type StatusEnum = (typeof StatusEnum)[keyof typeof StatusEnum]

}

export type StatusEnum = $Enums.StatusEnum

export const StatusEnum: typeof $Enums.StatusEnum

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Amenities
 * const amenities = await prisma.amenity.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Amenities
   * const amenities = await prisma.amenity.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.amenity`: Exposes CRUD operations for the **Amenity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Amenities
    * const amenities = await prisma.amenity.findMany()
    * ```
    */
  get amenity(): Prisma.AmenityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.occasion`: Exposes CRUD operations for the **Occasion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Occasions
    * const occasions = await prisma.occasion.findMany()
    * ```
    */
  get occasion(): Prisma.OccasionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.venueFavouriteUser`: Exposes CRUD operations for the **VenueFavouriteUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VenueFavouriteUsers
    * const venueFavouriteUsers = await prisma.venueFavouriteUser.findMany()
    * ```
    */
  get venueFavouriteUser(): Prisma.VenueFavouriteUserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.venueRatingUser`: Exposes CRUD operations for the **VenueRatingUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VenueRatingUsers
    * const venueRatingUsers = await prisma.venueRatingUser.findMany()
    * ```
    */
  get venueRatingUser(): Prisma.VenueRatingUserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.venueReservationUser`: Exposes CRUD operations for the **VenueReservationUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VenueReservationUsers
    * const venueReservationUsers = await prisma.venueReservationUser.findMany()
    * ```
    */
  get venueReservationUser(): Prisma.VenueReservationUserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.venue`: Exposes CRUD operations for the **Venue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Venues
    * const venues = await prisma.venue.findMany()
    * ```
    */
  get venue(): Prisma.VenueDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Amenity: 'Amenity',
    Category: 'Category',
    Occasion: 'Occasion',
    User: 'User',
    VenueFavouriteUser: 'VenueFavouriteUser',
    VenueRatingUser: 'VenueRatingUser',
    VenueReservationUser: 'VenueReservationUser',
    Venue: 'Venue'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "amenity" | "category" | "occasion" | "user" | "venueFavouriteUser" | "venueRatingUser" | "venueReservationUser" | "venue"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Amenity: {
        payload: Prisma.$AmenityPayload<ExtArgs>
        fields: Prisma.AmenityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AmenityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AmenityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenityPayload>
          }
          findFirst: {
            args: Prisma.AmenityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AmenityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenityPayload>
          }
          findMany: {
            args: Prisma.AmenityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenityPayload>[]
          }
          create: {
            args: Prisma.AmenityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenityPayload>
          }
          createMany: {
            args: Prisma.AmenityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AmenityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenityPayload>[]
          }
          delete: {
            args: Prisma.AmenityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenityPayload>
          }
          update: {
            args: Prisma.AmenityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenityPayload>
          }
          deleteMany: {
            args: Prisma.AmenityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AmenityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AmenityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenityPayload>[]
          }
          upsert: {
            args: Prisma.AmenityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmenityPayload>
          }
          aggregate: {
            args: Prisma.AmenityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAmenity>
          }
          groupBy: {
            args: Prisma.AmenityGroupByArgs<ExtArgs>
            result: $Utils.Optional<AmenityGroupByOutputType>[]
          }
          count: {
            args: Prisma.AmenityCountArgs<ExtArgs>
            result: $Utils.Optional<AmenityCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Occasion: {
        payload: Prisma.$OccasionPayload<ExtArgs>
        fields: Prisma.OccasionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OccasionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OccasionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OccasionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OccasionPayload>
          }
          findFirst: {
            args: Prisma.OccasionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OccasionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OccasionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OccasionPayload>
          }
          findMany: {
            args: Prisma.OccasionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OccasionPayload>[]
          }
          create: {
            args: Prisma.OccasionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OccasionPayload>
          }
          createMany: {
            args: Prisma.OccasionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OccasionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OccasionPayload>[]
          }
          delete: {
            args: Prisma.OccasionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OccasionPayload>
          }
          update: {
            args: Prisma.OccasionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OccasionPayload>
          }
          deleteMany: {
            args: Prisma.OccasionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OccasionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OccasionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OccasionPayload>[]
          }
          upsert: {
            args: Prisma.OccasionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OccasionPayload>
          }
          aggregate: {
            args: Prisma.OccasionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOccasion>
          }
          groupBy: {
            args: Prisma.OccasionGroupByArgs<ExtArgs>
            result: $Utils.Optional<OccasionGroupByOutputType>[]
          }
          count: {
            args: Prisma.OccasionCountArgs<ExtArgs>
            result: $Utils.Optional<OccasionCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      VenueFavouriteUser: {
        payload: Prisma.$VenueFavouriteUserPayload<ExtArgs>
        fields: Prisma.VenueFavouriteUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VenueFavouriteUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueFavouriteUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VenueFavouriteUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueFavouriteUserPayload>
          }
          findFirst: {
            args: Prisma.VenueFavouriteUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueFavouriteUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VenueFavouriteUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueFavouriteUserPayload>
          }
          findMany: {
            args: Prisma.VenueFavouriteUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueFavouriteUserPayload>[]
          }
          create: {
            args: Prisma.VenueFavouriteUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueFavouriteUserPayload>
          }
          createMany: {
            args: Prisma.VenueFavouriteUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VenueFavouriteUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueFavouriteUserPayload>[]
          }
          delete: {
            args: Prisma.VenueFavouriteUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueFavouriteUserPayload>
          }
          update: {
            args: Prisma.VenueFavouriteUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueFavouriteUserPayload>
          }
          deleteMany: {
            args: Prisma.VenueFavouriteUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VenueFavouriteUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VenueFavouriteUserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueFavouriteUserPayload>[]
          }
          upsert: {
            args: Prisma.VenueFavouriteUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueFavouriteUserPayload>
          }
          aggregate: {
            args: Prisma.VenueFavouriteUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVenueFavouriteUser>
          }
          groupBy: {
            args: Prisma.VenueFavouriteUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<VenueFavouriteUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.VenueFavouriteUserCountArgs<ExtArgs>
            result: $Utils.Optional<VenueFavouriteUserCountAggregateOutputType> | number
          }
        }
      }
      VenueRatingUser: {
        payload: Prisma.$VenueRatingUserPayload<ExtArgs>
        fields: Prisma.VenueRatingUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VenueRatingUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueRatingUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VenueRatingUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueRatingUserPayload>
          }
          findFirst: {
            args: Prisma.VenueRatingUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueRatingUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VenueRatingUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueRatingUserPayload>
          }
          findMany: {
            args: Prisma.VenueRatingUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueRatingUserPayload>[]
          }
          create: {
            args: Prisma.VenueRatingUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueRatingUserPayload>
          }
          createMany: {
            args: Prisma.VenueRatingUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VenueRatingUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueRatingUserPayload>[]
          }
          delete: {
            args: Prisma.VenueRatingUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueRatingUserPayload>
          }
          update: {
            args: Prisma.VenueRatingUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueRatingUserPayload>
          }
          deleteMany: {
            args: Prisma.VenueRatingUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VenueRatingUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VenueRatingUserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueRatingUserPayload>[]
          }
          upsert: {
            args: Prisma.VenueRatingUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueRatingUserPayload>
          }
          aggregate: {
            args: Prisma.VenueRatingUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVenueRatingUser>
          }
          groupBy: {
            args: Prisma.VenueRatingUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<VenueRatingUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.VenueRatingUserCountArgs<ExtArgs>
            result: $Utils.Optional<VenueRatingUserCountAggregateOutputType> | number
          }
        }
      }
      VenueReservationUser: {
        payload: Prisma.$VenueReservationUserPayload<ExtArgs>
        fields: Prisma.VenueReservationUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VenueReservationUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueReservationUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VenueReservationUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueReservationUserPayload>
          }
          findFirst: {
            args: Prisma.VenueReservationUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueReservationUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VenueReservationUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueReservationUserPayload>
          }
          findMany: {
            args: Prisma.VenueReservationUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueReservationUserPayload>[]
          }
          create: {
            args: Prisma.VenueReservationUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueReservationUserPayload>
          }
          createMany: {
            args: Prisma.VenueReservationUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VenueReservationUserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueReservationUserPayload>[]
          }
          delete: {
            args: Prisma.VenueReservationUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueReservationUserPayload>
          }
          update: {
            args: Prisma.VenueReservationUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueReservationUserPayload>
          }
          deleteMany: {
            args: Prisma.VenueReservationUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VenueReservationUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VenueReservationUserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueReservationUserPayload>[]
          }
          upsert: {
            args: Prisma.VenueReservationUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenueReservationUserPayload>
          }
          aggregate: {
            args: Prisma.VenueReservationUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVenueReservationUser>
          }
          groupBy: {
            args: Prisma.VenueReservationUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<VenueReservationUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.VenueReservationUserCountArgs<ExtArgs>
            result: $Utils.Optional<VenueReservationUserCountAggregateOutputType> | number
          }
        }
      }
      Venue: {
        payload: Prisma.$VenuePayload<ExtArgs>
        fields: Prisma.VenueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VenueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenuePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VenueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenuePayload>
          }
          findFirst: {
            args: Prisma.VenueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenuePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VenueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenuePayload>
          }
          findMany: {
            args: Prisma.VenueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenuePayload>[]
          }
          create: {
            args: Prisma.VenueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenuePayload>
          }
          createMany: {
            args: Prisma.VenueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VenueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenuePayload>[]
          }
          delete: {
            args: Prisma.VenueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenuePayload>
          }
          update: {
            args: Prisma.VenueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenuePayload>
          }
          deleteMany: {
            args: Prisma.VenueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VenueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VenueUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenuePayload>[]
          }
          upsert: {
            args: Prisma.VenueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenuePayload>
          }
          aggregate: {
            args: Prisma.VenueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVenue>
          }
          groupBy: {
            args: Prisma.VenueGroupByArgs<ExtArgs>
            result: $Utils.Optional<VenueGroupByOutputType>[]
          }
          count: {
            args: Prisma.VenueCountArgs<ExtArgs>
            result: $Utils.Optional<VenueCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    amenity?: AmenityOmit
    category?: CategoryOmit
    occasion?: OccasionOmit
    user?: UserOmit
    venueFavouriteUser?: VenueFavouriteUserOmit
    venueRatingUser?: VenueRatingUserOmit
    venueReservationUser?: VenueReservationUserOmit
    venue?: VenueOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AmenityCountOutputType
   */

  export type AmenityCountOutputType = {
    occasions: number
    venues: number
  }

  export type AmenityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    occasions?: boolean | AmenityCountOutputTypeCountOccasionsArgs
    venues?: boolean | AmenityCountOutputTypeCountVenuesArgs
  }

  // Custom InputTypes
  /**
   * AmenityCountOutputType without action
   */
  export type AmenityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmenityCountOutputType
     */
    select?: AmenityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AmenityCountOutputType without action
   */
  export type AmenityCountOutputTypeCountOccasionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OccasionWhereInput
  }

  /**
   * AmenityCountOutputType without action
   */
  export type AmenityCountOutputTypeCountVenuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VenueWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    amenities: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    amenities?: boolean | CategoryCountOutputTypeCountAmenitiesArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountAmenitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AmenityWhereInput
  }


  /**
   * Count Type OccasionCountOutputType
   */

  export type OccasionCountOutputType = {
    amenities: number
  }

  export type OccasionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    amenities?: boolean | OccasionCountOutputTypeCountAmenitiesArgs
  }

  // Custom InputTypes
  /**
   * OccasionCountOutputType without action
   */
  export type OccasionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OccasionCountOutputType
     */
    select?: OccasionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OccasionCountOutputType without action
   */
  export type OccasionCountOutputTypeCountAmenitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AmenityWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    venues: number
    venueRatingUser: number
    venueReservationUser: number
    venueFavouriteUser: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    venues?: boolean | UserCountOutputTypeCountVenuesArgs
    venueRatingUser?: boolean | UserCountOutputTypeCountVenueRatingUserArgs
    venueReservationUser?: boolean | UserCountOutputTypeCountVenueReservationUserArgs
    venueFavouriteUser?: boolean | UserCountOutputTypeCountVenueFavouriteUserArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVenuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VenueWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVenueRatingUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VenueRatingUserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVenueReservationUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VenueReservationUserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVenueFavouriteUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VenueFavouriteUserWhereInput
  }


  /**
   * Count Type VenueCountOutputType
   */

  export type VenueCountOutputType = {
    amenities: number
    VenueRatingUser: number
    venueReservationUser: number
    venueFavouriteUser: number
  }

  export type VenueCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    amenities?: boolean | VenueCountOutputTypeCountAmenitiesArgs
    VenueRatingUser?: boolean | VenueCountOutputTypeCountVenueRatingUserArgs
    venueReservationUser?: boolean | VenueCountOutputTypeCountVenueReservationUserArgs
    venueFavouriteUser?: boolean | VenueCountOutputTypeCountVenueFavouriteUserArgs
  }

  // Custom InputTypes
  /**
   * VenueCountOutputType without action
   */
  export type VenueCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueCountOutputType
     */
    select?: VenueCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VenueCountOutputType without action
   */
  export type VenueCountOutputTypeCountAmenitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AmenityWhereInput
  }

  /**
   * VenueCountOutputType without action
   */
  export type VenueCountOutputTypeCountVenueRatingUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VenueRatingUserWhereInput
  }

  /**
   * VenueCountOutputType without action
   */
  export type VenueCountOutputTypeCountVenueReservationUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VenueReservationUserWhereInput
  }

  /**
   * VenueCountOutputType without action
   */
  export type VenueCountOutputTypeCountVenueFavouriteUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VenueFavouriteUserWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Amenity
   */

  export type AggregateAmenity = {
    _count: AmenityCountAggregateOutputType | null
    _avg: AmenityAvgAggregateOutputType | null
    _sum: AmenitySumAggregateOutputType | null
    _min: AmenityMinAggregateOutputType | null
    _max: AmenityMaxAggregateOutputType | null
  }

  export type AmenityAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
  }

  export type AmenitySumAggregateOutputType = {
    id: number | null
    categoryId: number | null
  }

  export type AmenityMinAggregateOutputType = {
    id: number | null
    name: string | null
    categoryId: number | null
  }

  export type AmenityMaxAggregateOutputType = {
    id: number | null
    name: string | null
    categoryId: number | null
  }

  export type AmenityCountAggregateOutputType = {
    id: number
    name: number
    categoryId: number
    _all: number
  }


  export type AmenityAvgAggregateInputType = {
    id?: true
    categoryId?: true
  }

  export type AmenitySumAggregateInputType = {
    id?: true
    categoryId?: true
  }

  export type AmenityMinAggregateInputType = {
    id?: true
    name?: true
    categoryId?: true
  }

  export type AmenityMaxAggregateInputType = {
    id?: true
    name?: true
    categoryId?: true
  }

  export type AmenityCountAggregateInputType = {
    id?: true
    name?: true
    categoryId?: true
    _all?: true
  }

  export type AmenityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Amenity to aggregate.
     */
    where?: AmenityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Amenities to fetch.
     */
    orderBy?: AmenityOrderByWithRelationInput | AmenityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AmenityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Amenities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Amenities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Amenities
    **/
    _count?: true | AmenityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AmenityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AmenitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AmenityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AmenityMaxAggregateInputType
  }

  export type GetAmenityAggregateType<T extends AmenityAggregateArgs> = {
        [P in keyof T & keyof AggregateAmenity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAmenity[P]>
      : GetScalarType<T[P], AggregateAmenity[P]>
  }




  export type AmenityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AmenityWhereInput
    orderBy?: AmenityOrderByWithAggregationInput | AmenityOrderByWithAggregationInput[]
    by: AmenityScalarFieldEnum[] | AmenityScalarFieldEnum
    having?: AmenityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AmenityCountAggregateInputType | true
    _avg?: AmenityAvgAggregateInputType
    _sum?: AmenitySumAggregateInputType
    _min?: AmenityMinAggregateInputType
    _max?: AmenityMaxAggregateInputType
  }

  export type AmenityGroupByOutputType = {
    id: number
    name: string
    categoryId: number
    _count: AmenityCountAggregateOutputType | null
    _avg: AmenityAvgAggregateOutputType | null
    _sum: AmenitySumAggregateOutputType | null
    _min: AmenityMinAggregateOutputType | null
    _max: AmenityMaxAggregateOutputType | null
  }

  type GetAmenityGroupByPayload<T extends AmenityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AmenityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AmenityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AmenityGroupByOutputType[P]>
            : GetScalarType<T[P], AmenityGroupByOutputType[P]>
        }
      >
    >


  export type AmenitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    categoryId?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    occasions?: boolean | Amenity$occasionsArgs<ExtArgs>
    venues?: boolean | Amenity$venuesArgs<ExtArgs>
    _count?: boolean | AmenityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["amenity"]>

  export type AmenitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    categoryId?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["amenity"]>

  export type AmenitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    categoryId?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["amenity"]>

  export type AmenitySelectScalar = {
    id?: boolean
    name?: boolean
    categoryId?: boolean
  }

  export type AmenityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "categoryId", ExtArgs["result"]["amenity"]>
  export type AmenityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    occasions?: boolean | Amenity$occasionsArgs<ExtArgs>
    venues?: boolean | Amenity$venuesArgs<ExtArgs>
    _count?: boolean | AmenityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AmenityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }
  export type AmenityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }

  export type $AmenityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Amenity"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs>
      occasions: Prisma.$OccasionPayload<ExtArgs>[]
      venues: Prisma.$VenuePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      categoryId: number
    }, ExtArgs["result"]["amenity"]>
    composites: {}
  }

  type AmenityGetPayload<S extends boolean | null | undefined | AmenityDefaultArgs> = $Result.GetResult<Prisma.$AmenityPayload, S>

  type AmenityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AmenityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AmenityCountAggregateInputType | true
    }

  export interface AmenityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Amenity'], meta: { name: 'Amenity' } }
    /**
     * Find zero or one Amenity that matches the filter.
     * @param {AmenityFindUniqueArgs} args - Arguments to find a Amenity
     * @example
     * // Get one Amenity
     * const amenity = await prisma.amenity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AmenityFindUniqueArgs>(args: SelectSubset<T, AmenityFindUniqueArgs<ExtArgs>>): Prisma__AmenityClient<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Amenity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AmenityFindUniqueOrThrowArgs} args - Arguments to find a Amenity
     * @example
     * // Get one Amenity
     * const amenity = await prisma.amenity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AmenityFindUniqueOrThrowArgs>(args: SelectSubset<T, AmenityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AmenityClient<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Amenity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmenityFindFirstArgs} args - Arguments to find a Amenity
     * @example
     * // Get one Amenity
     * const amenity = await prisma.amenity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AmenityFindFirstArgs>(args?: SelectSubset<T, AmenityFindFirstArgs<ExtArgs>>): Prisma__AmenityClient<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Amenity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmenityFindFirstOrThrowArgs} args - Arguments to find a Amenity
     * @example
     * // Get one Amenity
     * const amenity = await prisma.amenity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AmenityFindFirstOrThrowArgs>(args?: SelectSubset<T, AmenityFindFirstOrThrowArgs<ExtArgs>>): Prisma__AmenityClient<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Amenities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmenityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Amenities
     * const amenities = await prisma.amenity.findMany()
     * 
     * // Get first 10 Amenities
     * const amenities = await prisma.amenity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const amenityWithIdOnly = await prisma.amenity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AmenityFindManyArgs>(args?: SelectSubset<T, AmenityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Amenity.
     * @param {AmenityCreateArgs} args - Arguments to create a Amenity.
     * @example
     * // Create one Amenity
     * const Amenity = await prisma.amenity.create({
     *   data: {
     *     // ... data to create a Amenity
     *   }
     * })
     * 
     */
    create<T extends AmenityCreateArgs>(args: SelectSubset<T, AmenityCreateArgs<ExtArgs>>): Prisma__AmenityClient<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Amenities.
     * @param {AmenityCreateManyArgs} args - Arguments to create many Amenities.
     * @example
     * // Create many Amenities
     * const amenity = await prisma.amenity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AmenityCreateManyArgs>(args?: SelectSubset<T, AmenityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Amenities and returns the data saved in the database.
     * @param {AmenityCreateManyAndReturnArgs} args - Arguments to create many Amenities.
     * @example
     * // Create many Amenities
     * const amenity = await prisma.amenity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Amenities and only return the `id`
     * const amenityWithIdOnly = await prisma.amenity.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AmenityCreateManyAndReturnArgs>(args?: SelectSubset<T, AmenityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Amenity.
     * @param {AmenityDeleteArgs} args - Arguments to delete one Amenity.
     * @example
     * // Delete one Amenity
     * const Amenity = await prisma.amenity.delete({
     *   where: {
     *     // ... filter to delete one Amenity
     *   }
     * })
     * 
     */
    delete<T extends AmenityDeleteArgs>(args: SelectSubset<T, AmenityDeleteArgs<ExtArgs>>): Prisma__AmenityClient<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Amenity.
     * @param {AmenityUpdateArgs} args - Arguments to update one Amenity.
     * @example
     * // Update one Amenity
     * const amenity = await prisma.amenity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AmenityUpdateArgs>(args: SelectSubset<T, AmenityUpdateArgs<ExtArgs>>): Prisma__AmenityClient<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Amenities.
     * @param {AmenityDeleteManyArgs} args - Arguments to filter Amenities to delete.
     * @example
     * // Delete a few Amenities
     * const { count } = await prisma.amenity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AmenityDeleteManyArgs>(args?: SelectSubset<T, AmenityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Amenities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmenityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Amenities
     * const amenity = await prisma.amenity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AmenityUpdateManyArgs>(args: SelectSubset<T, AmenityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Amenities and returns the data updated in the database.
     * @param {AmenityUpdateManyAndReturnArgs} args - Arguments to update many Amenities.
     * @example
     * // Update many Amenities
     * const amenity = await prisma.amenity.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Amenities and only return the `id`
     * const amenityWithIdOnly = await prisma.amenity.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AmenityUpdateManyAndReturnArgs>(args: SelectSubset<T, AmenityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Amenity.
     * @param {AmenityUpsertArgs} args - Arguments to update or create a Amenity.
     * @example
     * // Update or create a Amenity
     * const amenity = await prisma.amenity.upsert({
     *   create: {
     *     // ... data to create a Amenity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Amenity we want to update
     *   }
     * })
     */
    upsert<T extends AmenityUpsertArgs>(args: SelectSubset<T, AmenityUpsertArgs<ExtArgs>>): Prisma__AmenityClient<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Amenities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmenityCountArgs} args - Arguments to filter Amenities to count.
     * @example
     * // Count the number of Amenities
     * const count = await prisma.amenity.count({
     *   where: {
     *     // ... the filter for the Amenities we want to count
     *   }
     * })
    **/
    count<T extends AmenityCountArgs>(
      args?: Subset<T, AmenityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AmenityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Amenity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmenityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AmenityAggregateArgs>(args: Subset<T, AmenityAggregateArgs>): Prisma.PrismaPromise<GetAmenityAggregateType<T>>

    /**
     * Group by Amenity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmenityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AmenityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AmenityGroupByArgs['orderBy'] }
        : { orderBy?: AmenityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AmenityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAmenityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Amenity model
   */
  readonly fields: AmenityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Amenity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AmenityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    occasions<T extends Amenity$occasionsArgs<ExtArgs> = {}>(args?: Subset<T, Amenity$occasionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OccasionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    venues<T extends Amenity$venuesArgs<ExtArgs> = {}>(args?: Subset<T, Amenity$venuesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VenuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Amenity model
   */
  interface AmenityFieldRefs {
    readonly id: FieldRef<"Amenity", 'Int'>
    readonly name: FieldRef<"Amenity", 'String'>
    readonly categoryId: FieldRef<"Amenity", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Amenity findUnique
   */
  export type AmenityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityInclude<ExtArgs> | null
    /**
     * Filter, which Amenity to fetch.
     */
    where: AmenityWhereUniqueInput
  }

  /**
   * Amenity findUniqueOrThrow
   */
  export type AmenityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityInclude<ExtArgs> | null
    /**
     * Filter, which Amenity to fetch.
     */
    where: AmenityWhereUniqueInput
  }

  /**
   * Amenity findFirst
   */
  export type AmenityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityInclude<ExtArgs> | null
    /**
     * Filter, which Amenity to fetch.
     */
    where?: AmenityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Amenities to fetch.
     */
    orderBy?: AmenityOrderByWithRelationInput | AmenityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Amenities.
     */
    cursor?: AmenityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Amenities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Amenities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Amenities.
     */
    distinct?: AmenityScalarFieldEnum | AmenityScalarFieldEnum[]
  }

  /**
   * Amenity findFirstOrThrow
   */
  export type AmenityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityInclude<ExtArgs> | null
    /**
     * Filter, which Amenity to fetch.
     */
    where?: AmenityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Amenities to fetch.
     */
    orderBy?: AmenityOrderByWithRelationInput | AmenityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Amenities.
     */
    cursor?: AmenityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Amenities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Amenities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Amenities.
     */
    distinct?: AmenityScalarFieldEnum | AmenityScalarFieldEnum[]
  }

  /**
   * Amenity findMany
   */
  export type AmenityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityInclude<ExtArgs> | null
    /**
     * Filter, which Amenities to fetch.
     */
    where?: AmenityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Amenities to fetch.
     */
    orderBy?: AmenityOrderByWithRelationInput | AmenityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Amenities.
     */
    cursor?: AmenityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Amenities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Amenities.
     */
    skip?: number
    distinct?: AmenityScalarFieldEnum | AmenityScalarFieldEnum[]
  }

  /**
   * Amenity create
   */
  export type AmenityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityInclude<ExtArgs> | null
    /**
     * The data needed to create a Amenity.
     */
    data: XOR<AmenityCreateInput, AmenityUncheckedCreateInput>
  }

  /**
   * Amenity createMany
   */
  export type AmenityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Amenities.
     */
    data: AmenityCreateManyInput | AmenityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Amenity createManyAndReturn
   */
  export type AmenityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * The data used to create many Amenities.
     */
    data: AmenityCreateManyInput | AmenityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Amenity update
   */
  export type AmenityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityInclude<ExtArgs> | null
    /**
     * The data needed to update a Amenity.
     */
    data: XOR<AmenityUpdateInput, AmenityUncheckedUpdateInput>
    /**
     * Choose, which Amenity to update.
     */
    where: AmenityWhereUniqueInput
  }

  /**
   * Amenity updateMany
   */
  export type AmenityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Amenities.
     */
    data: XOR<AmenityUpdateManyMutationInput, AmenityUncheckedUpdateManyInput>
    /**
     * Filter which Amenities to update
     */
    where?: AmenityWhereInput
    /**
     * Limit how many Amenities to update.
     */
    limit?: number
  }

  /**
   * Amenity updateManyAndReturn
   */
  export type AmenityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * The data used to update Amenities.
     */
    data: XOR<AmenityUpdateManyMutationInput, AmenityUncheckedUpdateManyInput>
    /**
     * Filter which Amenities to update
     */
    where?: AmenityWhereInput
    /**
     * Limit how many Amenities to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Amenity upsert
   */
  export type AmenityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityInclude<ExtArgs> | null
    /**
     * The filter to search for the Amenity to update in case it exists.
     */
    where: AmenityWhereUniqueInput
    /**
     * In case the Amenity found by the `where` argument doesn't exist, create a new Amenity with this data.
     */
    create: XOR<AmenityCreateInput, AmenityUncheckedCreateInput>
    /**
     * In case the Amenity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AmenityUpdateInput, AmenityUncheckedUpdateInput>
  }

  /**
   * Amenity delete
   */
  export type AmenityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityInclude<ExtArgs> | null
    /**
     * Filter which Amenity to delete.
     */
    where: AmenityWhereUniqueInput
  }

  /**
   * Amenity deleteMany
   */
  export type AmenityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Amenities to delete
     */
    where?: AmenityWhereInput
    /**
     * Limit how many Amenities to delete.
     */
    limit?: number
  }

  /**
   * Amenity.occasions
   */
  export type Amenity$occasionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Occasion
     */
    select?: OccasionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Occasion
     */
    omit?: OccasionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OccasionInclude<ExtArgs> | null
    where?: OccasionWhereInput
    orderBy?: OccasionOrderByWithRelationInput | OccasionOrderByWithRelationInput[]
    cursor?: OccasionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OccasionScalarFieldEnum | OccasionScalarFieldEnum[]
  }

  /**
   * Amenity.venues
   */
  export type Amenity$venuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venue
     */
    omit?: VenueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueInclude<ExtArgs> | null
    where?: VenueWhereInput
    orderBy?: VenueOrderByWithRelationInput | VenueOrderByWithRelationInput[]
    cursor?: VenueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VenueScalarFieldEnum | VenueScalarFieldEnum[]
  }

  /**
   * Amenity without action
   */
  export type AmenityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    name: string
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    amenities?: boolean | Category$amenitiesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["category"]>
  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    amenities?: boolean | Category$amenitiesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      amenities: Prisma.$AmenityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories and returns the data updated in the database.
     * @param {CategoryUpdateManyAndReturnArgs} args - Arguments to update many Categories.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, CategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    amenities<T extends Category$amenitiesArgs<ExtArgs> = {}>(args?: Subset<T, Category$amenitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly name: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category updateManyAndReturn
   */
  export type CategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category.amenities
   */
  export type Category$amenitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityInclude<ExtArgs> | null
    where?: AmenityWhereInput
    orderBy?: AmenityOrderByWithRelationInput | AmenityOrderByWithRelationInput[]
    cursor?: AmenityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AmenityScalarFieldEnum | AmenityScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Occasion
   */

  export type AggregateOccasion = {
    _count: OccasionCountAggregateOutputType | null
    _avg: OccasionAvgAggregateOutputType | null
    _sum: OccasionSumAggregateOutputType | null
    _min: OccasionMinAggregateOutputType | null
    _max: OccasionMaxAggregateOutputType | null
  }

  export type OccasionAvgAggregateOutputType = {
    id: number | null
  }

  export type OccasionSumAggregateOutputType = {
    id: number | null
  }

  export type OccasionMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type OccasionMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type OccasionCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type OccasionAvgAggregateInputType = {
    id?: true
  }

  export type OccasionSumAggregateInputType = {
    id?: true
  }

  export type OccasionMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type OccasionMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type OccasionCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type OccasionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Occasion to aggregate.
     */
    where?: OccasionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Occasions to fetch.
     */
    orderBy?: OccasionOrderByWithRelationInput | OccasionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OccasionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Occasions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Occasions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Occasions
    **/
    _count?: true | OccasionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OccasionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OccasionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OccasionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OccasionMaxAggregateInputType
  }

  export type GetOccasionAggregateType<T extends OccasionAggregateArgs> = {
        [P in keyof T & keyof AggregateOccasion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOccasion[P]>
      : GetScalarType<T[P], AggregateOccasion[P]>
  }




  export type OccasionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OccasionWhereInput
    orderBy?: OccasionOrderByWithAggregationInput | OccasionOrderByWithAggregationInput[]
    by: OccasionScalarFieldEnum[] | OccasionScalarFieldEnum
    having?: OccasionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OccasionCountAggregateInputType | true
    _avg?: OccasionAvgAggregateInputType
    _sum?: OccasionSumAggregateInputType
    _min?: OccasionMinAggregateInputType
    _max?: OccasionMaxAggregateInputType
  }

  export type OccasionGroupByOutputType = {
    id: number
    name: string
    _count: OccasionCountAggregateOutputType | null
    _avg: OccasionAvgAggregateOutputType | null
    _sum: OccasionSumAggregateOutputType | null
    _min: OccasionMinAggregateOutputType | null
    _max: OccasionMaxAggregateOutputType | null
  }

  type GetOccasionGroupByPayload<T extends OccasionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OccasionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OccasionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OccasionGroupByOutputType[P]>
            : GetScalarType<T[P], OccasionGroupByOutputType[P]>
        }
      >
    >


  export type OccasionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    amenities?: boolean | Occasion$amenitiesArgs<ExtArgs>
    _count?: boolean | OccasionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["occasion"]>

  export type OccasionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["occasion"]>

  export type OccasionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["occasion"]>

  export type OccasionSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type OccasionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["occasion"]>
  export type OccasionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    amenities?: boolean | Occasion$amenitiesArgs<ExtArgs>
    _count?: boolean | OccasionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OccasionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type OccasionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OccasionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Occasion"
    objects: {
      amenities: Prisma.$AmenityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["occasion"]>
    composites: {}
  }

  type OccasionGetPayload<S extends boolean | null | undefined | OccasionDefaultArgs> = $Result.GetResult<Prisma.$OccasionPayload, S>

  type OccasionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OccasionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OccasionCountAggregateInputType | true
    }

  export interface OccasionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Occasion'], meta: { name: 'Occasion' } }
    /**
     * Find zero or one Occasion that matches the filter.
     * @param {OccasionFindUniqueArgs} args - Arguments to find a Occasion
     * @example
     * // Get one Occasion
     * const occasion = await prisma.occasion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OccasionFindUniqueArgs>(args: SelectSubset<T, OccasionFindUniqueArgs<ExtArgs>>): Prisma__OccasionClient<$Result.GetResult<Prisma.$OccasionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Occasion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OccasionFindUniqueOrThrowArgs} args - Arguments to find a Occasion
     * @example
     * // Get one Occasion
     * const occasion = await prisma.occasion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OccasionFindUniqueOrThrowArgs>(args: SelectSubset<T, OccasionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OccasionClient<$Result.GetResult<Prisma.$OccasionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Occasion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OccasionFindFirstArgs} args - Arguments to find a Occasion
     * @example
     * // Get one Occasion
     * const occasion = await prisma.occasion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OccasionFindFirstArgs>(args?: SelectSubset<T, OccasionFindFirstArgs<ExtArgs>>): Prisma__OccasionClient<$Result.GetResult<Prisma.$OccasionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Occasion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OccasionFindFirstOrThrowArgs} args - Arguments to find a Occasion
     * @example
     * // Get one Occasion
     * const occasion = await prisma.occasion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OccasionFindFirstOrThrowArgs>(args?: SelectSubset<T, OccasionFindFirstOrThrowArgs<ExtArgs>>): Prisma__OccasionClient<$Result.GetResult<Prisma.$OccasionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Occasions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OccasionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Occasions
     * const occasions = await prisma.occasion.findMany()
     * 
     * // Get first 10 Occasions
     * const occasions = await prisma.occasion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const occasionWithIdOnly = await prisma.occasion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OccasionFindManyArgs>(args?: SelectSubset<T, OccasionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OccasionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Occasion.
     * @param {OccasionCreateArgs} args - Arguments to create a Occasion.
     * @example
     * // Create one Occasion
     * const Occasion = await prisma.occasion.create({
     *   data: {
     *     // ... data to create a Occasion
     *   }
     * })
     * 
     */
    create<T extends OccasionCreateArgs>(args: SelectSubset<T, OccasionCreateArgs<ExtArgs>>): Prisma__OccasionClient<$Result.GetResult<Prisma.$OccasionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Occasions.
     * @param {OccasionCreateManyArgs} args - Arguments to create many Occasions.
     * @example
     * // Create many Occasions
     * const occasion = await prisma.occasion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OccasionCreateManyArgs>(args?: SelectSubset<T, OccasionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Occasions and returns the data saved in the database.
     * @param {OccasionCreateManyAndReturnArgs} args - Arguments to create many Occasions.
     * @example
     * // Create many Occasions
     * const occasion = await prisma.occasion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Occasions and only return the `id`
     * const occasionWithIdOnly = await prisma.occasion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OccasionCreateManyAndReturnArgs>(args?: SelectSubset<T, OccasionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OccasionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Occasion.
     * @param {OccasionDeleteArgs} args - Arguments to delete one Occasion.
     * @example
     * // Delete one Occasion
     * const Occasion = await prisma.occasion.delete({
     *   where: {
     *     // ... filter to delete one Occasion
     *   }
     * })
     * 
     */
    delete<T extends OccasionDeleteArgs>(args: SelectSubset<T, OccasionDeleteArgs<ExtArgs>>): Prisma__OccasionClient<$Result.GetResult<Prisma.$OccasionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Occasion.
     * @param {OccasionUpdateArgs} args - Arguments to update one Occasion.
     * @example
     * // Update one Occasion
     * const occasion = await prisma.occasion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OccasionUpdateArgs>(args: SelectSubset<T, OccasionUpdateArgs<ExtArgs>>): Prisma__OccasionClient<$Result.GetResult<Prisma.$OccasionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Occasions.
     * @param {OccasionDeleteManyArgs} args - Arguments to filter Occasions to delete.
     * @example
     * // Delete a few Occasions
     * const { count } = await prisma.occasion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OccasionDeleteManyArgs>(args?: SelectSubset<T, OccasionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Occasions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OccasionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Occasions
     * const occasion = await prisma.occasion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OccasionUpdateManyArgs>(args: SelectSubset<T, OccasionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Occasions and returns the data updated in the database.
     * @param {OccasionUpdateManyAndReturnArgs} args - Arguments to update many Occasions.
     * @example
     * // Update many Occasions
     * const occasion = await prisma.occasion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Occasions and only return the `id`
     * const occasionWithIdOnly = await prisma.occasion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OccasionUpdateManyAndReturnArgs>(args: SelectSubset<T, OccasionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OccasionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Occasion.
     * @param {OccasionUpsertArgs} args - Arguments to update or create a Occasion.
     * @example
     * // Update or create a Occasion
     * const occasion = await prisma.occasion.upsert({
     *   create: {
     *     // ... data to create a Occasion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Occasion we want to update
     *   }
     * })
     */
    upsert<T extends OccasionUpsertArgs>(args: SelectSubset<T, OccasionUpsertArgs<ExtArgs>>): Prisma__OccasionClient<$Result.GetResult<Prisma.$OccasionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Occasions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OccasionCountArgs} args - Arguments to filter Occasions to count.
     * @example
     * // Count the number of Occasions
     * const count = await prisma.occasion.count({
     *   where: {
     *     // ... the filter for the Occasions we want to count
     *   }
     * })
    **/
    count<T extends OccasionCountArgs>(
      args?: Subset<T, OccasionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OccasionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Occasion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OccasionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OccasionAggregateArgs>(args: Subset<T, OccasionAggregateArgs>): Prisma.PrismaPromise<GetOccasionAggregateType<T>>

    /**
     * Group by Occasion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OccasionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OccasionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OccasionGroupByArgs['orderBy'] }
        : { orderBy?: OccasionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OccasionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOccasionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Occasion model
   */
  readonly fields: OccasionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Occasion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OccasionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    amenities<T extends Occasion$amenitiesArgs<ExtArgs> = {}>(args?: Subset<T, Occasion$amenitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Occasion model
   */
  interface OccasionFieldRefs {
    readonly id: FieldRef<"Occasion", 'Int'>
    readonly name: FieldRef<"Occasion", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Occasion findUnique
   */
  export type OccasionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Occasion
     */
    select?: OccasionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Occasion
     */
    omit?: OccasionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OccasionInclude<ExtArgs> | null
    /**
     * Filter, which Occasion to fetch.
     */
    where: OccasionWhereUniqueInput
  }

  /**
   * Occasion findUniqueOrThrow
   */
  export type OccasionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Occasion
     */
    select?: OccasionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Occasion
     */
    omit?: OccasionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OccasionInclude<ExtArgs> | null
    /**
     * Filter, which Occasion to fetch.
     */
    where: OccasionWhereUniqueInput
  }

  /**
   * Occasion findFirst
   */
  export type OccasionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Occasion
     */
    select?: OccasionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Occasion
     */
    omit?: OccasionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OccasionInclude<ExtArgs> | null
    /**
     * Filter, which Occasion to fetch.
     */
    where?: OccasionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Occasions to fetch.
     */
    orderBy?: OccasionOrderByWithRelationInput | OccasionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Occasions.
     */
    cursor?: OccasionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Occasions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Occasions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Occasions.
     */
    distinct?: OccasionScalarFieldEnum | OccasionScalarFieldEnum[]
  }

  /**
   * Occasion findFirstOrThrow
   */
  export type OccasionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Occasion
     */
    select?: OccasionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Occasion
     */
    omit?: OccasionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OccasionInclude<ExtArgs> | null
    /**
     * Filter, which Occasion to fetch.
     */
    where?: OccasionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Occasions to fetch.
     */
    orderBy?: OccasionOrderByWithRelationInput | OccasionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Occasions.
     */
    cursor?: OccasionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Occasions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Occasions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Occasions.
     */
    distinct?: OccasionScalarFieldEnum | OccasionScalarFieldEnum[]
  }

  /**
   * Occasion findMany
   */
  export type OccasionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Occasion
     */
    select?: OccasionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Occasion
     */
    omit?: OccasionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OccasionInclude<ExtArgs> | null
    /**
     * Filter, which Occasions to fetch.
     */
    where?: OccasionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Occasions to fetch.
     */
    orderBy?: OccasionOrderByWithRelationInput | OccasionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Occasions.
     */
    cursor?: OccasionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Occasions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Occasions.
     */
    skip?: number
    distinct?: OccasionScalarFieldEnum | OccasionScalarFieldEnum[]
  }

  /**
   * Occasion create
   */
  export type OccasionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Occasion
     */
    select?: OccasionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Occasion
     */
    omit?: OccasionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OccasionInclude<ExtArgs> | null
    /**
     * The data needed to create a Occasion.
     */
    data: XOR<OccasionCreateInput, OccasionUncheckedCreateInput>
  }

  /**
   * Occasion createMany
   */
  export type OccasionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Occasions.
     */
    data: OccasionCreateManyInput | OccasionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Occasion createManyAndReturn
   */
  export type OccasionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Occasion
     */
    select?: OccasionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Occasion
     */
    omit?: OccasionOmit<ExtArgs> | null
    /**
     * The data used to create many Occasions.
     */
    data: OccasionCreateManyInput | OccasionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Occasion update
   */
  export type OccasionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Occasion
     */
    select?: OccasionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Occasion
     */
    omit?: OccasionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OccasionInclude<ExtArgs> | null
    /**
     * The data needed to update a Occasion.
     */
    data: XOR<OccasionUpdateInput, OccasionUncheckedUpdateInput>
    /**
     * Choose, which Occasion to update.
     */
    where: OccasionWhereUniqueInput
  }

  /**
   * Occasion updateMany
   */
  export type OccasionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Occasions.
     */
    data: XOR<OccasionUpdateManyMutationInput, OccasionUncheckedUpdateManyInput>
    /**
     * Filter which Occasions to update
     */
    where?: OccasionWhereInput
    /**
     * Limit how many Occasions to update.
     */
    limit?: number
  }

  /**
   * Occasion updateManyAndReturn
   */
  export type OccasionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Occasion
     */
    select?: OccasionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Occasion
     */
    omit?: OccasionOmit<ExtArgs> | null
    /**
     * The data used to update Occasions.
     */
    data: XOR<OccasionUpdateManyMutationInput, OccasionUncheckedUpdateManyInput>
    /**
     * Filter which Occasions to update
     */
    where?: OccasionWhereInput
    /**
     * Limit how many Occasions to update.
     */
    limit?: number
  }

  /**
   * Occasion upsert
   */
  export type OccasionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Occasion
     */
    select?: OccasionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Occasion
     */
    omit?: OccasionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OccasionInclude<ExtArgs> | null
    /**
     * The filter to search for the Occasion to update in case it exists.
     */
    where: OccasionWhereUniqueInput
    /**
     * In case the Occasion found by the `where` argument doesn't exist, create a new Occasion with this data.
     */
    create: XOR<OccasionCreateInput, OccasionUncheckedCreateInput>
    /**
     * In case the Occasion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OccasionUpdateInput, OccasionUncheckedUpdateInput>
  }

  /**
   * Occasion delete
   */
  export type OccasionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Occasion
     */
    select?: OccasionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Occasion
     */
    omit?: OccasionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OccasionInclude<ExtArgs> | null
    /**
     * Filter which Occasion to delete.
     */
    where: OccasionWhereUniqueInput
  }

  /**
   * Occasion deleteMany
   */
  export type OccasionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Occasions to delete
     */
    where?: OccasionWhereInput
    /**
     * Limit how many Occasions to delete.
     */
    limit?: number
  }

  /**
   * Occasion.amenities
   */
  export type Occasion$amenitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityInclude<ExtArgs> | null
    where?: AmenityWhereInput
    orderBy?: AmenityOrderByWithRelationInput | AmenityOrderByWithRelationInput[]
    cursor?: AmenityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AmenityScalarFieldEnum | AmenityScalarFieldEnum[]
  }

  /**
   * Occasion without action
   */
  export type OccasionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Occasion
     */
    select?: OccasionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Occasion
     */
    omit?: OccasionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OccasionInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    phoneNumber: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    phoneNumber: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    phoneNumber: number
    password: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    phoneNumber?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    phoneNumber?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    phoneNumber?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    name: string
    phoneNumber: string
    password: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    phoneNumber?: boolean
    password?: boolean
    venues?: boolean | User$venuesArgs<ExtArgs>
    venueRatingUser?: boolean | User$venueRatingUserArgs<ExtArgs>
    venueReservationUser?: boolean | User$venueReservationUserArgs<ExtArgs>
    venueFavouriteUser?: boolean | User$venueFavouriteUserArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    phoneNumber?: boolean
    password?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    phoneNumber?: boolean
    password?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    phoneNumber?: boolean
    password?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "phoneNumber" | "password", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    venues?: boolean | User$venuesArgs<ExtArgs>
    venueRatingUser?: boolean | User$venueRatingUserArgs<ExtArgs>
    venueReservationUser?: boolean | User$venueReservationUserArgs<ExtArgs>
    venueFavouriteUser?: boolean | User$venueFavouriteUserArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      venues: Prisma.$VenuePayload<ExtArgs>[]
      venueRatingUser: Prisma.$VenueRatingUserPayload<ExtArgs>[]
      venueReservationUser: Prisma.$VenueReservationUserPayload<ExtArgs>[]
      venueFavouriteUser: Prisma.$VenueFavouriteUserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      name: string
      phoneNumber: string
      password: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    venues<T extends User$venuesArgs<ExtArgs> = {}>(args?: Subset<T, User$venuesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VenuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    venueRatingUser<T extends User$venueRatingUserArgs<ExtArgs> = {}>(args?: Subset<T, User$venueRatingUserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VenueRatingUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    venueReservationUser<T extends User$venueReservationUserArgs<ExtArgs> = {}>(args?: Subset<T, User$venueReservationUserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VenueReservationUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    venueFavouriteUser<T extends User$venueFavouriteUserArgs<ExtArgs> = {}>(args?: Subset<T, User$venueFavouriteUserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VenueFavouriteUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.venues
   */
  export type User$venuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venue
     */
    omit?: VenueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueInclude<ExtArgs> | null
    where?: VenueWhereInput
    orderBy?: VenueOrderByWithRelationInput | VenueOrderByWithRelationInput[]
    cursor?: VenueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VenueScalarFieldEnum | VenueScalarFieldEnum[]
  }

  /**
   * User.venueRatingUser
   */
  export type User$venueRatingUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueRatingUser
     */
    select?: VenueRatingUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueRatingUser
     */
    omit?: VenueRatingUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueRatingUserInclude<ExtArgs> | null
    where?: VenueRatingUserWhereInput
    orderBy?: VenueRatingUserOrderByWithRelationInput | VenueRatingUserOrderByWithRelationInput[]
    cursor?: VenueRatingUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VenueRatingUserScalarFieldEnum | VenueRatingUserScalarFieldEnum[]
  }

  /**
   * User.venueReservationUser
   */
  export type User$venueReservationUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueReservationUser
     */
    select?: VenueReservationUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueReservationUser
     */
    omit?: VenueReservationUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueReservationUserInclude<ExtArgs> | null
    where?: VenueReservationUserWhereInput
    orderBy?: VenueReservationUserOrderByWithRelationInput | VenueReservationUserOrderByWithRelationInput[]
    cursor?: VenueReservationUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VenueReservationUserScalarFieldEnum | VenueReservationUserScalarFieldEnum[]
  }

  /**
   * User.venueFavouriteUser
   */
  export type User$venueFavouriteUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueFavouriteUser
     */
    select?: VenueFavouriteUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueFavouriteUser
     */
    omit?: VenueFavouriteUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueFavouriteUserInclude<ExtArgs> | null
    where?: VenueFavouriteUserWhereInput
    orderBy?: VenueFavouriteUserOrderByWithRelationInput | VenueFavouriteUserOrderByWithRelationInput[]
    cursor?: VenueFavouriteUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VenueFavouriteUserScalarFieldEnum | VenueFavouriteUserScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model VenueFavouriteUser
   */

  export type AggregateVenueFavouriteUser = {
    _count: VenueFavouriteUserCountAggregateOutputType | null
    _avg: VenueFavouriteUserAvgAggregateOutputType | null
    _sum: VenueFavouriteUserSumAggregateOutputType | null
    _min: VenueFavouriteUserMinAggregateOutputType | null
    _max: VenueFavouriteUserMaxAggregateOutputType | null
  }

  export type VenueFavouriteUserAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    venueId: number | null
  }

  export type VenueFavouriteUserSumAggregateOutputType = {
    id: number | null
    userId: number | null
    venueId: number | null
  }

  export type VenueFavouriteUserMinAggregateOutputType = {
    id: number | null
    userId: number | null
    venueId: number | null
  }

  export type VenueFavouriteUserMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    venueId: number | null
  }

  export type VenueFavouriteUserCountAggregateOutputType = {
    id: number
    userId: number
    venueId: number
    _all: number
  }


  export type VenueFavouriteUserAvgAggregateInputType = {
    id?: true
    userId?: true
    venueId?: true
  }

  export type VenueFavouriteUserSumAggregateInputType = {
    id?: true
    userId?: true
    venueId?: true
  }

  export type VenueFavouriteUserMinAggregateInputType = {
    id?: true
    userId?: true
    venueId?: true
  }

  export type VenueFavouriteUserMaxAggregateInputType = {
    id?: true
    userId?: true
    venueId?: true
  }

  export type VenueFavouriteUserCountAggregateInputType = {
    id?: true
    userId?: true
    venueId?: true
    _all?: true
  }

  export type VenueFavouriteUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VenueFavouriteUser to aggregate.
     */
    where?: VenueFavouriteUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VenueFavouriteUsers to fetch.
     */
    orderBy?: VenueFavouriteUserOrderByWithRelationInput | VenueFavouriteUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VenueFavouriteUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VenueFavouriteUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VenueFavouriteUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VenueFavouriteUsers
    **/
    _count?: true | VenueFavouriteUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VenueFavouriteUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VenueFavouriteUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VenueFavouriteUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VenueFavouriteUserMaxAggregateInputType
  }

  export type GetVenueFavouriteUserAggregateType<T extends VenueFavouriteUserAggregateArgs> = {
        [P in keyof T & keyof AggregateVenueFavouriteUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVenueFavouriteUser[P]>
      : GetScalarType<T[P], AggregateVenueFavouriteUser[P]>
  }




  export type VenueFavouriteUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VenueFavouriteUserWhereInput
    orderBy?: VenueFavouriteUserOrderByWithAggregationInput | VenueFavouriteUserOrderByWithAggregationInput[]
    by: VenueFavouriteUserScalarFieldEnum[] | VenueFavouriteUserScalarFieldEnum
    having?: VenueFavouriteUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VenueFavouriteUserCountAggregateInputType | true
    _avg?: VenueFavouriteUserAvgAggregateInputType
    _sum?: VenueFavouriteUserSumAggregateInputType
    _min?: VenueFavouriteUserMinAggregateInputType
    _max?: VenueFavouriteUserMaxAggregateInputType
  }

  export type VenueFavouriteUserGroupByOutputType = {
    id: number
    userId: number
    venueId: number
    _count: VenueFavouriteUserCountAggregateOutputType | null
    _avg: VenueFavouriteUserAvgAggregateOutputType | null
    _sum: VenueFavouriteUserSumAggregateOutputType | null
    _min: VenueFavouriteUserMinAggregateOutputType | null
    _max: VenueFavouriteUserMaxAggregateOutputType | null
  }

  type GetVenueFavouriteUserGroupByPayload<T extends VenueFavouriteUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VenueFavouriteUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VenueFavouriteUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VenueFavouriteUserGroupByOutputType[P]>
            : GetScalarType<T[P], VenueFavouriteUserGroupByOutputType[P]>
        }
      >
    >


  export type VenueFavouriteUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    venueId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    venue?: boolean | VenueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["venueFavouriteUser"]>

  export type VenueFavouriteUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    venueId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    venue?: boolean | VenueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["venueFavouriteUser"]>

  export type VenueFavouriteUserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    venueId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    venue?: boolean | VenueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["venueFavouriteUser"]>

  export type VenueFavouriteUserSelectScalar = {
    id?: boolean
    userId?: boolean
    venueId?: boolean
  }

  export type VenueFavouriteUserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "venueId", ExtArgs["result"]["venueFavouriteUser"]>
  export type VenueFavouriteUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    venue?: boolean | VenueDefaultArgs<ExtArgs>
  }
  export type VenueFavouriteUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    venue?: boolean | VenueDefaultArgs<ExtArgs>
  }
  export type VenueFavouriteUserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    venue?: boolean | VenueDefaultArgs<ExtArgs>
  }

  export type $VenueFavouriteUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VenueFavouriteUser"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      venue: Prisma.$VenuePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      venueId: number
    }, ExtArgs["result"]["venueFavouriteUser"]>
    composites: {}
  }

  type VenueFavouriteUserGetPayload<S extends boolean | null | undefined | VenueFavouriteUserDefaultArgs> = $Result.GetResult<Prisma.$VenueFavouriteUserPayload, S>

  type VenueFavouriteUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VenueFavouriteUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VenueFavouriteUserCountAggregateInputType | true
    }

  export interface VenueFavouriteUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VenueFavouriteUser'], meta: { name: 'VenueFavouriteUser' } }
    /**
     * Find zero or one VenueFavouriteUser that matches the filter.
     * @param {VenueFavouriteUserFindUniqueArgs} args - Arguments to find a VenueFavouriteUser
     * @example
     * // Get one VenueFavouriteUser
     * const venueFavouriteUser = await prisma.venueFavouriteUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VenueFavouriteUserFindUniqueArgs>(args: SelectSubset<T, VenueFavouriteUserFindUniqueArgs<ExtArgs>>): Prisma__VenueFavouriteUserClient<$Result.GetResult<Prisma.$VenueFavouriteUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VenueFavouriteUser that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VenueFavouriteUserFindUniqueOrThrowArgs} args - Arguments to find a VenueFavouriteUser
     * @example
     * // Get one VenueFavouriteUser
     * const venueFavouriteUser = await prisma.venueFavouriteUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VenueFavouriteUserFindUniqueOrThrowArgs>(args: SelectSubset<T, VenueFavouriteUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VenueFavouriteUserClient<$Result.GetResult<Prisma.$VenueFavouriteUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VenueFavouriteUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueFavouriteUserFindFirstArgs} args - Arguments to find a VenueFavouriteUser
     * @example
     * // Get one VenueFavouriteUser
     * const venueFavouriteUser = await prisma.venueFavouriteUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VenueFavouriteUserFindFirstArgs>(args?: SelectSubset<T, VenueFavouriteUserFindFirstArgs<ExtArgs>>): Prisma__VenueFavouriteUserClient<$Result.GetResult<Prisma.$VenueFavouriteUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VenueFavouriteUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueFavouriteUserFindFirstOrThrowArgs} args - Arguments to find a VenueFavouriteUser
     * @example
     * // Get one VenueFavouriteUser
     * const venueFavouriteUser = await prisma.venueFavouriteUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VenueFavouriteUserFindFirstOrThrowArgs>(args?: SelectSubset<T, VenueFavouriteUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__VenueFavouriteUserClient<$Result.GetResult<Prisma.$VenueFavouriteUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VenueFavouriteUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueFavouriteUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VenueFavouriteUsers
     * const venueFavouriteUsers = await prisma.venueFavouriteUser.findMany()
     * 
     * // Get first 10 VenueFavouriteUsers
     * const venueFavouriteUsers = await prisma.venueFavouriteUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const venueFavouriteUserWithIdOnly = await prisma.venueFavouriteUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VenueFavouriteUserFindManyArgs>(args?: SelectSubset<T, VenueFavouriteUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VenueFavouriteUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VenueFavouriteUser.
     * @param {VenueFavouriteUserCreateArgs} args - Arguments to create a VenueFavouriteUser.
     * @example
     * // Create one VenueFavouriteUser
     * const VenueFavouriteUser = await prisma.venueFavouriteUser.create({
     *   data: {
     *     // ... data to create a VenueFavouriteUser
     *   }
     * })
     * 
     */
    create<T extends VenueFavouriteUserCreateArgs>(args: SelectSubset<T, VenueFavouriteUserCreateArgs<ExtArgs>>): Prisma__VenueFavouriteUserClient<$Result.GetResult<Prisma.$VenueFavouriteUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VenueFavouriteUsers.
     * @param {VenueFavouriteUserCreateManyArgs} args - Arguments to create many VenueFavouriteUsers.
     * @example
     * // Create many VenueFavouriteUsers
     * const venueFavouriteUser = await prisma.venueFavouriteUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VenueFavouriteUserCreateManyArgs>(args?: SelectSubset<T, VenueFavouriteUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VenueFavouriteUsers and returns the data saved in the database.
     * @param {VenueFavouriteUserCreateManyAndReturnArgs} args - Arguments to create many VenueFavouriteUsers.
     * @example
     * // Create many VenueFavouriteUsers
     * const venueFavouriteUser = await prisma.venueFavouriteUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VenueFavouriteUsers and only return the `id`
     * const venueFavouriteUserWithIdOnly = await prisma.venueFavouriteUser.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VenueFavouriteUserCreateManyAndReturnArgs>(args?: SelectSubset<T, VenueFavouriteUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VenueFavouriteUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VenueFavouriteUser.
     * @param {VenueFavouriteUserDeleteArgs} args - Arguments to delete one VenueFavouriteUser.
     * @example
     * // Delete one VenueFavouriteUser
     * const VenueFavouriteUser = await prisma.venueFavouriteUser.delete({
     *   where: {
     *     // ... filter to delete one VenueFavouriteUser
     *   }
     * })
     * 
     */
    delete<T extends VenueFavouriteUserDeleteArgs>(args: SelectSubset<T, VenueFavouriteUserDeleteArgs<ExtArgs>>): Prisma__VenueFavouriteUserClient<$Result.GetResult<Prisma.$VenueFavouriteUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VenueFavouriteUser.
     * @param {VenueFavouriteUserUpdateArgs} args - Arguments to update one VenueFavouriteUser.
     * @example
     * // Update one VenueFavouriteUser
     * const venueFavouriteUser = await prisma.venueFavouriteUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VenueFavouriteUserUpdateArgs>(args: SelectSubset<T, VenueFavouriteUserUpdateArgs<ExtArgs>>): Prisma__VenueFavouriteUserClient<$Result.GetResult<Prisma.$VenueFavouriteUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VenueFavouriteUsers.
     * @param {VenueFavouriteUserDeleteManyArgs} args - Arguments to filter VenueFavouriteUsers to delete.
     * @example
     * // Delete a few VenueFavouriteUsers
     * const { count } = await prisma.venueFavouriteUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VenueFavouriteUserDeleteManyArgs>(args?: SelectSubset<T, VenueFavouriteUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VenueFavouriteUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueFavouriteUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VenueFavouriteUsers
     * const venueFavouriteUser = await prisma.venueFavouriteUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VenueFavouriteUserUpdateManyArgs>(args: SelectSubset<T, VenueFavouriteUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VenueFavouriteUsers and returns the data updated in the database.
     * @param {VenueFavouriteUserUpdateManyAndReturnArgs} args - Arguments to update many VenueFavouriteUsers.
     * @example
     * // Update many VenueFavouriteUsers
     * const venueFavouriteUser = await prisma.venueFavouriteUser.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VenueFavouriteUsers and only return the `id`
     * const venueFavouriteUserWithIdOnly = await prisma.venueFavouriteUser.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VenueFavouriteUserUpdateManyAndReturnArgs>(args: SelectSubset<T, VenueFavouriteUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VenueFavouriteUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VenueFavouriteUser.
     * @param {VenueFavouriteUserUpsertArgs} args - Arguments to update or create a VenueFavouriteUser.
     * @example
     * // Update or create a VenueFavouriteUser
     * const venueFavouriteUser = await prisma.venueFavouriteUser.upsert({
     *   create: {
     *     // ... data to create a VenueFavouriteUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VenueFavouriteUser we want to update
     *   }
     * })
     */
    upsert<T extends VenueFavouriteUserUpsertArgs>(args: SelectSubset<T, VenueFavouriteUserUpsertArgs<ExtArgs>>): Prisma__VenueFavouriteUserClient<$Result.GetResult<Prisma.$VenueFavouriteUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VenueFavouriteUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueFavouriteUserCountArgs} args - Arguments to filter VenueFavouriteUsers to count.
     * @example
     * // Count the number of VenueFavouriteUsers
     * const count = await prisma.venueFavouriteUser.count({
     *   where: {
     *     // ... the filter for the VenueFavouriteUsers we want to count
     *   }
     * })
    **/
    count<T extends VenueFavouriteUserCountArgs>(
      args?: Subset<T, VenueFavouriteUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VenueFavouriteUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VenueFavouriteUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueFavouriteUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VenueFavouriteUserAggregateArgs>(args: Subset<T, VenueFavouriteUserAggregateArgs>): Prisma.PrismaPromise<GetVenueFavouriteUserAggregateType<T>>

    /**
     * Group by VenueFavouriteUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueFavouriteUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VenueFavouriteUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VenueFavouriteUserGroupByArgs['orderBy'] }
        : { orderBy?: VenueFavouriteUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VenueFavouriteUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVenueFavouriteUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VenueFavouriteUser model
   */
  readonly fields: VenueFavouriteUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VenueFavouriteUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VenueFavouriteUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    venue<T extends VenueDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VenueDefaultArgs<ExtArgs>>): Prisma__VenueClient<$Result.GetResult<Prisma.$VenuePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VenueFavouriteUser model
   */
  interface VenueFavouriteUserFieldRefs {
    readonly id: FieldRef<"VenueFavouriteUser", 'Int'>
    readonly userId: FieldRef<"VenueFavouriteUser", 'Int'>
    readonly venueId: FieldRef<"VenueFavouriteUser", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * VenueFavouriteUser findUnique
   */
  export type VenueFavouriteUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueFavouriteUser
     */
    select?: VenueFavouriteUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueFavouriteUser
     */
    omit?: VenueFavouriteUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueFavouriteUserInclude<ExtArgs> | null
    /**
     * Filter, which VenueFavouriteUser to fetch.
     */
    where: VenueFavouriteUserWhereUniqueInput
  }

  /**
   * VenueFavouriteUser findUniqueOrThrow
   */
  export type VenueFavouriteUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueFavouriteUser
     */
    select?: VenueFavouriteUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueFavouriteUser
     */
    omit?: VenueFavouriteUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueFavouriteUserInclude<ExtArgs> | null
    /**
     * Filter, which VenueFavouriteUser to fetch.
     */
    where: VenueFavouriteUserWhereUniqueInput
  }

  /**
   * VenueFavouriteUser findFirst
   */
  export type VenueFavouriteUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueFavouriteUser
     */
    select?: VenueFavouriteUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueFavouriteUser
     */
    omit?: VenueFavouriteUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueFavouriteUserInclude<ExtArgs> | null
    /**
     * Filter, which VenueFavouriteUser to fetch.
     */
    where?: VenueFavouriteUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VenueFavouriteUsers to fetch.
     */
    orderBy?: VenueFavouriteUserOrderByWithRelationInput | VenueFavouriteUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VenueFavouriteUsers.
     */
    cursor?: VenueFavouriteUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VenueFavouriteUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VenueFavouriteUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VenueFavouriteUsers.
     */
    distinct?: VenueFavouriteUserScalarFieldEnum | VenueFavouriteUserScalarFieldEnum[]
  }

  /**
   * VenueFavouriteUser findFirstOrThrow
   */
  export type VenueFavouriteUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueFavouriteUser
     */
    select?: VenueFavouriteUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueFavouriteUser
     */
    omit?: VenueFavouriteUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueFavouriteUserInclude<ExtArgs> | null
    /**
     * Filter, which VenueFavouriteUser to fetch.
     */
    where?: VenueFavouriteUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VenueFavouriteUsers to fetch.
     */
    orderBy?: VenueFavouriteUserOrderByWithRelationInput | VenueFavouriteUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VenueFavouriteUsers.
     */
    cursor?: VenueFavouriteUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VenueFavouriteUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VenueFavouriteUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VenueFavouriteUsers.
     */
    distinct?: VenueFavouriteUserScalarFieldEnum | VenueFavouriteUserScalarFieldEnum[]
  }

  /**
   * VenueFavouriteUser findMany
   */
  export type VenueFavouriteUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueFavouriteUser
     */
    select?: VenueFavouriteUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueFavouriteUser
     */
    omit?: VenueFavouriteUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueFavouriteUserInclude<ExtArgs> | null
    /**
     * Filter, which VenueFavouriteUsers to fetch.
     */
    where?: VenueFavouriteUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VenueFavouriteUsers to fetch.
     */
    orderBy?: VenueFavouriteUserOrderByWithRelationInput | VenueFavouriteUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VenueFavouriteUsers.
     */
    cursor?: VenueFavouriteUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VenueFavouriteUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VenueFavouriteUsers.
     */
    skip?: number
    distinct?: VenueFavouriteUserScalarFieldEnum | VenueFavouriteUserScalarFieldEnum[]
  }

  /**
   * VenueFavouriteUser create
   */
  export type VenueFavouriteUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueFavouriteUser
     */
    select?: VenueFavouriteUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueFavouriteUser
     */
    omit?: VenueFavouriteUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueFavouriteUserInclude<ExtArgs> | null
    /**
     * The data needed to create a VenueFavouriteUser.
     */
    data: XOR<VenueFavouriteUserCreateInput, VenueFavouriteUserUncheckedCreateInput>
  }

  /**
   * VenueFavouriteUser createMany
   */
  export type VenueFavouriteUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VenueFavouriteUsers.
     */
    data: VenueFavouriteUserCreateManyInput | VenueFavouriteUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VenueFavouriteUser createManyAndReturn
   */
  export type VenueFavouriteUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueFavouriteUser
     */
    select?: VenueFavouriteUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VenueFavouriteUser
     */
    omit?: VenueFavouriteUserOmit<ExtArgs> | null
    /**
     * The data used to create many VenueFavouriteUsers.
     */
    data: VenueFavouriteUserCreateManyInput | VenueFavouriteUserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueFavouriteUserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VenueFavouriteUser update
   */
  export type VenueFavouriteUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueFavouriteUser
     */
    select?: VenueFavouriteUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueFavouriteUser
     */
    omit?: VenueFavouriteUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueFavouriteUserInclude<ExtArgs> | null
    /**
     * The data needed to update a VenueFavouriteUser.
     */
    data: XOR<VenueFavouriteUserUpdateInput, VenueFavouriteUserUncheckedUpdateInput>
    /**
     * Choose, which VenueFavouriteUser to update.
     */
    where: VenueFavouriteUserWhereUniqueInput
  }

  /**
   * VenueFavouriteUser updateMany
   */
  export type VenueFavouriteUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VenueFavouriteUsers.
     */
    data: XOR<VenueFavouriteUserUpdateManyMutationInput, VenueFavouriteUserUncheckedUpdateManyInput>
    /**
     * Filter which VenueFavouriteUsers to update
     */
    where?: VenueFavouriteUserWhereInput
    /**
     * Limit how many VenueFavouriteUsers to update.
     */
    limit?: number
  }

  /**
   * VenueFavouriteUser updateManyAndReturn
   */
  export type VenueFavouriteUserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueFavouriteUser
     */
    select?: VenueFavouriteUserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VenueFavouriteUser
     */
    omit?: VenueFavouriteUserOmit<ExtArgs> | null
    /**
     * The data used to update VenueFavouriteUsers.
     */
    data: XOR<VenueFavouriteUserUpdateManyMutationInput, VenueFavouriteUserUncheckedUpdateManyInput>
    /**
     * Filter which VenueFavouriteUsers to update
     */
    where?: VenueFavouriteUserWhereInput
    /**
     * Limit how many VenueFavouriteUsers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueFavouriteUserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * VenueFavouriteUser upsert
   */
  export type VenueFavouriteUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueFavouriteUser
     */
    select?: VenueFavouriteUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueFavouriteUser
     */
    omit?: VenueFavouriteUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueFavouriteUserInclude<ExtArgs> | null
    /**
     * The filter to search for the VenueFavouriteUser to update in case it exists.
     */
    where: VenueFavouriteUserWhereUniqueInput
    /**
     * In case the VenueFavouriteUser found by the `where` argument doesn't exist, create a new VenueFavouriteUser with this data.
     */
    create: XOR<VenueFavouriteUserCreateInput, VenueFavouriteUserUncheckedCreateInput>
    /**
     * In case the VenueFavouriteUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VenueFavouriteUserUpdateInput, VenueFavouriteUserUncheckedUpdateInput>
  }

  /**
   * VenueFavouriteUser delete
   */
  export type VenueFavouriteUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueFavouriteUser
     */
    select?: VenueFavouriteUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueFavouriteUser
     */
    omit?: VenueFavouriteUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueFavouriteUserInclude<ExtArgs> | null
    /**
     * Filter which VenueFavouriteUser to delete.
     */
    where: VenueFavouriteUserWhereUniqueInput
  }

  /**
   * VenueFavouriteUser deleteMany
   */
  export type VenueFavouriteUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VenueFavouriteUsers to delete
     */
    where?: VenueFavouriteUserWhereInput
    /**
     * Limit how many VenueFavouriteUsers to delete.
     */
    limit?: number
  }

  /**
   * VenueFavouriteUser without action
   */
  export type VenueFavouriteUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueFavouriteUser
     */
    select?: VenueFavouriteUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueFavouriteUser
     */
    omit?: VenueFavouriteUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueFavouriteUserInclude<ExtArgs> | null
  }


  /**
   * Model VenueRatingUser
   */

  export type AggregateVenueRatingUser = {
    _count: VenueRatingUserCountAggregateOutputType | null
    _avg: VenueRatingUserAvgAggregateOutputType | null
    _sum: VenueRatingUserSumAggregateOutputType | null
    _min: VenueRatingUserMinAggregateOutputType | null
    _max: VenueRatingUserMaxAggregateOutputType | null
  }

  export type VenueRatingUserAvgAggregateOutputType = {
    id: number | null
    venueId: number | null
    userId: number | null
    score: number | null
  }

  export type VenueRatingUserSumAggregateOutputType = {
    id: number | null
    venueId: number | null
    userId: number | null
    score: number | null
  }

  export type VenueRatingUserMinAggregateOutputType = {
    id: number | null
    venueId: number | null
    userId: number | null
    score: number | null
    review: string | null
  }

  export type VenueRatingUserMaxAggregateOutputType = {
    id: number | null
    venueId: number | null
    userId: number | null
    score: number | null
    review: string | null
  }

  export type VenueRatingUserCountAggregateOutputType = {
    id: number
    venueId: number
    userId: number
    score: number
    review: number
    _all: number
  }


  export type VenueRatingUserAvgAggregateInputType = {
    id?: true
    venueId?: true
    userId?: true
    score?: true
  }

  export type VenueRatingUserSumAggregateInputType = {
    id?: true
    venueId?: true
    userId?: true
    score?: true
  }

  export type VenueRatingUserMinAggregateInputType = {
    id?: true
    venueId?: true
    userId?: true
    score?: true
    review?: true
  }

  export type VenueRatingUserMaxAggregateInputType = {
    id?: true
    venueId?: true
    userId?: true
    score?: true
    review?: true
  }

  export type VenueRatingUserCountAggregateInputType = {
    id?: true
    venueId?: true
    userId?: true
    score?: true
    review?: true
    _all?: true
  }

  export type VenueRatingUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VenueRatingUser to aggregate.
     */
    where?: VenueRatingUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VenueRatingUsers to fetch.
     */
    orderBy?: VenueRatingUserOrderByWithRelationInput | VenueRatingUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VenueRatingUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VenueRatingUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VenueRatingUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VenueRatingUsers
    **/
    _count?: true | VenueRatingUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VenueRatingUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VenueRatingUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VenueRatingUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VenueRatingUserMaxAggregateInputType
  }

  export type GetVenueRatingUserAggregateType<T extends VenueRatingUserAggregateArgs> = {
        [P in keyof T & keyof AggregateVenueRatingUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVenueRatingUser[P]>
      : GetScalarType<T[P], AggregateVenueRatingUser[P]>
  }




  export type VenueRatingUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VenueRatingUserWhereInput
    orderBy?: VenueRatingUserOrderByWithAggregationInput | VenueRatingUserOrderByWithAggregationInput[]
    by: VenueRatingUserScalarFieldEnum[] | VenueRatingUserScalarFieldEnum
    having?: VenueRatingUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VenueRatingUserCountAggregateInputType | true
    _avg?: VenueRatingUserAvgAggregateInputType
    _sum?: VenueRatingUserSumAggregateInputType
    _min?: VenueRatingUserMinAggregateInputType
    _max?: VenueRatingUserMaxAggregateInputType
  }

  export type VenueRatingUserGroupByOutputType = {
    id: number
    venueId: number
    userId: number
    score: number
    review: string | null
    _count: VenueRatingUserCountAggregateOutputType | null
    _avg: VenueRatingUserAvgAggregateOutputType | null
    _sum: VenueRatingUserSumAggregateOutputType | null
    _min: VenueRatingUserMinAggregateOutputType | null
    _max: VenueRatingUserMaxAggregateOutputType | null
  }

  type GetVenueRatingUserGroupByPayload<T extends VenueRatingUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VenueRatingUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VenueRatingUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VenueRatingUserGroupByOutputType[P]>
            : GetScalarType<T[P], VenueRatingUserGroupByOutputType[P]>
        }
      >
    >


  export type VenueRatingUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    venueId?: boolean
    userId?: boolean
    score?: boolean
    review?: boolean
    venue?: boolean | VenueDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["venueRatingUser"]>

  export type VenueRatingUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    venueId?: boolean
    userId?: boolean
    score?: boolean
    review?: boolean
    venue?: boolean | VenueDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["venueRatingUser"]>

  export type VenueRatingUserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    venueId?: boolean
    userId?: boolean
    score?: boolean
    review?: boolean
    venue?: boolean | VenueDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["venueRatingUser"]>

  export type VenueRatingUserSelectScalar = {
    id?: boolean
    venueId?: boolean
    userId?: boolean
    score?: boolean
    review?: boolean
  }

  export type VenueRatingUserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "venueId" | "userId" | "score" | "review", ExtArgs["result"]["venueRatingUser"]>
  export type VenueRatingUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    venue?: boolean | VenueDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type VenueRatingUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    venue?: boolean | VenueDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type VenueRatingUserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    venue?: boolean | VenueDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $VenueRatingUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VenueRatingUser"
    objects: {
      venue: Prisma.$VenuePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      venueId: number
      userId: number
      score: number
      review: string | null
    }, ExtArgs["result"]["venueRatingUser"]>
    composites: {}
  }

  type VenueRatingUserGetPayload<S extends boolean | null | undefined | VenueRatingUserDefaultArgs> = $Result.GetResult<Prisma.$VenueRatingUserPayload, S>

  type VenueRatingUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VenueRatingUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VenueRatingUserCountAggregateInputType | true
    }

  export interface VenueRatingUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VenueRatingUser'], meta: { name: 'VenueRatingUser' } }
    /**
     * Find zero or one VenueRatingUser that matches the filter.
     * @param {VenueRatingUserFindUniqueArgs} args - Arguments to find a VenueRatingUser
     * @example
     * // Get one VenueRatingUser
     * const venueRatingUser = await prisma.venueRatingUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VenueRatingUserFindUniqueArgs>(args: SelectSubset<T, VenueRatingUserFindUniqueArgs<ExtArgs>>): Prisma__VenueRatingUserClient<$Result.GetResult<Prisma.$VenueRatingUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VenueRatingUser that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VenueRatingUserFindUniqueOrThrowArgs} args - Arguments to find a VenueRatingUser
     * @example
     * // Get one VenueRatingUser
     * const venueRatingUser = await prisma.venueRatingUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VenueRatingUserFindUniqueOrThrowArgs>(args: SelectSubset<T, VenueRatingUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VenueRatingUserClient<$Result.GetResult<Prisma.$VenueRatingUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VenueRatingUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueRatingUserFindFirstArgs} args - Arguments to find a VenueRatingUser
     * @example
     * // Get one VenueRatingUser
     * const venueRatingUser = await prisma.venueRatingUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VenueRatingUserFindFirstArgs>(args?: SelectSubset<T, VenueRatingUserFindFirstArgs<ExtArgs>>): Prisma__VenueRatingUserClient<$Result.GetResult<Prisma.$VenueRatingUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VenueRatingUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueRatingUserFindFirstOrThrowArgs} args - Arguments to find a VenueRatingUser
     * @example
     * // Get one VenueRatingUser
     * const venueRatingUser = await prisma.venueRatingUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VenueRatingUserFindFirstOrThrowArgs>(args?: SelectSubset<T, VenueRatingUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__VenueRatingUserClient<$Result.GetResult<Prisma.$VenueRatingUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VenueRatingUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueRatingUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VenueRatingUsers
     * const venueRatingUsers = await prisma.venueRatingUser.findMany()
     * 
     * // Get first 10 VenueRatingUsers
     * const venueRatingUsers = await prisma.venueRatingUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const venueRatingUserWithIdOnly = await prisma.venueRatingUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VenueRatingUserFindManyArgs>(args?: SelectSubset<T, VenueRatingUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VenueRatingUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VenueRatingUser.
     * @param {VenueRatingUserCreateArgs} args - Arguments to create a VenueRatingUser.
     * @example
     * // Create one VenueRatingUser
     * const VenueRatingUser = await prisma.venueRatingUser.create({
     *   data: {
     *     // ... data to create a VenueRatingUser
     *   }
     * })
     * 
     */
    create<T extends VenueRatingUserCreateArgs>(args: SelectSubset<T, VenueRatingUserCreateArgs<ExtArgs>>): Prisma__VenueRatingUserClient<$Result.GetResult<Prisma.$VenueRatingUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VenueRatingUsers.
     * @param {VenueRatingUserCreateManyArgs} args - Arguments to create many VenueRatingUsers.
     * @example
     * // Create many VenueRatingUsers
     * const venueRatingUser = await prisma.venueRatingUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VenueRatingUserCreateManyArgs>(args?: SelectSubset<T, VenueRatingUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VenueRatingUsers and returns the data saved in the database.
     * @param {VenueRatingUserCreateManyAndReturnArgs} args - Arguments to create many VenueRatingUsers.
     * @example
     * // Create many VenueRatingUsers
     * const venueRatingUser = await prisma.venueRatingUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VenueRatingUsers and only return the `id`
     * const venueRatingUserWithIdOnly = await prisma.venueRatingUser.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VenueRatingUserCreateManyAndReturnArgs>(args?: SelectSubset<T, VenueRatingUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VenueRatingUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VenueRatingUser.
     * @param {VenueRatingUserDeleteArgs} args - Arguments to delete one VenueRatingUser.
     * @example
     * // Delete one VenueRatingUser
     * const VenueRatingUser = await prisma.venueRatingUser.delete({
     *   where: {
     *     // ... filter to delete one VenueRatingUser
     *   }
     * })
     * 
     */
    delete<T extends VenueRatingUserDeleteArgs>(args: SelectSubset<T, VenueRatingUserDeleteArgs<ExtArgs>>): Prisma__VenueRatingUserClient<$Result.GetResult<Prisma.$VenueRatingUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VenueRatingUser.
     * @param {VenueRatingUserUpdateArgs} args - Arguments to update one VenueRatingUser.
     * @example
     * // Update one VenueRatingUser
     * const venueRatingUser = await prisma.venueRatingUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VenueRatingUserUpdateArgs>(args: SelectSubset<T, VenueRatingUserUpdateArgs<ExtArgs>>): Prisma__VenueRatingUserClient<$Result.GetResult<Prisma.$VenueRatingUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VenueRatingUsers.
     * @param {VenueRatingUserDeleteManyArgs} args - Arguments to filter VenueRatingUsers to delete.
     * @example
     * // Delete a few VenueRatingUsers
     * const { count } = await prisma.venueRatingUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VenueRatingUserDeleteManyArgs>(args?: SelectSubset<T, VenueRatingUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VenueRatingUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueRatingUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VenueRatingUsers
     * const venueRatingUser = await prisma.venueRatingUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VenueRatingUserUpdateManyArgs>(args: SelectSubset<T, VenueRatingUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VenueRatingUsers and returns the data updated in the database.
     * @param {VenueRatingUserUpdateManyAndReturnArgs} args - Arguments to update many VenueRatingUsers.
     * @example
     * // Update many VenueRatingUsers
     * const venueRatingUser = await prisma.venueRatingUser.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VenueRatingUsers and only return the `id`
     * const venueRatingUserWithIdOnly = await prisma.venueRatingUser.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VenueRatingUserUpdateManyAndReturnArgs>(args: SelectSubset<T, VenueRatingUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VenueRatingUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VenueRatingUser.
     * @param {VenueRatingUserUpsertArgs} args - Arguments to update or create a VenueRatingUser.
     * @example
     * // Update or create a VenueRatingUser
     * const venueRatingUser = await prisma.venueRatingUser.upsert({
     *   create: {
     *     // ... data to create a VenueRatingUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VenueRatingUser we want to update
     *   }
     * })
     */
    upsert<T extends VenueRatingUserUpsertArgs>(args: SelectSubset<T, VenueRatingUserUpsertArgs<ExtArgs>>): Prisma__VenueRatingUserClient<$Result.GetResult<Prisma.$VenueRatingUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VenueRatingUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueRatingUserCountArgs} args - Arguments to filter VenueRatingUsers to count.
     * @example
     * // Count the number of VenueRatingUsers
     * const count = await prisma.venueRatingUser.count({
     *   where: {
     *     // ... the filter for the VenueRatingUsers we want to count
     *   }
     * })
    **/
    count<T extends VenueRatingUserCountArgs>(
      args?: Subset<T, VenueRatingUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VenueRatingUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VenueRatingUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueRatingUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VenueRatingUserAggregateArgs>(args: Subset<T, VenueRatingUserAggregateArgs>): Prisma.PrismaPromise<GetVenueRatingUserAggregateType<T>>

    /**
     * Group by VenueRatingUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueRatingUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VenueRatingUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VenueRatingUserGroupByArgs['orderBy'] }
        : { orderBy?: VenueRatingUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VenueRatingUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVenueRatingUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VenueRatingUser model
   */
  readonly fields: VenueRatingUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VenueRatingUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VenueRatingUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    venue<T extends VenueDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VenueDefaultArgs<ExtArgs>>): Prisma__VenueClient<$Result.GetResult<Prisma.$VenuePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VenueRatingUser model
   */
  interface VenueRatingUserFieldRefs {
    readonly id: FieldRef<"VenueRatingUser", 'Int'>
    readonly venueId: FieldRef<"VenueRatingUser", 'Int'>
    readonly userId: FieldRef<"VenueRatingUser", 'Int'>
    readonly score: FieldRef<"VenueRatingUser", 'Float'>
    readonly review: FieldRef<"VenueRatingUser", 'String'>
  }
    

  // Custom InputTypes
  /**
   * VenueRatingUser findUnique
   */
  export type VenueRatingUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueRatingUser
     */
    select?: VenueRatingUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueRatingUser
     */
    omit?: VenueRatingUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueRatingUserInclude<ExtArgs> | null
    /**
     * Filter, which VenueRatingUser to fetch.
     */
    where: VenueRatingUserWhereUniqueInput
  }

  /**
   * VenueRatingUser findUniqueOrThrow
   */
  export type VenueRatingUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueRatingUser
     */
    select?: VenueRatingUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueRatingUser
     */
    omit?: VenueRatingUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueRatingUserInclude<ExtArgs> | null
    /**
     * Filter, which VenueRatingUser to fetch.
     */
    where: VenueRatingUserWhereUniqueInput
  }

  /**
   * VenueRatingUser findFirst
   */
  export type VenueRatingUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueRatingUser
     */
    select?: VenueRatingUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueRatingUser
     */
    omit?: VenueRatingUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueRatingUserInclude<ExtArgs> | null
    /**
     * Filter, which VenueRatingUser to fetch.
     */
    where?: VenueRatingUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VenueRatingUsers to fetch.
     */
    orderBy?: VenueRatingUserOrderByWithRelationInput | VenueRatingUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VenueRatingUsers.
     */
    cursor?: VenueRatingUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VenueRatingUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VenueRatingUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VenueRatingUsers.
     */
    distinct?: VenueRatingUserScalarFieldEnum | VenueRatingUserScalarFieldEnum[]
  }

  /**
   * VenueRatingUser findFirstOrThrow
   */
  export type VenueRatingUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueRatingUser
     */
    select?: VenueRatingUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueRatingUser
     */
    omit?: VenueRatingUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueRatingUserInclude<ExtArgs> | null
    /**
     * Filter, which VenueRatingUser to fetch.
     */
    where?: VenueRatingUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VenueRatingUsers to fetch.
     */
    orderBy?: VenueRatingUserOrderByWithRelationInput | VenueRatingUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VenueRatingUsers.
     */
    cursor?: VenueRatingUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VenueRatingUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VenueRatingUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VenueRatingUsers.
     */
    distinct?: VenueRatingUserScalarFieldEnum | VenueRatingUserScalarFieldEnum[]
  }

  /**
   * VenueRatingUser findMany
   */
  export type VenueRatingUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueRatingUser
     */
    select?: VenueRatingUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueRatingUser
     */
    omit?: VenueRatingUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueRatingUserInclude<ExtArgs> | null
    /**
     * Filter, which VenueRatingUsers to fetch.
     */
    where?: VenueRatingUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VenueRatingUsers to fetch.
     */
    orderBy?: VenueRatingUserOrderByWithRelationInput | VenueRatingUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VenueRatingUsers.
     */
    cursor?: VenueRatingUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VenueRatingUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VenueRatingUsers.
     */
    skip?: number
    distinct?: VenueRatingUserScalarFieldEnum | VenueRatingUserScalarFieldEnum[]
  }

  /**
   * VenueRatingUser create
   */
  export type VenueRatingUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueRatingUser
     */
    select?: VenueRatingUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueRatingUser
     */
    omit?: VenueRatingUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueRatingUserInclude<ExtArgs> | null
    /**
     * The data needed to create a VenueRatingUser.
     */
    data: XOR<VenueRatingUserCreateInput, VenueRatingUserUncheckedCreateInput>
  }

  /**
   * VenueRatingUser createMany
   */
  export type VenueRatingUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VenueRatingUsers.
     */
    data: VenueRatingUserCreateManyInput | VenueRatingUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VenueRatingUser createManyAndReturn
   */
  export type VenueRatingUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueRatingUser
     */
    select?: VenueRatingUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VenueRatingUser
     */
    omit?: VenueRatingUserOmit<ExtArgs> | null
    /**
     * The data used to create many VenueRatingUsers.
     */
    data: VenueRatingUserCreateManyInput | VenueRatingUserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueRatingUserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VenueRatingUser update
   */
  export type VenueRatingUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueRatingUser
     */
    select?: VenueRatingUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueRatingUser
     */
    omit?: VenueRatingUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueRatingUserInclude<ExtArgs> | null
    /**
     * The data needed to update a VenueRatingUser.
     */
    data: XOR<VenueRatingUserUpdateInput, VenueRatingUserUncheckedUpdateInput>
    /**
     * Choose, which VenueRatingUser to update.
     */
    where: VenueRatingUserWhereUniqueInput
  }

  /**
   * VenueRatingUser updateMany
   */
  export type VenueRatingUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VenueRatingUsers.
     */
    data: XOR<VenueRatingUserUpdateManyMutationInput, VenueRatingUserUncheckedUpdateManyInput>
    /**
     * Filter which VenueRatingUsers to update
     */
    where?: VenueRatingUserWhereInput
    /**
     * Limit how many VenueRatingUsers to update.
     */
    limit?: number
  }

  /**
   * VenueRatingUser updateManyAndReturn
   */
  export type VenueRatingUserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueRatingUser
     */
    select?: VenueRatingUserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VenueRatingUser
     */
    omit?: VenueRatingUserOmit<ExtArgs> | null
    /**
     * The data used to update VenueRatingUsers.
     */
    data: XOR<VenueRatingUserUpdateManyMutationInput, VenueRatingUserUncheckedUpdateManyInput>
    /**
     * Filter which VenueRatingUsers to update
     */
    where?: VenueRatingUserWhereInput
    /**
     * Limit how many VenueRatingUsers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueRatingUserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * VenueRatingUser upsert
   */
  export type VenueRatingUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueRatingUser
     */
    select?: VenueRatingUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueRatingUser
     */
    omit?: VenueRatingUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueRatingUserInclude<ExtArgs> | null
    /**
     * The filter to search for the VenueRatingUser to update in case it exists.
     */
    where: VenueRatingUserWhereUniqueInput
    /**
     * In case the VenueRatingUser found by the `where` argument doesn't exist, create a new VenueRatingUser with this data.
     */
    create: XOR<VenueRatingUserCreateInput, VenueRatingUserUncheckedCreateInput>
    /**
     * In case the VenueRatingUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VenueRatingUserUpdateInput, VenueRatingUserUncheckedUpdateInput>
  }

  /**
   * VenueRatingUser delete
   */
  export type VenueRatingUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueRatingUser
     */
    select?: VenueRatingUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueRatingUser
     */
    omit?: VenueRatingUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueRatingUserInclude<ExtArgs> | null
    /**
     * Filter which VenueRatingUser to delete.
     */
    where: VenueRatingUserWhereUniqueInput
  }

  /**
   * VenueRatingUser deleteMany
   */
  export type VenueRatingUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VenueRatingUsers to delete
     */
    where?: VenueRatingUserWhereInput
    /**
     * Limit how many VenueRatingUsers to delete.
     */
    limit?: number
  }

  /**
   * VenueRatingUser without action
   */
  export type VenueRatingUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueRatingUser
     */
    select?: VenueRatingUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueRatingUser
     */
    omit?: VenueRatingUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueRatingUserInclude<ExtArgs> | null
  }


  /**
   * Model VenueReservationUser
   */

  export type AggregateVenueReservationUser = {
    _count: VenueReservationUserCountAggregateOutputType | null
    _avg: VenueReservationUserAvgAggregateOutputType | null
    _sum: VenueReservationUserSumAggregateOutputType | null
    _min: VenueReservationUserMinAggregateOutputType | null
    _max: VenueReservationUserMaxAggregateOutputType | null
  }

  export type VenueReservationUserAvgAggregateOutputType = {
    id: number | null
    venueId: number | null
    userId: number | null
  }

  export type VenueReservationUserSumAggregateOutputType = {
    id: number | null
    venueId: number | null
    userId: number | null
  }

  export type VenueReservationUserMinAggregateOutputType = {
    id: number | null
    venueId: number | null
    userId: number | null
    dateStart: Date | null
    dateEnd: Date | null
    status: $Enums.StatusEnum | null
  }

  export type VenueReservationUserMaxAggregateOutputType = {
    id: number | null
    venueId: number | null
    userId: number | null
    dateStart: Date | null
    dateEnd: Date | null
    status: $Enums.StatusEnum | null
  }

  export type VenueReservationUserCountAggregateOutputType = {
    id: number
    venueId: number
    userId: number
    dateStart: number
    dateEnd: number
    status: number
    _all: number
  }


  export type VenueReservationUserAvgAggregateInputType = {
    id?: true
    venueId?: true
    userId?: true
  }

  export type VenueReservationUserSumAggregateInputType = {
    id?: true
    venueId?: true
    userId?: true
  }

  export type VenueReservationUserMinAggregateInputType = {
    id?: true
    venueId?: true
    userId?: true
    dateStart?: true
    dateEnd?: true
    status?: true
  }

  export type VenueReservationUserMaxAggregateInputType = {
    id?: true
    venueId?: true
    userId?: true
    dateStart?: true
    dateEnd?: true
    status?: true
  }

  export type VenueReservationUserCountAggregateInputType = {
    id?: true
    venueId?: true
    userId?: true
    dateStart?: true
    dateEnd?: true
    status?: true
    _all?: true
  }

  export type VenueReservationUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VenueReservationUser to aggregate.
     */
    where?: VenueReservationUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VenueReservationUsers to fetch.
     */
    orderBy?: VenueReservationUserOrderByWithRelationInput | VenueReservationUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VenueReservationUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VenueReservationUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VenueReservationUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VenueReservationUsers
    **/
    _count?: true | VenueReservationUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VenueReservationUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VenueReservationUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VenueReservationUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VenueReservationUserMaxAggregateInputType
  }

  export type GetVenueReservationUserAggregateType<T extends VenueReservationUserAggregateArgs> = {
        [P in keyof T & keyof AggregateVenueReservationUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVenueReservationUser[P]>
      : GetScalarType<T[P], AggregateVenueReservationUser[P]>
  }




  export type VenueReservationUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VenueReservationUserWhereInput
    orderBy?: VenueReservationUserOrderByWithAggregationInput | VenueReservationUserOrderByWithAggregationInput[]
    by: VenueReservationUserScalarFieldEnum[] | VenueReservationUserScalarFieldEnum
    having?: VenueReservationUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VenueReservationUserCountAggregateInputType | true
    _avg?: VenueReservationUserAvgAggregateInputType
    _sum?: VenueReservationUserSumAggregateInputType
    _min?: VenueReservationUserMinAggregateInputType
    _max?: VenueReservationUserMaxAggregateInputType
  }

  export type VenueReservationUserGroupByOutputType = {
    id: number
    venueId: number
    userId: number
    dateStart: Date
    dateEnd: Date
    status: $Enums.StatusEnum
    _count: VenueReservationUserCountAggregateOutputType | null
    _avg: VenueReservationUserAvgAggregateOutputType | null
    _sum: VenueReservationUserSumAggregateOutputType | null
    _min: VenueReservationUserMinAggregateOutputType | null
    _max: VenueReservationUserMaxAggregateOutputType | null
  }

  type GetVenueReservationUserGroupByPayload<T extends VenueReservationUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VenueReservationUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VenueReservationUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VenueReservationUserGroupByOutputType[P]>
            : GetScalarType<T[P], VenueReservationUserGroupByOutputType[P]>
        }
      >
    >


  export type VenueReservationUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    venueId?: boolean
    userId?: boolean
    dateStart?: boolean
    dateEnd?: boolean
    status?: boolean
    venue?: boolean | VenueDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["venueReservationUser"]>

  export type VenueReservationUserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    venueId?: boolean
    userId?: boolean
    dateStart?: boolean
    dateEnd?: boolean
    status?: boolean
    venue?: boolean | VenueDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["venueReservationUser"]>

  export type VenueReservationUserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    venueId?: boolean
    userId?: boolean
    dateStart?: boolean
    dateEnd?: boolean
    status?: boolean
    venue?: boolean | VenueDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["venueReservationUser"]>

  export type VenueReservationUserSelectScalar = {
    id?: boolean
    venueId?: boolean
    userId?: boolean
    dateStart?: boolean
    dateEnd?: boolean
    status?: boolean
  }

  export type VenueReservationUserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "venueId" | "userId" | "dateStart" | "dateEnd" | "status", ExtArgs["result"]["venueReservationUser"]>
  export type VenueReservationUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    venue?: boolean | VenueDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type VenueReservationUserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    venue?: boolean | VenueDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type VenueReservationUserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    venue?: boolean | VenueDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $VenueReservationUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VenueReservationUser"
    objects: {
      venue: Prisma.$VenuePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      venueId: number
      userId: number
      dateStart: Date
      dateEnd: Date
      status: $Enums.StatusEnum
    }, ExtArgs["result"]["venueReservationUser"]>
    composites: {}
  }

  type VenueReservationUserGetPayload<S extends boolean | null | undefined | VenueReservationUserDefaultArgs> = $Result.GetResult<Prisma.$VenueReservationUserPayload, S>

  type VenueReservationUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VenueReservationUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VenueReservationUserCountAggregateInputType | true
    }

  export interface VenueReservationUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VenueReservationUser'], meta: { name: 'VenueReservationUser' } }
    /**
     * Find zero or one VenueReservationUser that matches the filter.
     * @param {VenueReservationUserFindUniqueArgs} args - Arguments to find a VenueReservationUser
     * @example
     * // Get one VenueReservationUser
     * const venueReservationUser = await prisma.venueReservationUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VenueReservationUserFindUniqueArgs>(args: SelectSubset<T, VenueReservationUserFindUniqueArgs<ExtArgs>>): Prisma__VenueReservationUserClient<$Result.GetResult<Prisma.$VenueReservationUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VenueReservationUser that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VenueReservationUserFindUniqueOrThrowArgs} args - Arguments to find a VenueReservationUser
     * @example
     * // Get one VenueReservationUser
     * const venueReservationUser = await prisma.venueReservationUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VenueReservationUserFindUniqueOrThrowArgs>(args: SelectSubset<T, VenueReservationUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VenueReservationUserClient<$Result.GetResult<Prisma.$VenueReservationUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VenueReservationUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueReservationUserFindFirstArgs} args - Arguments to find a VenueReservationUser
     * @example
     * // Get one VenueReservationUser
     * const venueReservationUser = await prisma.venueReservationUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VenueReservationUserFindFirstArgs>(args?: SelectSubset<T, VenueReservationUserFindFirstArgs<ExtArgs>>): Prisma__VenueReservationUserClient<$Result.GetResult<Prisma.$VenueReservationUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VenueReservationUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueReservationUserFindFirstOrThrowArgs} args - Arguments to find a VenueReservationUser
     * @example
     * // Get one VenueReservationUser
     * const venueReservationUser = await prisma.venueReservationUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VenueReservationUserFindFirstOrThrowArgs>(args?: SelectSubset<T, VenueReservationUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__VenueReservationUserClient<$Result.GetResult<Prisma.$VenueReservationUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VenueReservationUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueReservationUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VenueReservationUsers
     * const venueReservationUsers = await prisma.venueReservationUser.findMany()
     * 
     * // Get first 10 VenueReservationUsers
     * const venueReservationUsers = await prisma.venueReservationUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const venueReservationUserWithIdOnly = await prisma.venueReservationUser.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VenueReservationUserFindManyArgs>(args?: SelectSubset<T, VenueReservationUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VenueReservationUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VenueReservationUser.
     * @param {VenueReservationUserCreateArgs} args - Arguments to create a VenueReservationUser.
     * @example
     * // Create one VenueReservationUser
     * const VenueReservationUser = await prisma.venueReservationUser.create({
     *   data: {
     *     // ... data to create a VenueReservationUser
     *   }
     * })
     * 
     */
    create<T extends VenueReservationUserCreateArgs>(args: SelectSubset<T, VenueReservationUserCreateArgs<ExtArgs>>): Prisma__VenueReservationUserClient<$Result.GetResult<Prisma.$VenueReservationUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VenueReservationUsers.
     * @param {VenueReservationUserCreateManyArgs} args - Arguments to create many VenueReservationUsers.
     * @example
     * // Create many VenueReservationUsers
     * const venueReservationUser = await prisma.venueReservationUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VenueReservationUserCreateManyArgs>(args?: SelectSubset<T, VenueReservationUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VenueReservationUsers and returns the data saved in the database.
     * @param {VenueReservationUserCreateManyAndReturnArgs} args - Arguments to create many VenueReservationUsers.
     * @example
     * // Create many VenueReservationUsers
     * const venueReservationUser = await prisma.venueReservationUser.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VenueReservationUsers and only return the `id`
     * const venueReservationUserWithIdOnly = await prisma.venueReservationUser.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VenueReservationUserCreateManyAndReturnArgs>(args?: SelectSubset<T, VenueReservationUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VenueReservationUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VenueReservationUser.
     * @param {VenueReservationUserDeleteArgs} args - Arguments to delete one VenueReservationUser.
     * @example
     * // Delete one VenueReservationUser
     * const VenueReservationUser = await prisma.venueReservationUser.delete({
     *   where: {
     *     // ... filter to delete one VenueReservationUser
     *   }
     * })
     * 
     */
    delete<T extends VenueReservationUserDeleteArgs>(args: SelectSubset<T, VenueReservationUserDeleteArgs<ExtArgs>>): Prisma__VenueReservationUserClient<$Result.GetResult<Prisma.$VenueReservationUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VenueReservationUser.
     * @param {VenueReservationUserUpdateArgs} args - Arguments to update one VenueReservationUser.
     * @example
     * // Update one VenueReservationUser
     * const venueReservationUser = await prisma.venueReservationUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VenueReservationUserUpdateArgs>(args: SelectSubset<T, VenueReservationUserUpdateArgs<ExtArgs>>): Prisma__VenueReservationUserClient<$Result.GetResult<Prisma.$VenueReservationUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VenueReservationUsers.
     * @param {VenueReservationUserDeleteManyArgs} args - Arguments to filter VenueReservationUsers to delete.
     * @example
     * // Delete a few VenueReservationUsers
     * const { count } = await prisma.venueReservationUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VenueReservationUserDeleteManyArgs>(args?: SelectSubset<T, VenueReservationUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VenueReservationUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueReservationUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VenueReservationUsers
     * const venueReservationUser = await prisma.venueReservationUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VenueReservationUserUpdateManyArgs>(args: SelectSubset<T, VenueReservationUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VenueReservationUsers and returns the data updated in the database.
     * @param {VenueReservationUserUpdateManyAndReturnArgs} args - Arguments to update many VenueReservationUsers.
     * @example
     * // Update many VenueReservationUsers
     * const venueReservationUser = await prisma.venueReservationUser.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VenueReservationUsers and only return the `id`
     * const venueReservationUserWithIdOnly = await prisma.venueReservationUser.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VenueReservationUserUpdateManyAndReturnArgs>(args: SelectSubset<T, VenueReservationUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VenueReservationUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VenueReservationUser.
     * @param {VenueReservationUserUpsertArgs} args - Arguments to update or create a VenueReservationUser.
     * @example
     * // Update or create a VenueReservationUser
     * const venueReservationUser = await prisma.venueReservationUser.upsert({
     *   create: {
     *     // ... data to create a VenueReservationUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VenueReservationUser we want to update
     *   }
     * })
     */
    upsert<T extends VenueReservationUserUpsertArgs>(args: SelectSubset<T, VenueReservationUserUpsertArgs<ExtArgs>>): Prisma__VenueReservationUserClient<$Result.GetResult<Prisma.$VenueReservationUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VenueReservationUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueReservationUserCountArgs} args - Arguments to filter VenueReservationUsers to count.
     * @example
     * // Count the number of VenueReservationUsers
     * const count = await prisma.venueReservationUser.count({
     *   where: {
     *     // ... the filter for the VenueReservationUsers we want to count
     *   }
     * })
    **/
    count<T extends VenueReservationUserCountArgs>(
      args?: Subset<T, VenueReservationUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VenueReservationUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VenueReservationUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueReservationUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VenueReservationUserAggregateArgs>(args: Subset<T, VenueReservationUserAggregateArgs>): Prisma.PrismaPromise<GetVenueReservationUserAggregateType<T>>

    /**
     * Group by VenueReservationUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueReservationUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VenueReservationUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VenueReservationUserGroupByArgs['orderBy'] }
        : { orderBy?: VenueReservationUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VenueReservationUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVenueReservationUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VenueReservationUser model
   */
  readonly fields: VenueReservationUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VenueReservationUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VenueReservationUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    venue<T extends VenueDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VenueDefaultArgs<ExtArgs>>): Prisma__VenueClient<$Result.GetResult<Prisma.$VenuePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VenueReservationUser model
   */
  interface VenueReservationUserFieldRefs {
    readonly id: FieldRef<"VenueReservationUser", 'Int'>
    readonly venueId: FieldRef<"VenueReservationUser", 'Int'>
    readonly userId: FieldRef<"VenueReservationUser", 'Int'>
    readonly dateStart: FieldRef<"VenueReservationUser", 'DateTime'>
    readonly dateEnd: FieldRef<"VenueReservationUser", 'DateTime'>
    readonly status: FieldRef<"VenueReservationUser", 'StatusEnum'>
  }
    

  // Custom InputTypes
  /**
   * VenueReservationUser findUnique
   */
  export type VenueReservationUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueReservationUser
     */
    select?: VenueReservationUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueReservationUser
     */
    omit?: VenueReservationUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueReservationUserInclude<ExtArgs> | null
    /**
     * Filter, which VenueReservationUser to fetch.
     */
    where: VenueReservationUserWhereUniqueInput
  }

  /**
   * VenueReservationUser findUniqueOrThrow
   */
  export type VenueReservationUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueReservationUser
     */
    select?: VenueReservationUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueReservationUser
     */
    omit?: VenueReservationUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueReservationUserInclude<ExtArgs> | null
    /**
     * Filter, which VenueReservationUser to fetch.
     */
    where: VenueReservationUserWhereUniqueInput
  }

  /**
   * VenueReservationUser findFirst
   */
  export type VenueReservationUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueReservationUser
     */
    select?: VenueReservationUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueReservationUser
     */
    omit?: VenueReservationUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueReservationUserInclude<ExtArgs> | null
    /**
     * Filter, which VenueReservationUser to fetch.
     */
    where?: VenueReservationUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VenueReservationUsers to fetch.
     */
    orderBy?: VenueReservationUserOrderByWithRelationInput | VenueReservationUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VenueReservationUsers.
     */
    cursor?: VenueReservationUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VenueReservationUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VenueReservationUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VenueReservationUsers.
     */
    distinct?: VenueReservationUserScalarFieldEnum | VenueReservationUserScalarFieldEnum[]
  }

  /**
   * VenueReservationUser findFirstOrThrow
   */
  export type VenueReservationUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueReservationUser
     */
    select?: VenueReservationUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueReservationUser
     */
    omit?: VenueReservationUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueReservationUserInclude<ExtArgs> | null
    /**
     * Filter, which VenueReservationUser to fetch.
     */
    where?: VenueReservationUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VenueReservationUsers to fetch.
     */
    orderBy?: VenueReservationUserOrderByWithRelationInput | VenueReservationUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VenueReservationUsers.
     */
    cursor?: VenueReservationUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VenueReservationUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VenueReservationUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VenueReservationUsers.
     */
    distinct?: VenueReservationUserScalarFieldEnum | VenueReservationUserScalarFieldEnum[]
  }

  /**
   * VenueReservationUser findMany
   */
  export type VenueReservationUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueReservationUser
     */
    select?: VenueReservationUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueReservationUser
     */
    omit?: VenueReservationUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueReservationUserInclude<ExtArgs> | null
    /**
     * Filter, which VenueReservationUsers to fetch.
     */
    where?: VenueReservationUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VenueReservationUsers to fetch.
     */
    orderBy?: VenueReservationUserOrderByWithRelationInput | VenueReservationUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VenueReservationUsers.
     */
    cursor?: VenueReservationUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VenueReservationUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VenueReservationUsers.
     */
    skip?: number
    distinct?: VenueReservationUserScalarFieldEnum | VenueReservationUserScalarFieldEnum[]
  }

  /**
   * VenueReservationUser create
   */
  export type VenueReservationUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueReservationUser
     */
    select?: VenueReservationUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueReservationUser
     */
    omit?: VenueReservationUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueReservationUserInclude<ExtArgs> | null
    /**
     * The data needed to create a VenueReservationUser.
     */
    data: XOR<VenueReservationUserCreateInput, VenueReservationUserUncheckedCreateInput>
  }

  /**
   * VenueReservationUser createMany
   */
  export type VenueReservationUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VenueReservationUsers.
     */
    data: VenueReservationUserCreateManyInput | VenueReservationUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VenueReservationUser createManyAndReturn
   */
  export type VenueReservationUserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueReservationUser
     */
    select?: VenueReservationUserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VenueReservationUser
     */
    omit?: VenueReservationUserOmit<ExtArgs> | null
    /**
     * The data used to create many VenueReservationUsers.
     */
    data: VenueReservationUserCreateManyInput | VenueReservationUserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueReservationUserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VenueReservationUser update
   */
  export type VenueReservationUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueReservationUser
     */
    select?: VenueReservationUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueReservationUser
     */
    omit?: VenueReservationUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueReservationUserInclude<ExtArgs> | null
    /**
     * The data needed to update a VenueReservationUser.
     */
    data: XOR<VenueReservationUserUpdateInput, VenueReservationUserUncheckedUpdateInput>
    /**
     * Choose, which VenueReservationUser to update.
     */
    where: VenueReservationUserWhereUniqueInput
  }

  /**
   * VenueReservationUser updateMany
   */
  export type VenueReservationUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VenueReservationUsers.
     */
    data: XOR<VenueReservationUserUpdateManyMutationInput, VenueReservationUserUncheckedUpdateManyInput>
    /**
     * Filter which VenueReservationUsers to update
     */
    where?: VenueReservationUserWhereInput
    /**
     * Limit how many VenueReservationUsers to update.
     */
    limit?: number
  }

  /**
   * VenueReservationUser updateManyAndReturn
   */
  export type VenueReservationUserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueReservationUser
     */
    select?: VenueReservationUserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VenueReservationUser
     */
    omit?: VenueReservationUserOmit<ExtArgs> | null
    /**
     * The data used to update VenueReservationUsers.
     */
    data: XOR<VenueReservationUserUpdateManyMutationInput, VenueReservationUserUncheckedUpdateManyInput>
    /**
     * Filter which VenueReservationUsers to update
     */
    where?: VenueReservationUserWhereInput
    /**
     * Limit how many VenueReservationUsers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueReservationUserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * VenueReservationUser upsert
   */
  export type VenueReservationUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueReservationUser
     */
    select?: VenueReservationUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueReservationUser
     */
    omit?: VenueReservationUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueReservationUserInclude<ExtArgs> | null
    /**
     * The filter to search for the VenueReservationUser to update in case it exists.
     */
    where: VenueReservationUserWhereUniqueInput
    /**
     * In case the VenueReservationUser found by the `where` argument doesn't exist, create a new VenueReservationUser with this data.
     */
    create: XOR<VenueReservationUserCreateInput, VenueReservationUserUncheckedCreateInput>
    /**
     * In case the VenueReservationUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VenueReservationUserUpdateInput, VenueReservationUserUncheckedUpdateInput>
  }

  /**
   * VenueReservationUser delete
   */
  export type VenueReservationUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueReservationUser
     */
    select?: VenueReservationUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueReservationUser
     */
    omit?: VenueReservationUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueReservationUserInclude<ExtArgs> | null
    /**
     * Filter which VenueReservationUser to delete.
     */
    where: VenueReservationUserWhereUniqueInput
  }

  /**
   * VenueReservationUser deleteMany
   */
  export type VenueReservationUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VenueReservationUsers to delete
     */
    where?: VenueReservationUserWhereInput
    /**
     * Limit how many VenueReservationUsers to delete.
     */
    limit?: number
  }

  /**
   * VenueReservationUser without action
   */
  export type VenueReservationUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueReservationUser
     */
    select?: VenueReservationUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueReservationUser
     */
    omit?: VenueReservationUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueReservationUserInclude<ExtArgs> | null
  }


  /**
   * Model Venue
   */

  export type AggregateVenue = {
    _count: VenueCountAggregateOutputType | null
    _avg: VenueAvgAggregateOutputType | null
    _sum: VenueSumAggregateOutputType | null
    _min: VenueMinAggregateOutputType | null
    _max: VenueMaxAggregateOutputType | null
  }

  export type VenueAvgAggregateOutputType = {
    id: number | null
    pricePerNightInEURCent: number | null
    rating: number | null
    capacity: number | null
    amountsOfBeds: number | null
    checkInHour: number | null
    checkOutHour: number | null
    distanceFromCityCenterInM: number | null
    ownerId: number | null
  }

  export type VenueSumAggregateOutputType = {
    id: number | null
    pricePerNightInEURCent: number | null
    rating: number | null
    capacity: number | null
    amountsOfBeds: number | null
    checkInHour: number | null
    checkOutHour: number | null
    distanceFromCityCenterInM: number | null
    ownerId: number | null
  }

  export type VenueMinAggregateOutputType = {
    id: number | null
    pricePerNightInEURCent: number | null
    rating: number | null
    capacity: number | null
    amountsOfBeds: number | null
    extraSleepingDetails: string | null
    name: string | null
    description: string | null
    checkInHour: number | null
    checkOutHour: number | null
    distanceFromCityCenterInM: number | null
    facebookUrl: string | null
    instagramUrl: string | null
    twitterUrl: string | null
    websiteUrl: string | null
    streetNumber: string | null
    streetName: string | null
    postalCode: string | null
    city: string | null
    ownerId: number | null
  }

  export type VenueMaxAggregateOutputType = {
    id: number | null
    pricePerNightInEURCent: number | null
    rating: number | null
    capacity: number | null
    amountsOfBeds: number | null
    extraSleepingDetails: string | null
    name: string | null
    description: string | null
    checkInHour: number | null
    checkOutHour: number | null
    distanceFromCityCenterInM: number | null
    facebookUrl: string | null
    instagramUrl: string | null
    twitterUrl: string | null
    websiteUrl: string | null
    streetNumber: string | null
    streetName: string | null
    postalCode: string | null
    city: string | null
    ownerId: number | null
  }

  export type VenueCountAggregateOutputType = {
    id: number
    pricePerNightInEURCent: number
    rating: number
    capacity: number
    amountsOfBeds: number
    extraSleepingDetails: number
    name: number
    images: number
    description: number
    checkInHour: number
    checkOutHour: number
    distanceFromCityCenterInM: number
    facebookUrl: number
    instagramUrl: number
    twitterUrl: number
    websiteUrl: number
    streetNumber: number
    streetName: number
    postalCode: number
    city: number
    ownerId: number
    _all: number
  }


  export type VenueAvgAggregateInputType = {
    id?: true
    pricePerNightInEURCent?: true
    rating?: true
    capacity?: true
    amountsOfBeds?: true
    checkInHour?: true
    checkOutHour?: true
    distanceFromCityCenterInM?: true
    ownerId?: true
  }

  export type VenueSumAggregateInputType = {
    id?: true
    pricePerNightInEURCent?: true
    rating?: true
    capacity?: true
    amountsOfBeds?: true
    checkInHour?: true
    checkOutHour?: true
    distanceFromCityCenterInM?: true
    ownerId?: true
  }

  export type VenueMinAggregateInputType = {
    id?: true
    pricePerNightInEURCent?: true
    rating?: true
    capacity?: true
    amountsOfBeds?: true
    extraSleepingDetails?: true
    name?: true
    description?: true
    checkInHour?: true
    checkOutHour?: true
    distanceFromCityCenterInM?: true
    facebookUrl?: true
    instagramUrl?: true
    twitterUrl?: true
    websiteUrl?: true
    streetNumber?: true
    streetName?: true
    postalCode?: true
    city?: true
    ownerId?: true
  }

  export type VenueMaxAggregateInputType = {
    id?: true
    pricePerNightInEURCent?: true
    rating?: true
    capacity?: true
    amountsOfBeds?: true
    extraSleepingDetails?: true
    name?: true
    description?: true
    checkInHour?: true
    checkOutHour?: true
    distanceFromCityCenterInM?: true
    facebookUrl?: true
    instagramUrl?: true
    twitterUrl?: true
    websiteUrl?: true
    streetNumber?: true
    streetName?: true
    postalCode?: true
    city?: true
    ownerId?: true
  }

  export type VenueCountAggregateInputType = {
    id?: true
    pricePerNightInEURCent?: true
    rating?: true
    capacity?: true
    amountsOfBeds?: true
    extraSleepingDetails?: true
    name?: true
    images?: true
    description?: true
    checkInHour?: true
    checkOutHour?: true
    distanceFromCityCenterInM?: true
    facebookUrl?: true
    instagramUrl?: true
    twitterUrl?: true
    websiteUrl?: true
    streetNumber?: true
    streetName?: true
    postalCode?: true
    city?: true
    ownerId?: true
    _all?: true
  }

  export type VenueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Venue to aggregate.
     */
    where?: VenueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Venues to fetch.
     */
    orderBy?: VenueOrderByWithRelationInput | VenueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VenueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Venues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Venues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Venues
    **/
    _count?: true | VenueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VenueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VenueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VenueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VenueMaxAggregateInputType
  }

  export type GetVenueAggregateType<T extends VenueAggregateArgs> = {
        [P in keyof T & keyof AggregateVenue]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVenue[P]>
      : GetScalarType<T[P], AggregateVenue[P]>
  }




  export type VenueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VenueWhereInput
    orderBy?: VenueOrderByWithAggregationInput | VenueOrderByWithAggregationInput[]
    by: VenueScalarFieldEnum[] | VenueScalarFieldEnum
    having?: VenueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VenueCountAggregateInputType | true
    _avg?: VenueAvgAggregateInputType
    _sum?: VenueSumAggregateInputType
    _min?: VenueMinAggregateInputType
    _max?: VenueMaxAggregateInputType
  }

  export type VenueGroupByOutputType = {
    id: number
    pricePerNightInEURCent: number
    rating: number
    capacity: number
    amountsOfBeds: number
    extraSleepingDetails: string
    name: string
    images: JsonValue
    description: string
    checkInHour: number
    checkOutHour: number
    distanceFromCityCenterInM: number
    facebookUrl: string
    instagramUrl: string
    twitterUrl: string
    websiteUrl: string
    streetNumber: string
    streetName: string
    postalCode: string
    city: string
    ownerId: number
    _count: VenueCountAggregateOutputType | null
    _avg: VenueAvgAggregateOutputType | null
    _sum: VenueSumAggregateOutputType | null
    _min: VenueMinAggregateOutputType | null
    _max: VenueMaxAggregateOutputType | null
  }

  type GetVenueGroupByPayload<T extends VenueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VenueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VenueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VenueGroupByOutputType[P]>
            : GetScalarType<T[P], VenueGroupByOutputType[P]>
        }
      >
    >


  export type VenueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pricePerNightInEURCent?: boolean
    rating?: boolean
    capacity?: boolean
    amountsOfBeds?: boolean
    extraSleepingDetails?: boolean
    name?: boolean
    images?: boolean
    description?: boolean
    checkInHour?: boolean
    checkOutHour?: boolean
    distanceFromCityCenterInM?: boolean
    facebookUrl?: boolean
    instagramUrl?: boolean
    twitterUrl?: boolean
    websiteUrl?: boolean
    streetNumber?: boolean
    streetName?: boolean
    postalCode?: boolean
    city?: boolean
    ownerId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    amenities?: boolean | Venue$amenitiesArgs<ExtArgs>
    VenueRatingUser?: boolean | Venue$VenueRatingUserArgs<ExtArgs>
    venueReservationUser?: boolean | Venue$venueReservationUserArgs<ExtArgs>
    venueFavouriteUser?: boolean | Venue$venueFavouriteUserArgs<ExtArgs>
    _count?: boolean | VenueCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["venue"]>

  export type VenueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pricePerNightInEURCent?: boolean
    rating?: boolean
    capacity?: boolean
    amountsOfBeds?: boolean
    extraSleepingDetails?: boolean
    name?: boolean
    images?: boolean
    description?: boolean
    checkInHour?: boolean
    checkOutHour?: boolean
    distanceFromCityCenterInM?: boolean
    facebookUrl?: boolean
    instagramUrl?: boolean
    twitterUrl?: boolean
    websiteUrl?: boolean
    streetNumber?: boolean
    streetName?: boolean
    postalCode?: boolean
    city?: boolean
    ownerId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["venue"]>

  export type VenueSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pricePerNightInEURCent?: boolean
    rating?: boolean
    capacity?: boolean
    amountsOfBeds?: boolean
    extraSleepingDetails?: boolean
    name?: boolean
    images?: boolean
    description?: boolean
    checkInHour?: boolean
    checkOutHour?: boolean
    distanceFromCityCenterInM?: boolean
    facebookUrl?: boolean
    instagramUrl?: boolean
    twitterUrl?: boolean
    websiteUrl?: boolean
    streetNumber?: boolean
    streetName?: boolean
    postalCode?: boolean
    city?: boolean
    ownerId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["venue"]>

  export type VenueSelectScalar = {
    id?: boolean
    pricePerNightInEURCent?: boolean
    rating?: boolean
    capacity?: boolean
    amountsOfBeds?: boolean
    extraSleepingDetails?: boolean
    name?: boolean
    images?: boolean
    description?: boolean
    checkInHour?: boolean
    checkOutHour?: boolean
    distanceFromCityCenterInM?: boolean
    facebookUrl?: boolean
    instagramUrl?: boolean
    twitterUrl?: boolean
    websiteUrl?: boolean
    streetNumber?: boolean
    streetName?: boolean
    postalCode?: boolean
    city?: boolean
    ownerId?: boolean
  }

  export type VenueOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "pricePerNightInEURCent" | "rating" | "capacity" | "amountsOfBeds" | "extraSleepingDetails" | "name" | "images" | "description" | "checkInHour" | "checkOutHour" | "distanceFromCityCenterInM" | "facebookUrl" | "instagramUrl" | "twitterUrl" | "websiteUrl" | "streetNumber" | "streetName" | "postalCode" | "city" | "ownerId", ExtArgs["result"]["venue"]>
  export type VenueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    amenities?: boolean | Venue$amenitiesArgs<ExtArgs>
    VenueRatingUser?: boolean | Venue$VenueRatingUserArgs<ExtArgs>
    venueReservationUser?: boolean | Venue$venueReservationUserArgs<ExtArgs>
    venueFavouriteUser?: boolean | Venue$venueFavouriteUserArgs<ExtArgs>
    _count?: boolean | VenueCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VenueIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type VenueIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $VenuePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Venue"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      amenities: Prisma.$AmenityPayload<ExtArgs>[]
      VenueRatingUser: Prisma.$VenueRatingUserPayload<ExtArgs>[]
      venueReservationUser: Prisma.$VenueReservationUserPayload<ExtArgs>[]
      venueFavouriteUser: Prisma.$VenueFavouriteUserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      pricePerNightInEURCent: number
      rating: number
      capacity: number
      amountsOfBeds: number
      extraSleepingDetails: string
      name: string
      images: Prisma.JsonValue
      description: string
      checkInHour: number
      checkOutHour: number
      distanceFromCityCenterInM: number
      facebookUrl: string
      instagramUrl: string
      twitterUrl: string
      websiteUrl: string
      streetNumber: string
      streetName: string
      postalCode: string
      city: string
      ownerId: number
    }, ExtArgs["result"]["venue"]>
    composites: {}
  }

  type VenueGetPayload<S extends boolean | null | undefined | VenueDefaultArgs> = $Result.GetResult<Prisma.$VenuePayload, S>

  type VenueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VenueFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VenueCountAggregateInputType | true
    }

  export interface VenueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Venue'], meta: { name: 'Venue' } }
    /**
     * Find zero or one Venue that matches the filter.
     * @param {VenueFindUniqueArgs} args - Arguments to find a Venue
     * @example
     * // Get one Venue
     * const venue = await prisma.venue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VenueFindUniqueArgs>(args: SelectSubset<T, VenueFindUniqueArgs<ExtArgs>>): Prisma__VenueClient<$Result.GetResult<Prisma.$VenuePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Venue that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VenueFindUniqueOrThrowArgs} args - Arguments to find a Venue
     * @example
     * // Get one Venue
     * const venue = await prisma.venue.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VenueFindUniqueOrThrowArgs>(args: SelectSubset<T, VenueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VenueClient<$Result.GetResult<Prisma.$VenuePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Venue that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueFindFirstArgs} args - Arguments to find a Venue
     * @example
     * // Get one Venue
     * const venue = await prisma.venue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VenueFindFirstArgs>(args?: SelectSubset<T, VenueFindFirstArgs<ExtArgs>>): Prisma__VenueClient<$Result.GetResult<Prisma.$VenuePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Venue that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueFindFirstOrThrowArgs} args - Arguments to find a Venue
     * @example
     * // Get one Venue
     * const venue = await prisma.venue.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VenueFindFirstOrThrowArgs>(args?: SelectSubset<T, VenueFindFirstOrThrowArgs<ExtArgs>>): Prisma__VenueClient<$Result.GetResult<Prisma.$VenuePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Venues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Venues
     * const venues = await prisma.venue.findMany()
     * 
     * // Get first 10 Venues
     * const venues = await prisma.venue.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const venueWithIdOnly = await prisma.venue.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VenueFindManyArgs>(args?: SelectSubset<T, VenueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VenuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Venue.
     * @param {VenueCreateArgs} args - Arguments to create a Venue.
     * @example
     * // Create one Venue
     * const Venue = await prisma.venue.create({
     *   data: {
     *     // ... data to create a Venue
     *   }
     * })
     * 
     */
    create<T extends VenueCreateArgs>(args: SelectSubset<T, VenueCreateArgs<ExtArgs>>): Prisma__VenueClient<$Result.GetResult<Prisma.$VenuePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Venues.
     * @param {VenueCreateManyArgs} args - Arguments to create many Venues.
     * @example
     * // Create many Venues
     * const venue = await prisma.venue.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VenueCreateManyArgs>(args?: SelectSubset<T, VenueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Venues and returns the data saved in the database.
     * @param {VenueCreateManyAndReturnArgs} args - Arguments to create many Venues.
     * @example
     * // Create many Venues
     * const venue = await prisma.venue.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Venues and only return the `id`
     * const venueWithIdOnly = await prisma.venue.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VenueCreateManyAndReturnArgs>(args?: SelectSubset<T, VenueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VenuePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Venue.
     * @param {VenueDeleteArgs} args - Arguments to delete one Venue.
     * @example
     * // Delete one Venue
     * const Venue = await prisma.venue.delete({
     *   where: {
     *     // ... filter to delete one Venue
     *   }
     * })
     * 
     */
    delete<T extends VenueDeleteArgs>(args: SelectSubset<T, VenueDeleteArgs<ExtArgs>>): Prisma__VenueClient<$Result.GetResult<Prisma.$VenuePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Venue.
     * @param {VenueUpdateArgs} args - Arguments to update one Venue.
     * @example
     * // Update one Venue
     * const venue = await prisma.venue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VenueUpdateArgs>(args: SelectSubset<T, VenueUpdateArgs<ExtArgs>>): Prisma__VenueClient<$Result.GetResult<Prisma.$VenuePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Venues.
     * @param {VenueDeleteManyArgs} args - Arguments to filter Venues to delete.
     * @example
     * // Delete a few Venues
     * const { count } = await prisma.venue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VenueDeleteManyArgs>(args?: SelectSubset<T, VenueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Venues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Venues
     * const venue = await prisma.venue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VenueUpdateManyArgs>(args: SelectSubset<T, VenueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Venues and returns the data updated in the database.
     * @param {VenueUpdateManyAndReturnArgs} args - Arguments to update many Venues.
     * @example
     * // Update many Venues
     * const venue = await prisma.venue.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Venues and only return the `id`
     * const venueWithIdOnly = await prisma.venue.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VenueUpdateManyAndReturnArgs>(args: SelectSubset<T, VenueUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VenuePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Venue.
     * @param {VenueUpsertArgs} args - Arguments to update or create a Venue.
     * @example
     * // Update or create a Venue
     * const venue = await prisma.venue.upsert({
     *   create: {
     *     // ... data to create a Venue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Venue we want to update
     *   }
     * })
     */
    upsert<T extends VenueUpsertArgs>(args: SelectSubset<T, VenueUpsertArgs<ExtArgs>>): Prisma__VenueClient<$Result.GetResult<Prisma.$VenuePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Venues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueCountArgs} args - Arguments to filter Venues to count.
     * @example
     * // Count the number of Venues
     * const count = await prisma.venue.count({
     *   where: {
     *     // ... the filter for the Venues we want to count
     *   }
     * })
    **/
    count<T extends VenueCountArgs>(
      args?: Subset<T, VenueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VenueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Venue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VenueAggregateArgs>(args: Subset<T, VenueAggregateArgs>): Prisma.PrismaPromise<GetVenueAggregateType<T>>

    /**
     * Group by Venue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VenueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VenueGroupByArgs['orderBy'] }
        : { orderBy?: VenueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VenueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVenueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Venue model
   */
  readonly fields: VenueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Venue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VenueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    amenities<T extends Venue$amenitiesArgs<ExtArgs> = {}>(args?: Subset<T, Venue$amenitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmenityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    VenueRatingUser<T extends Venue$VenueRatingUserArgs<ExtArgs> = {}>(args?: Subset<T, Venue$VenueRatingUserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VenueRatingUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    venueReservationUser<T extends Venue$venueReservationUserArgs<ExtArgs> = {}>(args?: Subset<T, Venue$venueReservationUserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VenueReservationUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    venueFavouriteUser<T extends Venue$venueFavouriteUserArgs<ExtArgs> = {}>(args?: Subset<T, Venue$venueFavouriteUserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VenueFavouriteUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Venue model
   */
  interface VenueFieldRefs {
    readonly id: FieldRef<"Venue", 'Int'>
    readonly pricePerNightInEURCent: FieldRef<"Venue", 'Int'>
    readonly rating: FieldRef<"Venue", 'Float'>
    readonly capacity: FieldRef<"Venue", 'Int'>
    readonly amountsOfBeds: FieldRef<"Venue", 'Int'>
    readonly extraSleepingDetails: FieldRef<"Venue", 'String'>
    readonly name: FieldRef<"Venue", 'String'>
    readonly images: FieldRef<"Venue", 'Json'>
    readonly description: FieldRef<"Venue", 'String'>
    readonly checkInHour: FieldRef<"Venue", 'Int'>
    readonly checkOutHour: FieldRef<"Venue", 'Int'>
    readonly distanceFromCityCenterInM: FieldRef<"Venue", 'Int'>
    readonly facebookUrl: FieldRef<"Venue", 'String'>
    readonly instagramUrl: FieldRef<"Venue", 'String'>
    readonly twitterUrl: FieldRef<"Venue", 'String'>
    readonly websiteUrl: FieldRef<"Venue", 'String'>
    readonly streetNumber: FieldRef<"Venue", 'String'>
    readonly streetName: FieldRef<"Venue", 'String'>
    readonly postalCode: FieldRef<"Venue", 'String'>
    readonly city: FieldRef<"Venue", 'String'>
    readonly ownerId: FieldRef<"Venue", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Venue findUnique
   */
  export type VenueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venue
     */
    omit?: VenueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueInclude<ExtArgs> | null
    /**
     * Filter, which Venue to fetch.
     */
    where: VenueWhereUniqueInput
  }

  /**
   * Venue findUniqueOrThrow
   */
  export type VenueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venue
     */
    omit?: VenueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueInclude<ExtArgs> | null
    /**
     * Filter, which Venue to fetch.
     */
    where: VenueWhereUniqueInput
  }

  /**
   * Venue findFirst
   */
  export type VenueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venue
     */
    omit?: VenueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueInclude<ExtArgs> | null
    /**
     * Filter, which Venue to fetch.
     */
    where?: VenueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Venues to fetch.
     */
    orderBy?: VenueOrderByWithRelationInput | VenueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Venues.
     */
    cursor?: VenueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Venues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Venues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Venues.
     */
    distinct?: VenueScalarFieldEnum | VenueScalarFieldEnum[]
  }

  /**
   * Venue findFirstOrThrow
   */
  export type VenueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venue
     */
    omit?: VenueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueInclude<ExtArgs> | null
    /**
     * Filter, which Venue to fetch.
     */
    where?: VenueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Venues to fetch.
     */
    orderBy?: VenueOrderByWithRelationInput | VenueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Venues.
     */
    cursor?: VenueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Venues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Venues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Venues.
     */
    distinct?: VenueScalarFieldEnum | VenueScalarFieldEnum[]
  }

  /**
   * Venue findMany
   */
  export type VenueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venue
     */
    omit?: VenueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueInclude<ExtArgs> | null
    /**
     * Filter, which Venues to fetch.
     */
    where?: VenueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Venues to fetch.
     */
    orderBy?: VenueOrderByWithRelationInput | VenueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Venues.
     */
    cursor?: VenueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Venues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Venues.
     */
    skip?: number
    distinct?: VenueScalarFieldEnum | VenueScalarFieldEnum[]
  }

  /**
   * Venue create
   */
  export type VenueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venue
     */
    omit?: VenueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueInclude<ExtArgs> | null
    /**
     * The data needed to create a Venue.
     */
    data: XOR<VenueCreateInput, VenueUncheckedCreateInput>
  }

  /**
   * Venue createMany
   */
  export type VenueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Venues.
     */
    data: VenueCreateManyInput | VenueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Venue createManyAndReturn
   */
  export type VenueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Venue
     */
    omit?: VenueOmit<ExtArgs> | null
    /**
     * The data used to create many Venues.
     */
    data: VenueCreateManyInput | VenueCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Venue update
   */
  export type VenueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venue
     */
    omit?: VenueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueInclude<ExtArgs> | null
    /**
     * The data needed to update a Venue.
     */
    data: XOR<VenueUpdateInput, VenueUncheckedUpdateInput>
    /**
     * Choose, which Venue to update.
     */
    where: VenueWhereUniqueInput
  }

  /**
   * Venue updateMany
   */
  export type VenueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Venues.
     */
    data: XOR<VenueUpdateManyMutationInput, VenueUncheckedUpdateManyInput>
    /**
     * Filter which Venues to update
     */
    where?: VenueWhereInput
    /**
     * Limit how many Venues to update.
     */
    limit?: number
  }

  /**
   * Venue updateManyAndReturn
   */
  export type VenueUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Venue
     */
    omit?: VenueOmit<ExtArgs> | null
    /**
     * The data used to update Venues.
     */
    data: XOR<VenueUpdateManyMutationInput, VenueUncheckedUpdateManyInput>
    /**
     * Filter which Venues to update
     */
    where?: VenueWhereInput
    /**
     * Limit how many Venues to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Venue upsert
   */
  export type VenueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venue
     */
    omit?: VenueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueInclude<ExtArgs> | null
    /**
     * The filter to search for the Venue to update in case it exists.
     */
    where: VenueWhereUniqueInput
    /**
     * In case the Venue found by the `where` argument doesn't exist, create a new Venue with this data.
     */
    create: XOR<VenueCreateInput, VenueUncheckedCreateInput>
    /**
     * In case the Venue was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VenueUpdateInput, VenueUncheckedUpdateInput>
  }

  /**
   * Venue delete
   */
  export type VenueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venue
     */
    omit?: VenueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueInclude<ExtArgs> | null
    /**
     * Filter which Venue to delete.
     */
    where: VenueWhereUniqueInput
  }

  /**
   * Venue deleteMany
   */
  export type VenueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Venues to delete
     */
    where?: VenueWhereInput
    /**
     * Limit how many Venues to delete.
     */
    limit?: number
  }

  /**
   * Venue.amenities
   */
  export type Venue$amenitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Amenity
     */
    select?: AmenitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Amenity
     */
    omit?: AmenityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmenityInclude<ExtArgs> | null
    where?: AmenityWhereInput
    orderBy?: AmenityOrderByWithRelationInput | AmenityOrderByWithRelationInput[]
    cursor?: AmenityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AmenityScalarFieldEnum | AmenityScalarFieldEnum[]
  }

  /**
   * Venue.VenueRatingUser
   */
  export type Venue$VenueRatingUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueRatingUser
     */
    select?: VenueRatingUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueRatingUser
     */
    omit?: VenueRatingUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueRatingUserInclude<ExtArgs> | null
    where?: VenueRatingUserWhereInput
    orderBy?: VenueRatingUserOrderByWithRelationInput | VenueRatingUserOrderByWithRelationInput[]
    cursor?: VenueRatingUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VenueRatingUserScalarFieldEnum | VenueRatingUserScalarFieldEnum[]
  }

  /**
   * Venue.venueReservationUser
   */
  export type Venue$venueReservationUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueReservationUser
     */
    select?: VenueReservationUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueReservationUser
     */
    omit?: VenueReservationUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueReservationUserInclude<ExtArgs> | null
    where?: VenueReservationUserWhereInput
    orderBy?: VenueReservationUserOrderByWithRelationInput | VenueReservationUserOrderByWithRelationInput[]
    cursor?: VenueReservationUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VenueReservationUserScalarFieldEnum | VenueReservationUserScalarFieldEnum[]
  }

  /**
   * Venue.venueFavouriteUser
   */
  export type Venue$venueFavouriteUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueFavouriteUser
     */
    select?: VenueFavouriteUserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VenueFavouriteUser
     */
    omit?: VenueFavouriteUserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueFavouriteUserInclude<ExtArgs> | null
    where?: VenueFavouriteUserWhereInput
    orderBy?: VenueFavouriteUserOrderByWithRelationInput | VenueFavouriteUserOrderByWithRelationInput[]
    cursor?: VenueFavouriteUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VenueFavouriteUserScalarFieldEnum | VenueFavouriteUserScalarFieldEnum[]
  }

  /**
   * Venue without action
   */
  export type VenueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venue
     */
    omit?: VenueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VenueInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AmenityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    categoryId: 'categoryId'
  };

  export type AmenityScalarFieldEnum = (typeof AmenityScalarFieldEnum)[keyof typeof AmenityScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const OccasionScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type OccasionScalarFieldEnum = (typeof OccasionScalarFieldEnum)[keyof typeof OccasionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    phoneNumber: 'phoneNumber',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const VenueFavouriteUserScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    venueId: 'venueId'
  };

  export type VenueFavouriteUserScalarFieldEnum = (typeof VenueFavouriteUserScalarFieldEnum)[keyof typeof VenueFavouriteUserScalarFieldEnum]


  export const VenueRatingUserScalarFieldEnum: {
    id: 'id',
    venueId: 'venueId',
    userId: 'userId',
    score: 'score',
    review: 'review'
  };

  export type VenueRatingUserScalarFieldEnum = (typeof VenueRatingUserScalarFieldEnum)[keyof typeof VenueRatingUserScalarFieldEnum]


  export const VenueReservationUserScalarFieldEnum: {
    id: 'id',
    venueId: 'venueId',
    userId: 'userId',
    dateStart: 'dateStart',
    dateEnd: 'dateEnd',
    status: 'status'
  };

  export type VenueReservationUserScalarFieldEnum = (typeof VenueReservationUserScalarFieldEnum)[keyof typeof VenueReservationUserScalarFieldEnum]


  export const VenueScalarFieldEnum: {
    id: 'id',
    pricePerNightInEURCent: 'pricePerNightInEURCent',
    rating: 'rating',
    capacity: 'capacity',
    amountsOfBeds: 'amountsOfBeds',
    extraSleepingDetails: 'extraSleepingDetails',
    name: 'name',
    images: 'images',
    description: 'description',
    checkInHour: 'checkInHour',
    checkOutHour: 'checkOutHour',
    distanceFromCityCenterInM: 'distanceFromCityCenterInM',
    facebookUrl: 'facebookUrl',
    instagramUrl: 'instagramUrl',
    twitterUrl: 'twitterUrl',
    websiteUrl: 'websiteUrl',
    streetNumber: 'streetNumber',
    streetName: 'streetName',
    postalCode: 'postalCode',
    city: 'city',
    ownerId: 'ownerId'
  };

  export type VenueScalarFieldEnum = (typeof VenueScalarFieldEnum)[keyof typeof VenueScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'StatusEnum'
   */
  export type EnumStatusEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusEnum'>
    


  /**
   * Reference to a field of type 'StatusEnum[]'
   */
  export type ListEnumStatusEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusEnum[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    
  /**
   * Deep Input Types
   */


  export type AmenityWhereInput = {
    AND?: AmenityWhereInput | AmenityWhereInput[]
    OR?: AmenityWhereInput[]
    NOT?: AmenityWhereInput | AmenityWhereInput[]
    id?: IntFilter<"Amenity"> | number
    name?: StringFilter<"Amenity"> | string
    categoryId?: IntFilter<"Amenity"> | number
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    occasions?: OccasionListRelationFilter
    venues?: VenueListRelationFilter
  }

  export type AmenityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    categoryId?: SortOrder
    category?: CategoryOrderByWithRelationInput
    occasions?: OccasionOrderByRelationAggregateInput
    venues?: VenueOrderByRelationAggregateInput
  }

  export type AmenityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AmenityWhereInput | AmenityWhereInput[]
    OR?: AmenityWhereInput[]
    NOT?: AmenityWhereInput | AmenityWhereInput[]
    name?: StringFilter<"Amenity"> | string
    categoryId?: IntFilter<"Amenity"> | number
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    occasions?: OccasionListRelationFilter
    venues?: VenueListRelationFilter
  }, "id">

  export type AmenityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    categoryId?: SortOrder
    _count?: AmenityCountOrderByAggregateInput
    _avg?: AmenityAvgOrderByAggregateInput
    _max?: AmenityMaxOrderByAggregateInput
    _min?: AmenityMinOrderByAggregateInput
    _sum?: AmenitySumOrderByAggregateInput
  }

  export type AmenityScalarWhereWithAggregatesInput = {
    AND?: AmenityScalarWhereWithAggregatesInput | AmenityScalarWhereWithAggregatesInput[]
    OR?: AmenityScalarWhereWithAggregatesInput[]
    NOT?: AmenityScalarWhereWithAggregatesInput | AmenityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Amenity"> | number
    name?: StringWithAggregatesFilter<"Amenity"> | string
    categoryId?: IntWithAggregatesFilter<"Amenity"> | number
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    amenities?: AmenityListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    amenities?: AmenityOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    name?: StringFilter<"Category"> | string
    amenities?: AmenityListRelationFilter
  }, "id">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    name?: StringWithAggregatesFilter<"Category"> | string
  }

  export type OccasionWhereInput = {
    AND?: OccasionWhereInput | OccasionWhereInput[]
    OR?: OccasionWhereInput[]
    NOT?: OccasionWhereInput | OccasionWhereInput[]
    id?: IntFilter<"Occasion"> | number
    name?: StringFilter<"Occasion"> | string
    amenities?: AmenityListRelationFilter
  }

  export type OccasionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    amenities?: AmenityOrderByRelationAggregateInput
  }

  export type OccasionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OccasionWhereInput | OccasionWhereInput[]
    OR?: OccasionWhereInput[]
    NOT?: OccasionWhereInput | OccasionWhereInput[]
    name?: StringFilter<"Occasion"> | string
    amenities?: AmenityListRelationFilter
  }, "id">

  export type OccasionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: OccasionCountOrderByAggregateInput
    _avg?: OccasionAvgOrderByAggregateInput
    _max?: OccasionMaxOrderByAggregateInput
    _min?: OccasionMinOrderByAggregateInput
    _sum?: OccasionSumOrderByAggregateInput
  }

  export type OccasionScalarWhereWithAggregatesInput = {
    AND?: OccasionScalarWhereWithAggregatesInput | OccasionScalarWhereWithAggregatesInput[]
    OR?: OccasionScalarWhereWithAggregatesInput[]
    NOT?: OccasionScalarWhereWithAggregatesInput | OccasionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Occasion"> | number
    name?: StringWithAggregatesFilter<"Occasion"> | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    venues?: VenueListRelationFilter
    venueRatingUser?: VenueRatingUserListRelationFilter
    venueReservationUser?: VenueReservationUserListRelationFilter
    venueFavouriteUser?: VenueFavouriteUserListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    venues?: VenueOrderByRelationAggregateInput
    venueRatingUser?: VenueRatingUserOrderByRelationAggregateInput
    venueReservationUser?: VenueReservationUserOrderByRelationAggregateInput
    venueFavouriteUser?: VenueFavouriteUserOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    venues?: VenueListRelationFilter
    venueRatingUser?: VenueRatingUserListRelationFilter
    venueReservationUser?: VenueReservationUserListRelationFilter
    venueFavouriteUser?: VenueFavouriteUserListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    phoneNumber?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
  }

  export type VenueFavouriteUserWhereInput = {
    AND?: VenueFavouriteUserWhereInput | VenueFavouriteUserWhereInput[]
    OR?: VenueFavouriteUserWhereInput[]
    NOT?: VenueFavouriteUserWhereInput | VenueFavouriteUserWhereInput[]
    id?: IntFilter<"VenueFavouriteUser"> | number
    userId?: IntFilter<"VenueFavouriteUser"> | number
    venueId?: IntFilter<"VenueFavouriteUser"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    venue?: XOR<VenueScalarRelationFilter, VenueWhereInput>
  }

  export type VenueFavouriteUserOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    venueId?: SortOrder
    user?: UserOrderByWithRelationInput
    venue?: VenueOrderByWithRelationInput
  }

  export type VenueFavouriteUserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_venueId?: VenueFavouriteUserUserIdVenueIdCompoundUniqueInput
    AND?: VenueFavouriteUserWhereInput | VenueFavouriteUserWhereInput[]
    OR?: VenueFavouriteUserWhereInput[]
    NOT?: VenueFavouriteUserWhereInput | VenueFavouriteUserWhereInput[]
    userId?: IntFilter<"VenueFavouriteUser"> | number
    venueId?: IntFilter<"VenueFavouriteUser"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    venue?: XOR<VenueScalarRelationFilter, VenueWhereInput>
  }, "id" | "userId_venueId">

  export type VenueFavouriteUserOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    venueId?: SortOrder
    _count?: VenueFavouriteUserCountOrderByAggregateInput
    _avg?: VenueFavouriteUserAvgOrderByAggregateInput
    _max?: VenueFavouriteUserMaxOrderByAggregateInput
    _min?: VenueFavouriteUserMinOrderByAggregateInput
    _sum?: VenueFavouriteUserSumOrderByAggregateInput
  }

  export type VenueFavouriteUserScalarWhereWithAggregatesInput = {
    AND?: VenueFavouriteUserScalarWhereWithAggregatesInput | VenueFavouriteUserScalarWhereWithAggregatesInput[]
    OR?: VenueFavouriteUserScalarWhereWithAggregatesInput[]
    NOT?: VenueFavouriteUserScalarWhereWithAggregatesInput | VenueFavouriteUserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"VenueFavouriteUser"> | number
    userId?: IntWithAggregatesFilter<"VenueFavouriteUser"> | number
    venueId?: IntWithAggregatesFilter<"VenueFavouriteUser"> | number
  }

  export type VenueRatingUserWhereInput = {
    AND?: VenueRatingUserWhereInput | VenueRatingUserWhereInput[]
    OR?: VenueRatingUserWhereInput[]
    NOT?: VenueRatingUserWhereInput | VenueRatingUserWhereInput[]
    id?: IntFilter<"VenueRatingUser"> | number
    venueId?: IntFilter<"VenueRatingUser"> | number
    userId?: IntFilter<"VenueRatingUser"> | number
    score?: FloatFilter<"VenueRatingUser"> | number
    review?: StringNullableFilter<"VenueRatingUser"> | string | null
    venue?: XOR<VenueScalarRelationFilter, VenueWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type VenueRatingUserOrderByWithRelationInput = {
    id?: SortOrder
    venueId?: SortOrder
    userId?: SortOrder
    score?: SortOrder
    review?: SortOrderInput | SortOrder
    venue?: VenueOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type VenueRatingUserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VenueRatingUserWhereInput | VenueRatingUserWhereInput[]
    OR?: VenueRatingUserWhereInput[]
    NOT?: VenueRatingUserWhereInput | VenueRatingUserWhereInput[]
    venueId?: IntFilter<"VenueRatingUser"> | number
    userId?: IntFilter<"VenueRatingUser"> | number
    score?: FloatFilter<"VenueRatingUser"> | number
    review?: StringNullableFilter<"VenueRatingUser"> | string | null
    venue?: XOR<VenueScalarRelationFilter, VenueWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type VenueRatingUserOrderByWithAggregationInput = {
    id?: SortOrder
    venueId?: SortOrder
    userId?: SortOrder
    score?: SortOrder
    review?: SortOrderInput | SortOrder
    _count?: VenueRatingUserCountOrderByAggregateInput
    _avg?: VenueRatingUserAvgOrderByAggregateInput
    _max?: VenueRatingUserMaxOrderByAggregateInput
    _min?: VenueRatingUserMinOrderByAggregateInput
    _sum?: VenueRatingUserSumOrderByAggregateInput
  }

  export type VenueRatingUserScalarWhereWithAggregatesInput = {
    AND?: VenueRatingUserScalarWhereWithAggregatesInput | VenueRatingUserScalarWhereWithAggregatesInput[]
    OR?: VenueRatingUserScalarWhereWithAggregatesInput[]
    NOT?: VenueRatingUserScalarWhereWithAggregatesInput | VenueRatingUserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"VenueRatingUser"> | number
    venueId?: IntWithAggregatesFilter<"VenueRatingUser"> | number
    userId?: IntWithAggregatesFilter<"VenueRatingUser"> | number
    score?: FloatWithAggregatesFilter<"VenueRatingUser"> | number
    review?: StringNullableWithAggregatesFilter<"VenueRatingUser"> | string | null
  }

  export type VenueReservationUserWhereInput = {
    AND?: VenueReservationUserWhereInput | VenueReservationUserWhereInput[]
    OR?: VenueReservationUserWhereInput[]
    NOT?: VenueReservationUserWhereInput | VenueReservationUserWhereInput[]
    id?: IntFilter<"VenueReservationUser"> | number
    venueId?: IntFilter<"VenueReservationUser"> | number
    userId?: IntFilter<"VenueReservationUser"> | number
    dateStart?: DateTimeFilter<"VenueReservationUser"> | Date | string
    dateEnd?: DateTimeFilter<"VenueReservationUser"> | Date | string
    status?: EnumStatusEnumFilter<"VenueReservationUser"> | $Enums.StatusEnum
    venue?: XOR<VenueScalarRelationFilter, VenueWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type VenueReservationUserOrderByWithRelationInput = {
    id?: SortOrder
    venueId?: SortOrder
    userId?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
    status?: SortOrder
    venue?: VenueOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type VenueReservationUserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VenueReservationUserWhereInput | VenueReservationUserWhereInput[]
    OR?: VenueReservationUserWhereInput[]
    NOT?: VenueReservationUserWhereInput | VenueReservationUserWhereInput[]
    venueId?: IntFilter<"VenueReservationUser"> | number
    userId?: IntFilter<"VenueReservationUser"> | number
    dateStart?: DateTimeFilter<"VenueReservationUser"> | Date | string
    dateEnd?: DateTimeFilter<"VenueReservationUser"> | Date | string
    status?: EnumStatusEnumFilter<"VenueReservationUser"> | $Enums.StatusEnum
    venue?: XOR<VenueScalarRelationFilter, VenueWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type VenueReservationUserOrderByWithAggregationInput = {
    id?: SortOrder
    venueId?: SortOrder
    userId?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
    status?: SortOrder
    _count?: VenueReservationUserCountOrderByAggregateInput
    _avg?: VenueReservationUserAvgOrderByAggregateInput
    _max?: VenueReservationUserMaxOrderByAggregateInput
    _min?: VenueReservationUserMinOrderByAggregateInput
    _sum?: VenueReservationUserSumOrderByAggregateInput
  }

  export type VenueReservationUserScalarWhereWithAggregatesInput = {
    AND?: VenueReservationUserScalarWhereWithAggregatesInput | VenueReservationUserScalarWhereWithAggregatesInput[]
    OR?: VenueReservationUserScalarWhereWithAggregatesInput[]
    NOT?: VenueReservationUserScalarWhereWithAggregatesInput | VenueReservationUserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"VenueReservationUser"> | number
    venueId?: IntWithAggregatesFilter<"VenueReservationUser"> | number
    userId?: IntWithAggregatesFilter<"VenueReservationUser"> | number
    dateStart?: DateTimeWithAggregatesFilter<"VenueReservationUser"> | Date | string
    dateEnd?: DateTimeWithAggregatesFilter<"VenueReservationUser"> | Date | string
    status?: EnumStatusEnumWithAggregatesFilter<"VenueReservationUser"> | $Enums.StatusEnum
  }

  export type VenueWhereInput = {
    AND?: VenueWhereInput | VenueWhereInput[]
    OR?: VenueWhereInput[]
    NOT?: VenueWhereInput | VenueWhereInput[]
    id?: IntFilter<"Venue"> | number
    pricePerNightInEURCent?: IntFilter<"Venue"> | number
    rating?: FloatFilter<"Venue"> | number
    capacity?: IntFilter<"Venue"> | number
    amountsOfBeds?: IntFilter<"Venue"> | number
    extraSleepingDetails?: StringFilter<"Venue"> | string
    name?: StringFilter<"Venue"> | string
    images?: JsonFilter<"Venue">
    description?: StringFilter<"Venue"> | string
    checkInHour?: IntFilter<"Venue"> | number
    checkOutHour?: IntFilter<"Venue"> | number
    distanceFromCityCenterInM?: IntFilter<"Venue"> | number
    facebookUrl?: StringFilter<"Venue"> | string
    instagramUrl?: StringFilter<"Venue"> | string
    twitterUrl?: StringFilter<"Venue"> | string
    websiteUrl?: StringFilter<"Venue"> | string
    streetNumber?: StringFilter<"Venue"> | string
    streetName?: StringFilter<"Venue"> | string
    postalCode?: StringFilter<"Venue"> | string
    city?: StringFilter<"Venue"> | string
    ownerId?: IntFilter<"Venue"> | number
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    amenities?: AmenityListRelationFilter
    VenueRatingUser?: VenueRatingUserListRelationFilter
    venueReservationUser?: VenueReservationUserListRelationFilter
    venueFavouriteUser?: VenueFavouriteUserListRelationFilter
  }

  export type VenueOrderByWithRelationInput = {
    id?: SortOrder
    pricePerNightInEURCent?: SortOrder
    rating?: SortOrder
    capacity?: SortOrder
    amountsOfBeds?: SortOrder
    extraSleepingDetails?: SortOrder
    name?: SortOrder
    images?: SortOrder
    description?: SortOrder
    checkInHour?: SortOrder
    checkOutHour?: SortOrder
    distanceFromCityCenterInM?: SortOrder
    facebookUrl?: SortOrder
    instagramUrl?: SortOrder
    twitterUrl?: SortOrder
    websiteUrl?: SortOrder
    streetNumber?: SortOrder
    streetName?: SortOrder
    postalCode?: SortOrder
    city?: SortOrder
    ownerId?: SortOrder
    owner?: UserOrderByWithRelationInput
    amenities?: AmenityOrderByRelationAggregateInput
    VenueRatingUser?: VenueRatingUserOrderByRelationAggregateInput
    venueReservationUser?: VenueReservationUserOrderByRelationAggregateInput
    venueFavouriteUser?: VenueFavouriteUserOrderByRelationAggregateInput
  }

  export type VenueWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VenueWhereInput | VenueWhereInput[]
    OR?: VenueWhereInput[]
    NOT?: VenueWhereInput | VenueWhereInput[]
    pricePerNightInEURCent?: IntFilter<"Venue"> | number
    rating?: FloatFilter<"Venue"> | number
    capacity?: IntFilter<"Venue"> | number
    amountsOfBeds?: IntFilter<"Venue"> | number
    extraSleepingDetails?: StringFilter<"Venue"> | string
    name?: StringFilter<"Venue"> | string
    images?: JsonFilter<"Venue">
    description?: StringFilter<"Venue"> | string
    checkInHour?: IntFilter<"Venue"> | number
    checkOutHour?: IntFilter<"Venue"> | number
    distanceFromCityCenterInM?: IntFilter<"Venue"> | number
    facebookUrl?: StringFilter<"Venue"> | string
    instagramUrl?: StringFilter<"Venue"> | string
    twitterUrl?: StringFilter<"Venue"> | string
    websiteUrl?: StringFilter<"Venue"> | string
    streetNumber?: StringFilter<"Venue"> | string
    streetName?: StringFilter<"Venue"> | string
    postalCode?: StringFilter<"Venue"> | string
    city?: StringFilter<"Venue"> | string
    ownerId?: IntFilter<"Venue"> | number
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    amenities?: AmenityListRelationFilter
    VenueRatingUser?: VenueRatingUserListRelationFilter
    venueReservationUser?: VenueReservationUserListRelationFilter
    venueFavouriteUser?: VenueFavouriteUserListRelationFilter
  }, "id">

  export type VenueOrderByWithAggregationInput = {
    id?: SortOrder
    pricePerNightInEURCent?: SortOrder
    rating?: SortOrder
    capacity?: SortOrder
    amountsOfBeds?: SortOrder
    extraSleepingDetails?: SortOrder
    name?: SortOrder
    images?: SortOrder
    description?: SortOrder
    checkInHour?: SortOrder
    checkOutHour?: SortOrder
    distanceFromCityCenterInM?: SortOrder
    facebookUrl?: SortOrder
    instagramUrl?: SortOrder
    twitterUrl?: SortOrder
    websiteUrl?: SortOrder
    streetNumber?: SortOrder
    streetName?: SortOrder
    postalCode?: SortOrder
    city?: SortOrder
    ownerId?: SortOrder
    _count?: VenueCountOrderByAggregateInput
    _avg?: VenueAvgOrderByAggregateInput
    _max?: VenueMaxOrderByAggregateInput
    _min?: VenueMinOrderByAggregateInput
    _sum?: VenueSumOrderByAggregateInput
  }

  export type VenueScalarWhereWithAggregatesInput = {
    AND?: VenueScalarWhereWithAggregatesInput | VenueScalarWhereWithAggregatesInput[]
    OR?: VenueScalarWhereWithAggregatesInput[]
    NOT?: VenueScalarWhereWithAggregatesInput | VenueScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Venue"> | number
    pricePerNightInEURCent?: IntWithAggregatesFilter<"Venue"> | number
    rating?: FloatWithAggregatesFilter<"Venue"> | number
    capacity?: IntWithAggregatesFilter<"Venue"> | number
    amountsOfBeds?: IntWithAggregatesFilter<"Venue"> | number
    extraSleepingDetails?: StringWithAggregatesFilter<"Venue"> | string
    name?: StringWithAggregatesFilter<"Venue"> | string
    images?: JsonWithAggregatesFilter<"Venue">
    description?: StringWithAggregatesFilter<"Venue"> | string
    checkInHour?: IntWithAggregatesFilter<"Venue"> | number
    checkOutHour?: IntWithAggregatesFilter<"Venue"> | number
    distanceFromCityCenterInM?: IntWithAggregatesFilter<"Venue"> | number
    facebookUrl?: StringWithAggregatesFilter<"Venue"> | string
    instagramUrl?: StringWithAggregatesFilter<"Venue"> | string
    twitterUrl?: StringWithAggregatesFilter<"Venue"> | string
    websiteUrl?: StringWithAggregatesFilter<"Venue"> | string
    streetNumber?: StringWithAggregatesFilter<"Venue"> | string
    streetName?: StringWithAggregatesFilter<"Venue"> | string
    postalCode?: StringWithAggregatesFilter<"Venue"> | string
    city?: StringWithAggregatesFilter<"Venue"> | string
    ownerId?: IntWithAggregatesFilter<"Venue"> | number
  }

  export type AmenityCreateInput = {
    name: string
    category: CategoryCreateNestedOneWithoutAmenitiesInput
    occasions?: OccasionCreateNestedManyWithoutAmenitiesInput
    venues?: VenueCreateNestedManyWithoutAmenitiesInput
  }

  export type AmenityUncheckedCreateInput = {
    id?: number
    name: string
    categoryId: number
    occasions?: OccasionUncheckedCreateNestedManyWithoutAmenitiesInput
    venues?: VenueUncheckedCreateNestedManyWithoutAmenitiesInput
  }

  export type AmenityUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: CategoryUpdateOneRequiredWithoutAmenitiesNestedInput
    occasions?: OccasionUpdateManyWithoutAmenitiesNestedInput
    venues?: VenueUpdateManyWithoutAmenitiesNestedInput
  }

  export type AmenityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    occasions?: OccasionUncheckedUpdateManyWithoutAmenitiesNestedInput
    venues?: VenueUncheckedUpdateManyWithoutAmenitiesNestedInput
  }

  export type AmenityCreateManyInput = {
    id?: number
    name: string
    categoryId: number
  }

  export type AmenityUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AmenityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryCreateInput = {
    name: string
    amenities?: AmenityCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    amenities?: AmenityUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    amenities?: AmenityUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    amenities?: AmenityUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    name: string
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type OccasionCreateInput = {
    name: string
    amenities?: AmenityCreateNestedManyWithoutOccasionsInput
  }

  export type OccasionUncheckedCreateInput = {
    id?: number
    name: string
    amenities?: AmenityUncheckedCreateNestedManyWithoutOccasionsInput
  }

  export type OccasionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    amenities?: AmenityUpdateManyWithoutOccasionsNestedInput
  }

  export type OccasionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    amenities?: AmenityUncheckedUpdateManyWithoutOccasionsNestedInput
  }

  export type OccasionCreateManyInput = {
    id?: number
    name: string
  }

  export type OccasionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type OccasionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    email: string
    name: string
    phoneNumber: string
    password: string
    venues?: VenueCreateNestedManyWithoutOwnerInput
    venueRatingUser?: VenueRatingUserCreateNestedManyWithoutUserInput
    venueReservationUser?: VenueReservationUserCreateNestedManyWithoutUserInput
    venueFavouriteUser?: VenueFavouriteUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    name: string
    phoneNumber: string
    password: string
    venues?: VenueUncheckedCreateNestedManyWithoutOwnerInput
    venueRatingUser?: VenueRatingUserUncheckedCreateNestedManyWithoutUserInput
    venueReservationUser?: VenueReservationUserUncheckedCreateNestedManyWithoutUserInput
    venueFavouriteUser?: VenueFavouriteUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    venues?: VenueUpdateManyWithoutOwnerNestedInput
    venueRatingUser?: VenueRatingUserUpdateManyWithoutUserNestedInput
    venueReservationUser?: VenueReservationUserUpdateManyWithoutUserNestedInput
    venueFavouriteUser?: VenueFavouriteUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    venues?: VenueUncheckedUpdateManyWithoutOwnerNestedInput
    venueRatingUser?: VenueRatingUserUncheckedUpdateManyWithoutUserNestedInput
    venueReservationUser?: VenueReservationUserUncheckedUpdateManyWithoutUserNestedInput
    venueFavouriteUser?: VenueFavouriteUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    name: string
    phoneNumber: string
    password: string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type VenueFavouriteUserCreateInput = {
    user: UserCreateNestedOneWithoutVenueFavouriteUserInput
    venue: VenueCreateNestedOneWithoutVenueFavouriteUserInput
  }

  export type VenueFavouriteUserUncheckedCreateInput = {
    id?: number
    userId: number
    venueId: number
  }

  export type VenueFavouriteUserUpdateInput = {
    user?: UserUpdateOneRequiredWithoutVenueFavouriteUserNestedInput
    venue?: VenueUpdateOneRequiredWithoutVenueFavouriteUserNestedInput
  }

  export type VenueFavouriteUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    venueId?: IntFieldUpdateOperationsInput | number
  }

  export type VenueFavouriteUserCreateManyInput = {
    id?: number
    userId: number
    venueId: number
  }

  export type VenueFavouriteUserUpdateManyMutationInput = {

  }

  export type VenueFavouriteUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    venueId?: IntFieldUpdateOperationsInput | number
  }

  export type VenueRatingUserCreateInput = {
    score: number
    review?: string | null
    venue: VenueCreateNestedOneWithoutVenueRatingUserInput
    user: UserCreateNestedOneWithoutVenueRatingUserInput
  }

  export type VenueRatingUserUncheckedCreateInput = {
    id?: number
    venueId: number
    userId: number
    score: number
    review?: string | null
  }

  export type VenueRatingUserUpdateInput = {
    score?: FloatFieldUpdateOperationsInput | number
    review?: NullableStringFieldUpdateOperationsInput | string | null
    venue?: VenueUpdateOneRequiredWithoutVenueRatingUserNestedInput
    user?: UserUpdateOneRequiredWithoutVenueRatingUserNestedInput
  }

  export type VenueRatingUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    venueId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    review?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VenueRatingUserCreateManyInput = {
    id?: number
    venueId: number
    userId: number
    score: number
    review?: string | null
  }

  export type VenueRatingUserUpdateManyMutationInput = {
    score?: FloatFieldUpdateOperationsInput | number
    review?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VenueRatingUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    venueId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    review?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VenueReservationUserCreateInput = {
    dateStart: Date | string
    dateEnd: Date | string
    status: $Enums.StatusEnum
    venue: VenueCreateNestedOneWithoutVenueReservationUserInput
    user: UserCreateNestedOneWithoutVenueReservationUserInput
  }

  export type VenueReservationUserUncheckedCreateInput = {
    id?: number
    venueId: number
    userId: number
    dateStart: Date | string
    dateEnd: Date | string
    status: $Enums.StatusEnum
  }

  export type VenueReservationUserUpdateInput = {
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
    venue?: VenueUpdateOneRequiredWithoutVenueReservationUserNestedInput
    user?: UserUpdateOneRequiredWithoutVenueReservationUserNestedInput
  }

  export type VenueReservationUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    venueId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
  }

  export type VenueReservationUserCreateManyInput = {
    id?: number
    venueId: number
    userId: number
    dateStart: Date | string
    dateEnd: Date | string
    status: $Enums.StatusEnum
  }

  export type VenueReservationUserUpdateManyMutationInput = {
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
  }

  export type VenueReservationUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    venueId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
  }

  export type VenueCreateInput = {
    pricePerNightInEURCent: number
    rating: number
    capacity: number
    amountsOfBeds: number
    extraSleepingDetails: string
    name: string
    images: JsonNullValueInput | InputJsonValue
    description: string
    checkInHour: number
    checkOutHour: number
    distanceFromCityCenterInM: number
    facebookUrl: string
    instagramUrl: string
    twitterUrl: string
    websiteUrl: string
    streetNumber: string
    streetName: string
    postalCode: string
    city: string
    owner: UserCreateNestedOneWithoutVenuesInput
    amenities?: AmenityCreateNestedManyWithoutVenuesInput
    VenueRatingUser?: VenueRatingUserCreateNestedManyWithoutVenueInput
    venueReservationUser?: VenueReservationUserCreateNestedManyWithoutVenueInput
    venueFavouriteUser?: VenueFavouriteUserCreateNestedManyWithoutVenueInput
  }

  export type VenueUncheckedCreateInput = {
    id?: number
    pricePerNightInEURCent: number
    rating: number
    capacity: number
    amountsOfBeds: number
    extraSleepingDetails: string
    name: string
    images: JsonNullValueInput | InputJsonValue
    description: string
    checkInHour: number
    checkOutHour: number
    distanceFromCityCenterInM: number
    facebookUrl: string
    instagramUrl: string
    twitterUrl: string
    websiteUrl: string
    streetNumber: string
    streetName: string
    postalCode: string
    city: string
    ownerId: number
    amenities?: AmenityUncheckedCreateNestedManyWithoutVenuesInput
    VenueRatingUser?: VenueRatingUserUncheckedCreateNestedManyWithoutVenueInput
    venueReservationUser?: VenueReservationUserUncheckedCreateNestedManyWithoutVenueInput
    venueFavouriteUser?: VenueFavouriteUserUncheckedCreateNestedManyWithoutVenueInput
  }

  export type VenueUpdateInput = {
    pricePerNightInEURCent?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    amountsOfBeds?: IntFieldUpdateOperationsInput | number
    extraSleepingDetails?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    images?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    checkInHour?: IntFieldUpdateOperationsInput | number
    checkOutHour?: IntFieldUpdateOperationsInput | number
    distanceFromCityCenterInM?: IntFieldUpdateOperationsInput | number
    facebookUrl?: StringFieldUpdateOperationsInput | string
    instagramUrl?: StringFieldUpdateOperationsInput | string
    twitterUrl?: StringFieldUpdateOperationsInput | string
    websiteUrl?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    streetName?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutVenuesNestedInput
    amenities?: AmenityUpdateManyWithoutVenuesNestedInput
    VenueRatingUser?: VenueRatingUserUpdateManyWithoutVenueNestedInput
    venueReservationUser?: VenueReservationUserUpdateManyWithoutVenueNestedInput
    venueFavouriteUser?: VenueFavouriteUserUpdateManyWithoutVenueNestedInput
  }

  export type VenueUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    pricePerNightInEURCent?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    amountsOfBeds?: IntFieldUpdateOperationsInput | number
    extraSleepingDetails?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    images?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    checkInHour?: IntFieldUpdateOperationsInput | number
    checkOutHour?: IntFieldUpdateOperationsInput | number
    distanceFromCityCenterInM?: IntFieldUpdateOperationsInput | number
    facebookUrl?: StringFieldUpdateOperationsInput | string
    instagramUrl?: StringFieldUpdateOperationsInput | string
    twitterUrl?: StringFieldUpdateOperationsInput | string
    websiteUrl?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    streetName?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    amenities?: AmenityUncheckedUpdateManyWithoutVenuesNestedInput
    VenueRatingUser?: VenueRatingUserUncheckedUpdateManyWithoutVenueNestedInput
    venueReservationUser?: VenueReservationUserUncheckedUpdateManyWithoutVenueNestedInput
    venueFavouriteUser?: VenueFavouriteUserUncheckedUpdateManyWithoutVenueNestedInput
  }

  export type VenueCreateManyInput = {
    id?: number
    pricePerNightInEURCent: number
    rating: number
    capacity: number
    amountsOfBeds: number
    extraSleepingDetails: string
    name: string
    images: JsonNullValueInput | InputJsonValue
    description: string
    checkInHour: number
    checkOutHour: number
    distanceFromCityCenterInM: number
    facebookUrl: string
    instagramUrl: string
    twitterUrl: string
    websiteUrl: string
    streetNumber: string
    streetName: string
    postalCode: string
    city: string
    ownerId: number
  }

  export type VenueUpdateManyMutationInput = {
    pricePerNightInEURCent?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    amountsOfBeds?: IntFieldUpdateOperationsInput | number
    extraSleepingDetails?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    images?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    checkInHour?: IntFieldUpdateOperationsInput | number
    checkOutHour?: IntFieldUpdateOperationsInput | number
    distanceFromCityCenterInM?: IntFieldUpdateOperationsInput | number
    facebookUrl?: StringFieldUpdateOperationsInput | string
    instagramUrl?: StringFieldUpdateOperationsInput | string
    twitterUrl?: StringFieldUpdateOperationsInput | string
    websiteUrl?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    streetName?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
  }

  export type VenueUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    pricePerNightInEURCent?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    amountsOfBeds?: IntFieldUpdateOperationsInput | number
    extraSleepingDetails?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    images?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    checkInHour?: IntFieldUpdateOperationsInput | number
    checkOutHour?: IntFieldUpdateOperationsInput | number
    distanceFromCityCenterInM?: IntFieldUpdateOperationsInput | number
    facebookUrl?: StringFieldUpdateOperationsInput | string
    instagramUrl?: StringFieldUpdateOperationsInput | string
    twitterUrl?: StringFieldUpdateOperationsInput | string
    websiteUrl?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    streetName?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type CategoryScalarRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type OccasionListRelationFilter = {
    every?: OccasionWhereInput
    some?: OccasionWhereInput
    none?: OccasionWhereInput
  }

  export type VenueListRelationFilter = {
    every?: VenueWhereInput
    some?: VenueWhereInput
    none?: VenueWhereInput
  }

  export type OccasionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VenueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AmenityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    categoryId?: SortOrder
  }

  export type AmenityAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
  }

  export type AmenityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    categoryId?: SortOrder
  }

  export type AmenityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    categoryId?: SortOrder
  }

  export type AmenitySumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type AmenityListRelationFilter = {
    every?: AmenityWhereInput
    some?: AmenityWhereInput
    none?: AmenityWhereInput
  }

  export type AmenityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OccasionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type OccasionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OccasionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type OccasionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type OccasionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type VenueRatingUserListRelationFilter = {
    every?: VenueRatingUserWhereInput
    some?: VenueRatingUserWhereInput
    none?: VenueRatingUserWhereInput
  }

  export type VenueReservationUserListRelationFilter = {
    every?: VenueReservationUserWhereInput
    some?: VenueReservationUserWhereInput
    none?: VenueReservationUserWhereInput
  }

  export type VenueFavouriteUserListRelationFilter = {
    every?: VenueFavouriteUserWhereInput
    some?: VenueFavouriteUserWhereInput
    none?: VenueFavouriteUserWhereInput
  }

  export type VenueRatingUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VenueReservationUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VenueFavouriteUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type VenueScalarRelationFilter = {
    is?: VenueWhereInput
    isNot?: VenueWhereInput
  }

  export type VenueFavouriteUserUserIdVenueIdCompoundUniqueInput = {
    userId: number
    venueId: number
  }

  export type VenueFavouriteUserCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    venueId?: SortOrder
  }

  export type VenueFavouriteUserAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    venueId?: SortOrder
  }

  export type VenueFavouriteUserMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    venueId?: SortOrder
  }

  export type VenueFavouriteUserMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    venueId?: SortOrder
  }

  export type VenueFavouriteUserSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    venueId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type VenueRatingUserCountOrderByAggregateInput = {
    id?: SortOrder
    venueId?: SortOrder
    userId?: SortOrder
    score?: SortOrder
    review?: SortOrder
  }

  export type VenueRatingUserAvgOrderByAggregateInput = {
    id?: SortOrder
    venueId?: SortOrder
    userId?: SortOrder
    score?: SortOrder
  }

  export type VenueRatingUserMaxOrderByAggregateInput = {
    id?: SortOrder
    venueId?: SortOrder
    userId?: SortOrder
    score?: SortOrder
    review?: SortOrder
  }

  export type VenueRatingUserMinOrderByAggregateInput = {
    id?: SortOrder
    venueId?: SortOrder
    userId?: SortOrder
    score?: SortOrder
    review?: SortOrder
  }

  export type VenueRatingUserSumOrderByAggregateInput = {
    id?: SortOrder
    venueId?: SortOrder
    userId?: SortOrder
    score?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumStatusEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusEnum | EnumStatusEnumFieldRefInput<$PrismaModel>
    in?: $Enums.StatusEnum[] | ListEnumStatusEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusEnum[] | ListEnumStatusEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusEnumFilter<$PrismaModel> | $Enums.StatusEnum
  }

  export type VenueReservationUserCountOrderByAggregateInput = {
    id?: SortOrder
    venueId?: SortOrder
    userId?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
    status?: SortOrder
  }

  export type VenueReservationUserAvgOrderByAggregateInput = {
    id?: SortOrder
    venueId?: SortOrder
    userId?: SortOrder
  }

  export type VenueReservationUserMaxOrderByAggregateInput = {
    id?: SortOrder
    venueId?: SortOrder
    userId?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
    status?: SortOrder
  }

  export type VenueReservationUserMinOrderByAggregateInput = {
    id?: SortOrder
    venueId?: SortOrder
    userId?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
    status?: SortOrder
  }

  export type VenueReservationUserSumOrderByAggregateInput = {
    id?: SortOrder
    venueId?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumStatusEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusEnum | EnumStatusEnumFieldRefInput<$PrismaModel>
    in?: $Enums.StatusEnum[] | ListEnumStatusEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusEnum[] | ListEnumStatusEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusEnumWithAggregatesFilter<$PrismaModel> | $Enums.StatusEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusEnumFilter<$PrismaModel>
    _max?: NestedEnumStatusEnumFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type VenueCountOrderByAggregateInput = {
    id?: SortOrder
    pricePerNightInEURCent?: SortOrder
    rating?: SortOrder
    capacity?: SortOrder
    amountsOfBeds?: SortOrder
    extraSleepingDetails?: SortOrder
    name?: SortOrder
    images?: SortOrder
    description?: SortOrder
    checkInHour?: SortOrder
    checkOutHour?: SortOrder
    distanceFromCityCenterInM?: SortOrder
    facebookUrl?: SortOrder
    instagramUrl?: SortOrder
    twitterUrl?: SortOrder
    websiteUrl?: SortOrder
    streetNumber?: SortOrder
    streetName?: SortOrder
    postalCode?: SortOrder
    city?: SortOrder
    ownerId?: SortOrder
  }

  export type VenueAvgOrderByAggregateInput = {
    id?: SortOrder
    pricePerNightInEURCent?: SortOrder
    rating?: SortOrder
    capacity?: SortOrder
    amountsOfBeds?: SortOrder
    checkInHour?: SortOrder
    checkOutHour?: SortOrder
    distanceFromCityCenterInM?: SortOrder
    ownerId?: SortOrder
  }

  export type VenueMaxOrderByAggregateInput = {
    id?: SortOrder
    pricePerNightInEURCent?: SortOrder
    rating?: SortOrder
    capacity?: SortOrder
    amountsOfBeds?: SortOrder
    extraSleepingDetails?: SortOrder
    name?: SortOrder
    description?: SortOrder
    checkInHour?: SortOrder
    checkOutHour?: SortOrder
    distanceFromCityCenterInM?: SortOrder
    facebookUrl?: SortOrder
    instagramUrl?: SortOrder
    twitterUrl?: SortOrder
    websiteUrl?: SortOrder
    streetNumber?: SortOrder
    streetName?: SortOrder
    postalCode?: SortOrder
    city?: SortOrder
    ownerId?: SortOrder
  }

  export type VenueMinOrderByAggregateInput = {
    id?: SortOrder
    pricePerNightInEURCent?: SortOrder
    rating?: SortOrder
    capacity?: SortOrder
    amountsOfBeds?: SortOrder
    extraSleepingDetails?: SortOrder
    name?: SortOrder
    description?: SortOrder
    checkInHour?: SortOrder
    checkOutHour?: SortOrder
    distanceFromCityCenterInM?: SortOrder
    facebookUrl?: SortOrder
    instagramUrl?: SortOrder
    twitterUrl?: SortOrder
    websiteUrl?: SortOrder
    streetNumber?: SortOrder
    streetName?: SortOrder
    postalCode?: SortOrder
    city?: SortOrder
    ownerId?: SortOrder
  }

  export type VenueSumOrderByAggregateInput = {
    id?: SortOrder
    pricePerNightInEURCent?: SortOrder
    rating?: SortOrder
    capacity?: SortOrder
    amountsOfBeds?: SortOrder
    checkInHour?: SortOrder
    checkOutHour?: SortOrder
    distanceFromCityCenterInM?: SortOrder
    ownerId?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type CategoryCreateNestedOneWithoutAmenitiesInput = {
    create?: XOR<CategoryCreateWithoutAmenitiesInput, CategoryUncheckedCreateWithoutAmenitiesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutAmenitiesInput
    connect?: CategoryWhereUniqueInput
  }

  export type OccasionCreateNestedManyWithoutAmenitiesInput = {
    create?: XOR<OccasionCreateWithoutAmenitiesInput, OccasionUncheckedCreateWithoutAmenitiesInput> | OccasionCreateWithoutAmenitiesInput[] | OccasionUncheckedCreateWithoutAmenitiesInput[]
    connectOrCreate?: OccasionCreateOrConnectWithoutAmenitiesInput | OccasionCreateOrConnectWithoutAmenitiesInput[]
    connect?: OccasionWhereUniqueInput | OccasionWhereUniqueInput[]
  }

  export type VenueCreateNestedManyWithoutAmenitiesInput = {
    create?: XOR<VenueCreateWithoutAmenitiesInput, VenueUncheckedCreateWithoutAmenitiesInput> | VenueCreateWithoutAmenitiesInput[] | VenueUncheckedCreateWithoutAmenitiesInput[]
    connectOrCreate?: VenueCreateOrConnectWithoutAmenitiesInput | VenueCreateOrConnectWithoutAmenitiesInput[]
    connect?: VenueWhereUniqueInput | VenueWhereUniqueInput[]
  }

  export type OccasionUncheckedCreateNestedManyWithoutAmenitiesInput = {
    create?: XOR<OccasionCreateWithoutAmenitiesInput, OccasionUncheckedCreateWithoutAmenitiesInput> | OccasionCreateWithoutAmenitiesInput[] | OccasionUncheckedCreateWithoutAmenitiesInput[]
    connectOrCreate?: OccasionCreateOrConnectWithoutAmenitiesInput | OccasionCreateOrConnectWithoutAmenitiesInput[]
    connect?: OccasionWhereUniqueInput | OccasionWhereUniqueInput[]
  }

  export type VenueUncheckedCreateNestedManyWithoutAmenitiesInput = {
    create?: XOR<VenueCreateWithoutAmenitiesInput, VenueUncheckedCreateWithoutAmenitiesInput> | VenueCreateWithoutAmenitiesInput[] | VenueUncheckedCreateWithoutAmenitiesInput[]
    connectOrCreate?: VenueCreateOrConnectWithoutAmenitiesInput | VenueCreateOrConnectWithoutAmenitiesInput[]
    connect?: VenueWhereUniqueInput | VenueWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type CategoryUpdateOneRequiredWithoutAmenitiesNestedInput = {
    create?: XOR<CategoryCreateWithoutAmenitiesInput, CategoryUncheckedCreateWithoutAmenitiesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutAmenitiesInput
    upsert?: CategoryUpsertWithoutAmenitiesInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutAmenitiesInput, CategoryUpdateWithoutAmenitiesInput>, CategoryUncheckedUpdateWithoutAmenitiesInput>
  }

  export type OccasionUpdateManyWithoutAmenitiesNestedInput = {
    create?: XOR<OccasionCreateWithoutAmenitiesInput, OccasionUncheckedCreateWithoutAmenitiesInput> | OccasionCreateWithoutAmenitiesInput[] | OccasionUncheckedCreateWithoutAmenitiesInput[]
    connectOrCreate?: OccasionCreateOrConnectWithoutAmenitiesInput | OccasionCreateOrConnectWithoutAmenitiesInput[]
    upsert?: OccasionUpsertWithWhereUniqueWithoutAmenitiesInput | OccasionUpsertWithWhereUniqueWithoutAmenitiesInput[]
    set?: OccasionWhereUniqueInput | OccasionWhereUniqueInput[]
    disconnect?: OccasionWhereUniqueInput | OccasionWhereUniqueInput[]
    delete?: OccasionWhereUniqueInput | OccasionWhereUniqueInput[]
    connect?: OccasionWhereUniqueInput | OccasionWhereUniqueInput[]
    update?: OccasionUpdateWithWhereUniqueWithoutAmenitiesInput | OccasionUpdateWithWhereUniqueWithoutAmenitiesInput[]
    updateMany?: OccasionUpdateManyWithWhereWithoutAmenitiesInput | OccasionUpdateManyWithWhereWithoutAmenitiesInput[]
    deleteMany?: OccasionScalarWhereInput | OccasionScalarWhereInput[]
  }

  export type VenueUpdateManyWithoutAmenitiesNestedInput = {
    create?: XOR<VenueCreateWithoutAmenitiesInput, VenueUncheckedCreateWithoutAmenitiesInput> | VenueCreateWithoutAmenitiesInput[] | VenueUncheckedCreateWithoutAmenitiesInput[]
    connectOrCreate?: VenueCreateOrConnectWithoutAmenitiesInput | VenueCreateOrConnectWithoutAmenitiesInput[]
    upsert?: VenueUpsertWithWhereUniqueWithoutAmenitiesInput | VenueUpsertWithWhereUniqueWithoutAmenitiesInput[]
    set?: VenueWhereUniqueInput | VenueWhereUniqueInput[]
    disconnect?: VenueWhereUniqueInput | VenueWhereUniqueInput[]
    delete?: VenueWhereUniqueInput | VenueWhereUniqueInput[]
    connect?: VenueWhereUniqueInput | VenueWhereUniqueInput[]
    update?: VenueUpdateWithWhereUniqueWithoutAmenitiesInput | VenueUpdateWithWhereUniqueWithoutAmenitiesInput[]
    updateMany?: VenueUpdateManyWithWhereWithoutAmenitiesInput | VenueUpdateManyWithWhereWithoutAmenitiesInput[]
    deleteMany?: VenueScalarWhereInput | VenueScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OccasionUncheckedUpdateManyWithoutAmenitiesNestedInput = {
    create?: XOR<OccasionCreateWithoutAmenitiesInput, OccasionUncheckedCreateWithoutAmenitiesInput> | OccasionCreateWithoutAmenitiesInput[] | OccasionUncheckedCreateWithoutAmenitiesInput[]
    connectOrCreate?: OccasionCreateOrConnectWithoutAmenitiesInput | OccasionCreateOrConnectWithoutAmenitiesInput[]
    upsert?: OccasionUpsertWithWhereUniqueWithoutAmenitiesInput | OccasionUpsertWithWhereUniqueWithoutAmenitiesInput[]
    set?: OccasionWhereUniqueInput | OccasionWhereUniqueInput[]
    disconnect?: OccasionWhereUniqueInput | OccasionWhereUniqueInput[]
    delete?: OccasionWhereUniqueInput | OccasionWhereUniqueInput[]
    connect?: OccasionWhereUniqueInput | OccasionWhereUniqueInput[]
    update?: OccasionUpdateWithWhereUniqueWithoutAmenitiesInput | OccasionUpdateWithWhereUniqueWithoutAmenitiesInput[]
    updateMany?: OccasionUpdateManyWithWhereWithoutAmenitiesInput | OccasionUpdateManyWithWhereWithoutAmenitiesInput[]
    deleteMany?: OccasionScalarWhereInput | OccasionScalarWhereInput[]
  }

  export type VenueUncheckedUpdateManyWithoutAmenitiesNestedInput = {
    create?: XOR<VenueCreateWithoutAmenitiesInput, VenueUncheckedCreateWithoutAmenitiesInput> | VenueCreateWithoutAmenitiesInput[] | VenueUncheckedCreateWithoutAmenitiesInput[]
    connectOrCreate?: VenueCreateOrConnectWithoutAmenitiesInput | VenueCreateOrConnectWithoutAmenitiesInput[]
    upsert?: VenueUpsertWithWhereUniqueWithoutAmenitiesInput | VenueUpsertWithWhereUniqueWithoutAmenitiesInput[]
    set?: VenueWhereUniqueInput | VenueWhereUniqueInput[]
    disconnect?: VenueWhereUniqueInput | VenueWhereUniqueInput[]
    delete?: VenueWhereUniqueInput | VenueWhereUniqueInput[]
    connect?: VenueWhereUniqueInput | VenueWhereUniqueInput[]
    update?: VenueUpdateWithWhereUniqueWithoutAmenitiesInput | VenueUpdateWithWhereUniqueWithoutAmenitiesInput[]
    updateMany?: VenueUpdateManyWithWhereWithoutAmenitiesInput | VenueUpdateManyWithWhereWithoutAmenitiesInput[]
    deleteMany?: VenueScalarWhereInput | VenueScalarWhereInput[]
  }

  export type AmenityCreateNestedManyWithoutCategoryInput = {
    create?: XOR<AmenityCreateWithoutCategoryInput, AmenityUncheckedCreateWithoutCategoryInput> | AmenityCreateWithoutCategoryInput[] | AmenityUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: AmenityCreateOrConnectWithoutCategoryInput | AmenityCreateOrConnectWithoutCategoryInput[]
    createMany?: AmenityCreateManyCategoryInputEnvelope
    connect?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
  }

  export type AmenityUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<AmenityCreateWithoutCategoryInput, AmenityUncheckedCreateWithoutCategoryInput> | AmenityCreateWithoutCategoryInput[] | AmenityUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: AmenityCreateOrConnectWithoutCategoryInput | AmenityCreateOrConnectWithoutCategoryInput[]
    createMany?: AmenityCreateManyCategoryInputEnvelope
    connect?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
  }

  export type AmenityUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<AmenityCreateWithoutCategoryInput, AmenityUncheckedCreateWithoutCategoryInput> | AmenityCreateWithoutCategoryInput[] | AmenityUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: AmenityCreateOrConnectWithoutCategoryInput | AmenityCreateOrConnectWithoutCategoryInput[]
    upsert?: AmenityUpsertWithWhereUniqueWithoutCategoryInput | AmenityUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: AmenityCreateManyCategoryInputEnvelope
    set?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    disconnect?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    delete?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    connect?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    update?: AmenityUpdateWithWhereUniqueWithoutCategoryInput | AmenityUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: AmenityUpdateManyWithWhereWithoutCategoryInput | AmenityUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: AmenityScalarWhereInput | AmenityScalarWhereInput[]
  }

  export type AmenityUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<AmenityCreateWithoutCategoryInput, AmenityUncheckedCreateWithoutCategoryInput> | AmenityCreateWithoutCategoryInput[] | AmenityUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: AmenityCreateOrConnectWithoutCategoryInput | AmenityCreateOrConnectWithoutCategoryInput[]
    upsert?: AmenityUpsertWithWhereUniqueWithoutCategoryInput | AmenityUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: AmenityCreateManyCategoryInputEnvelope
    set?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    disconnect?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    delete?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    connect?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    update?: AmenityUpdateWithWhereUniqueWithoutCategoryInput | AmenityUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: AmenityUpdateManyWithWhereWithoutCategoryInput | AmenityUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: AmenityScalarWhereInput | AmenityScalarWhereInput[]
  }

  export type AmenityCreateNestedManyWithoutOccasionsInput = {
    create?: XOR<AmenityCreateWithoutOccasionsInput, AmenityUncheckedCreateWithoutOccasionsInput> | AmenityCreateWithoutOccasionsInput[] | AmenityUncheckedCreateWithoutOccasionsInput[]
    connectOrCreate?: AmenityCreateOrConnectWithoutOccasionsInput | AmenityCreateOrConnectWithoutOccasionsInput[]
    connect?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
  }

  export type AmenityUncheckedCreateNestedManyWithoutOccasionsInput = {
    create?: XOR<AmenityCreateWithoutOccasionsInput, AmenityUncheckedCreateWithoutOccasionsInput> | AmenityCreateWithoutOccasionsInput[] | AmenityUncheckedCreateWithoutOccasionsInput[]
    connectOrCreate?: AmenityCreateOrConnectWithoutOccasionsInput | AmenityCreateOrConnectWithoutOccasionsInput[]
    connect?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
  }

  export type AmenityUpdateManyWithoutOccasionsNestedInput = {
    create?: XOR<AmenityCreateWithoutOccasionsInput, AmenityUncheckedCreateWithoutOccasionsInput> | AmenityCreateWithoutOccasionsInput[] | AmenityUncheckedCreateWithoutOccasionsInput[]
    connectOrCreate?: AmenityCreateOrConnectWithoutOccasionsInput | AmenityCreateOrConnectWithoutOccasionsInput[]
    upsert?: AmenityUpsertWithWhereUniqueWithoutOccasionsInput | AmenityUpsertWithWhereUniqueWithoutOccasionsInput[]
    set?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    disconnect?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    delete?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    connect?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    update?: AmenityUpdateWithWhereUniqueWithoutOccasionsInput | AmenityUpdateWithWhereUniqueWithoutOccasionsInput[]
    updateMany?: AmenityUpdateManyWithWhereWithoutOccasionsInput | AmenityUpdateManyWithWhereWithoutOccasionsInput[]
    deleteMany?: AmenityScalarWhereInput | AmenityScalarWhereInput[]
  }

  export type AmenityUncheckedUpdateManyWithoutOccasionsNestedInput = {
    create?: XOR<AmenityCreateWithoutOccasionsInput, AmenityUncheckedCreateWithoutOccasionsInput> | AmenityCreateWithoutOccasionsInput[] | AmenityUncheckedCreateWithoutOccasionsInput[]
    connectOrCreate?: AmenityCreateOrConnectWithoutOccasionsInput | AmenityCreateOrConnectWithoutOccasionsInput[]
    upsert?: AmenityUpsertWithWhereUniqueWithoutOccasionsInput | AmenityUpsertWithWhereUniqueWithoutOccasionsInput[]
    set?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    disconnect?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    delete?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    connect?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    update?: AmenityUpdateWithWhereUniqueWithoutOccasionsInput | AmenityUpdateWithWhereUniqueWithoutOccasionsInput[]
    updateMany?: AmenityUpdateManyWithWhereWithoutOccasionsInput | AmenityUpdateManyWithWhereWithoutOccasionsInput[]
    deleteMany?: AmenityScalarWhereInput | AmenityScalarWhereInput[]
  }

  export type VenueCreateNestedManyWithoutOwnerInput = {
    create?: XOR<VenueCreateWithoutOwnerInput, VenueUncheckedCreateWithoutOwnerInput> | VenueCreateWithoutOwnerInput[] | VenueUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: VenueCreateOrConnectWithoutOwnerInput | VenueCreateOrConnectWithoutOwnerInput[]
    createMany?: VenueCreateManyOwnerInputEnvelope
    connect?: VenueWhereUniqueInput | VenueWhereUniqueInput[]
  }

  export type VenueRatingUserCreateNestedManyWithoutUserInput = {
    create?: XOR<VenueRatingUserCreateWithoutUserInput, VenueRatingUserUncheckedCreateWithoutUserInput> | VenueRatingUserCreateWithoutUserInput[] | VenueRatingUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VenueRatingUserCreateOrConnectWithoutUserInput | VenueRatingUserCreateOrConnectWithoutUserInput[]
    createMany?: VenueRatingUserCreateManyUserInputEnvelope
    connect?: VenueRatingUserWhereUniqueInput | VenueRatingUserWhereUniqueInput[]
  }

  export type VenueReservationUserCreateNestedManyWithoutUserInput = {
    create?: XOR<VenueReservationUserCreateWithoutUserInput, VenueReservationUserUncheckedCreateWithoutUserInput> | VenueReservationUserCreateWithoutUserInput[] | VenueReservationUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VenueReservationUserCreateOrConnectWithoutUserInput | VenueReservationUserCreateOrConnectWithoutUserInput[]
    createMany?: VenueReservationUserCreateManyUserInputEnvelope
    connect?: VenueReservationUserWhereUniqueInput | VenueReservationUserWhereUniqueInput[]
  }

  export type VenueFavouriteUserCreateNestedManyWithoutUserInput = {
    create?: XOR<VenueFavouriteUserCreateWithoutUserInput, VenueFavouriteUserUncheckedCreateWithoutUserInput> | VenueFavouriteUserCreateWithoutUserInput[] | VenueFavouriteUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VenueFavouriteUserCreateOrConnectWithoutUserInput | VenueFavouriteUserCreateOrConnectWithoutUserInput[]
    createMany?: VenueFavouriteUserCreateManyUserInputEnvelope
    connect?: VenueFavouriteUserWhereUniqueInput | VenueFavouriteUserWhereUniqueInput[]
  }

  export type VenueUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<VenueCreateWithoutOwnerInput, VenueUncheckedCreateWithoutOwnerInput> | VenueCreateWithoutOwnerInput[] | VenueUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: VenueCreateOrConnectWithoutOwnerInput | VenueCreateOrConnectWithoutOwnerInput[]
    createMany?: VenueCreateManyOwnerInputEnvelope
    connect?: VenueWhereUniqueInput | VenueWhereUniqueInput[]
  }

  export type VenueRatingUserUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<VenueRatingUserCreateWithoutUserInput, VenueRatingUserUncheckedCreateWithoutUserInput> | VenueRatingUserCreateWithoutUserInput[] | VenueRatingUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VenueRatingUserCreateOrConnectWithoutUserInput | VenueRatingUserCreateOrConnectWithoutUserInput[]
    createMany?: VenueRatingUserCreateManyUserInputEnvelope
    connect?: VenueRatingUserWhereUniqueInput | VenueRatingUserWhereUniqueInput[]
  }

  export type VenueReservationUserUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<VenueReservationUserCreateWithoutUserInput, VenueReservationUserUncheckedCreateWithoutUserInput> | VenueReservationUserCreateWithoutUserInput[] | VenueReservationUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VenueReservationUserCreateOrConnectWithoutUserInput | VenueReservationUserCreateOrConnectWithoutUserInput[]
    createMany?: VenueReservationUserCreateManyUserInputEnvelope
    connect?: VenueReservationUserWhereUniqueInput | VenueReservationUserWhereUniqueInput[]
  }

  export type VenueFavouriteUserUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<VenueFavouriteUserCreateWithoutUserInput, VenueFavouriteUserUncheckedCreateWithoutUserInput> | VenueFavouriteUserCreateWithoutUserInput[] | VenueFavouriteUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VenueFavouriteUserCreateOrConnectWithoutUserInput | VenueFavouriteUserCreateOrConnectWithoutUserInput[]
    createMany?: VenueFavouriteUserCreateManyUserInputEnvelope
    connect?: VenueFavouriteUserWhereUniqueInput | VenueFavouriteUserWhereUniqueInput[]
  }

  export type VenueUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<VenueCreateWithoutOwnerInput, VenueUncheckedCreateWithoutOwnerInput> | VenueCreateWithoutOwnerInput[] | VenueUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: VenueCreateOrConnectWithoutOwnerInput | VenueCreateOrConnectWithoutOwnerInput[]
    upsert?: VenueUpsertWithWhereUniqueWithoutOwnerInput | VenueUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: VenueCreateManyOwnerInputEnvelope
    set?: VenueWhereUniqueInput | VenueWhereUniqueInput[]
    disconnect?: VenueWhereUniqueInput | VenueWhereUniqueInput[]
    delete?: VenueWhereUniqueInput | VenueWhereUniqueInput[]
    connect?: VenueWhereUniqueInput | VenueWhereUniqueInput[]
    update?: VenueUpdateWithWhereUniqueWithoutOwnerInput | VenueUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: VenueUpdateManyWithWhereWithoutOwnerInput | VenueUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: VenueScalarWhereInput | VenueScalarWhereInput[]
  }

  export type VenueRatingUserUpdateManyWithoutUserNestedInput = {
    create?: XOR<VenueRatingUserCreateWithoutUserInput, VenueRatingUserUncheckedCreateWithoutUserInput> | VenueRatingUserCreateWithoutUserInput[] | VenueRatingUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VenueRatingUserCreateOrConnectWithoutUserInput | VenueRatingUserCreateOrConnectWithoutUserInput[]
    upsert?: VenueRatingUserUpsertWithWhereUniqueWithoutUserInput | VenueRatingUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VenueRatingUserCreateManyUserInputEnvelope
    set?: VenueRatingUserWhereUniqueInput | VenueRatingUserWhereUniqueInput[]
    disconnect?: VenueRatingUserWhereUniqueInput | VenueRatingUserWhereUniqueInput[]
    delete?: VenueRatingUserWhereUniqueInput | VenueRatingUserWhereUniqueInput[]
    connect?: VenueRatingUserWhereUniqueInput | VenueRatingUserWhereUniqueInput[]
    update?: VenueRatingUserUpdateWithWhereUniqueWithoutUserInput | VenueRatingUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VenueRatingUserUpdateManyWithWhereWithoutUserInput | VenueRatingUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VenueRatingUserScalarWhereInput | VenueRatingUserScalarWhereInput[]
  }

  export type VenueReservationUserUpdateManyWithoutUserNestedInput = {
    create?: XOR<VenueReservationUserCreateWithoutUserInput, VenueReservationUserUncheckedCreateWithoutUserInput> | VenueReservationUserCreateWithoutUserInput[] | VenueReservationUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VenueReservationUserCreateOrConnectWithoutUserInput | VenueReservationUserCreateOrConnectWithoutUserInput[]
    upsert?: VenueReservationUserUpsertWithWhereUniqueWithoutUserInput | VenueReservationUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VenueReservationUserCreateManyUserInputEnvelope
    set?: VenueReservationUserWhereUniqueInput | VenueReservationUserWhereUniqueInput[]
    disconnect?: VenueReservationUserWhereUniqueInput | VenueReservationUserWhereUniqueInput[]
    delete?: VenueReservationUserWhereUniqueInput | VenueReservationUserWhereUniqueInput[]
    connect?: VenueReservationUserWhereUniqueInput | VenueReservationUserWhereUniqueInput[]
    update?: VenueReservationUserUpdateWithWhereUniqueWithoutUserInput | VenueReservationUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VenueReservationUserUpdateManyWithWhereWithoutUserInput | VenueReservationUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VenueReservationUserScalarWhereInput | VenueReservationUserScalarWhereInput[]
  }

  export type VenueFavouriteUserUpdateManyWithoutUserNestedInput = {
    create?: XOR<VenueFavouriteUserCreateWithoutUserInput, VenueFavouriteUserUncheckedCreateWithoutUserInput> | VenueFavouriteUserCreateWithoutUserInput[] | VenueFavouriteUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VenueFavouriteUserCreateOrConnectWithoutUserInput | VenueFavouriteUserCreateOrConnectWithoutUserInput[]
    upsert?: VenueFavouriteUserUpsertWithWhereUniqueWithoutUserInput | VenueFavouriteUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VenueFavouriteUserCreateManyUserInputEnvelope
    set?: VenueFavouriteUserWhereUniqueInput | VenueFavouriteUserWhereUniqueInput[]
    disconnect?: VenueFavouriteUserWhereUniqueInput | VenueFavouriteUserWhereUniqueInput[]
    delete?: VenueFavouriteUserWhereUniqueInput | VenueFavouriteUserWhereUniqueInput[]
    connect?: VenueFavouriteUserWhereUniqueInput | VenueFavouriteUserWhereUniqueInput[]
    update?: VenueFavouriteUserUpdateWithWhereUniqueWithoutUserInput | VenueFavouriteUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VenueFavouriteUserUpdateManyWithWhereWithoutUserInput | VenueFavouriteUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VenueFavouriteUserScalarWhereInput | VenueFavouriteUserScalarWhereInput[]
  }

  export type VenueUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<VenueCreateWithoutOwnerInput, VenueUncheckedCreateWithoutOwnerInput> | VenueCreateWithoutOwnerInput[] | VenueUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: VenueCreateOrConnectWithoutOwnerInput | VenueCreateOrConnectWithoutOwnerInput[]
    upsert?: VenueUpsertWithWhereUniqueWithoutOwnerInput | VenueUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: VenueCreateManyOwnerInputEnvelope
    set?: VenueWhereUniqueInput | VenueWhereUniqueInput[]
    disconnect?: VenueWhereUniqueInput | VenueWhereUniqueInput[]
    delete?: VenueWhereUniqueInput | VenueWhereUniqueInput[]
    connect?: VenueWhereUniqueInput | VenueWhereUniqueInput[]
    update?: VenueUpdateWithWhereUniqueWithoutOwnerInput | VenueUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: VenueUpdateManyWithWhereWithoutOwnerInput | VenueUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: VenueScalarWhereInput | VenueScalarWhereInput[]
  }

  export type VenueRatingUserUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<VenueRatingUserCreateWithoutUserInput, VenueRatingUserUncheckedCreateWithoutUserInput> | VenueRatingUserCreateWithoutUserInput[] | VenueRatingUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VenueRatingUserCreateOrConnectWithoutUserInput | VenueRatingUserCreateOrConnectWithoutUserInput[]
    upsert?: VenueRatingUserUpsertWithWhereUniqueWithoutUserInput | VenueRatingUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VenueRatingUserCreateManyUserInputEnvelope
    set?: VenueRatingUserWhereUniqueInput | VenueRatingUserWhereUniqueInput[]
    disconnect?: VenueRatingUserWhereUniqueInput | VenueRatingUserWhereUniqueInput[]
    delete?: VenueRatingUserWhereUniqueInput | VenueRatingUserWhereUniqueInput[]
    connect?: VenueRatingUserWhereUniqueInput | VenueRatingUserWhereUniqueInput[]
    update?: VenueRatingUserUpdateWithWhereUniqueWithoutUserInput | VenueRatingUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VenueRatingUserUpdateManyWithWhereWithoutUserInput | VenueRatingUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VenueRatingUserScalarWhereInput | VenueRatingUserScalarWhereInput[]
  }

  export type VenueReservationUserUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<VenueReservationUserCreateWithoutUserInput, VenueReservationUserUncheckedCreateWithoutUserInput> | VenueReservationUserCreateWithoutUserInput[] | VenueReservationUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VenueReservationUserCreateOrConnectWithoutUserInput | VenueReservationUserCreateOrConnectWithoutUserInput[]
    upsert?: VenueReservationUserUpsertWithWhereUniqueWithoutUserInput | VenueReservationUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VenueReservationUserCreateManyUserInputEnvelope
    set?: VenueReservationUserWhereUniqueInput | VenueReservationUserWhereUniqueInput[]
    disconnect?: VenueReservationUserWhereUniqueInput | VenueReservationUserWhereUniqueInput[]
    delete?: VenueReservationUserWhereUniqueInput | VenueReservationUserWhereUniqueInput[]
    connect?: VenueReservationUserWhereUniqueInput | VenueReservationUserWhereUniqueInput[]
    update?: VenueReservationUserUpdateWithWhereUniqueWithoutUserInput | VenueReservationUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VenueReservationUserUpdateManyWithWhereWithoutUserInput | VenueReservationUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VenueReservationUserScalarWhereInput | VenueReservationUserScalarWhereInput[]
  }

  export type VenueFavouriteUserUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<VenueFavouriteUserCreateWithoutUserInput, VenueFavouriteUserUncheckedCreateWithoutUserInput> | VenueFavouriteUserCreateWithoutUserInput[] | VenueFavouriteUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VenueFavouriteUserCreateOrConnectWithoutUserInput | VenueFavouriteUserCreateOrConnectWithoutUserInput[]
    upsert?: VenueFavouriteUserUpsertWithWhereUniqueWithoutUserInput | VenueFavouriteUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VenueFavouriteUserCreateManyUserInputEnvelope
    set?: VenueFavouriteUserWhereUniqueInput | VenueFavouriteUserWhereUniqueInput[]
    disconnect?: VenueFavouriteUserWhereUniqueInput | VenueFavouriteUserWhereUniqueInput[]
    delete?: VenueFavouriteUserWhereUniqueInput | VenueFavouriteUserWhereUniqueInput[]
    connect?: VenueFavouriteUserWhereUniqueInput | VenueFavouriteUserWhereUniqueInput[]
    update?: VenueFavouriteUserUpdateWithWhereUniqueWithoutUserInput | VenueFavouriteUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VenueFavouriteUserUpdateManyWithWhereWithoutUserInput | VenueFavouriteUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VenueFavouriteUserScalarWhereInput | VenueFavouriteUserScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutVenueFavouriteUserInput = {
    create?: XOR<UserCreateWithoutVenueFavouriteUserInput, UserUncheckedCreateWithoutVenueFavouriteUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutVenueFavouriteUserInput
    connect?: UserWhereUniqueInput
  }

  export type VenueCreateNestedOneWithoutVenueFavouriteUserInput = {
    create?: XOR<VenueCreateWithoutVenueFavouriteUserInput, VenueUncheckedCreateWithoutVenueFavouriteUserInput>
    connectOrCreate?: VenueCreateOrConnectWithoutVenueFavouriteUserInput
    connect?: VenueWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutVenueFavouriteUserNestedInput = {
    create?: XOR<UserCreateWithoutVenueFavouriteUserInput, UserUncheckedCreateWithoutVenueFavouriteUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutVenueFavouriteUserInput
    upsert?: UserUpsertWithoutVenueFavouriteUserInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVenueFavouriteUserInput, UserUpdateWithoutVenueFavouriteUserInput>, UserUncheckedUpdateWithoutVenueFavouriteUserInput>
  }

  export type VenueUpdateOneRequiredWithoutVenueFavouriteUserNestedInput = {
    create?: XOR<VenueCreateWithoutVenueFavouriteUserInput, VenueUncheckedCreateWithoutVenueFavouriteUserInput>
    connectOrCreate?: VenueCreateOrConnectWithoutVenueFavouriteUserInput
    upsert?: VenueUpsertWithoutVenueFavouriteUserInput
    connect?: VenueWhereUniqueInput
    update?: XOR<XOR<VenueUpdateToOneWithWhereWithoutVenueFavouriteUserInput, VenueUpdateWithoutVenueFavouriteUserInput>, VenueUncheckedUpdateWithoutVenueFavouriteUserInput>
  }

  export type VenueCreateNestedOneWithoutVenueRatingUserInput = {
    create?: XOR<VenueCreateWithoutVenueRatingUserInput, VenueUncheckedCreateWithoutVenueRatingUserInput>
    connectOrCreate?: VenueCreateOrConnectWithoutVenueRatingUserInput
    connect?: VenueWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutVenueRatingUserInput = {
    create?: XOR<UserCreateWithoutVenueRatingUserInput, UserUncheckedCreateWithoutVenueRatingUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutVenueRatingUserInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type VenueUpdateOneRequiredWithoutVenueRatingUserNestedInput = {
    create?: XOR<VenueCreateWithoutVenueRatingUserInput, VenueUncheckedCreateWithoutVenueRatingUserInput>
    connectOrCreate?: VenueCreateOrConnectWithoutVenueRatingUserInput
    upsert?: VenueUpsertWithoutVenueRatingUserInput
    connect?: VenueWhereUniqueInput
    update?: XOR<XOR<VenueUpdateToOneWithWhereWithoutVenueRatingUserInput, VenueUpdateWithoutVenueRatingUserInput>, VenueUncheckedUpdateWithoutVenueRatingUserInput>
  }

  export type UserUpdateOneRequiredWithoutVenueRatingUserNestedInput = {
    create?: XOR<UserCreateWithoutVenueRatingUserInput, UserUncheckedCreateWithoutVenueRatingUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutVenueRatingUserInput
    upsert?: UserUpsertWithoutVenueRatingUserInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVenueRatingUserInput, UserUpdateWithoutVenueRatingUserInput>, UserUncheckedUpdateWithoutVenueRatingUserInput>
  }

  export type VenueCreateNestedOneWithoutVenueReservationUserInput = {
    create?: XOR<VenueCreateWithoutVenueReservationUserInput, VenueUncheckedCreateWithoutVenueReservationUserInput>
    connectOrCreate?: VenueCreateOrConnectWithoutVenueReservationUserInput
    connect?: VenueWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutVenueReservationUserInput = {
    create?: XOR<UserCreateWithoutVenueReservationUserInput, UserUncheckedCreateWithoutVenueReservationUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutVenueReservationUserInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumStatusEnumFieldUpdateOperationsInput = {
    set?: $Enums.StatusEnum
  }

  export type VenueUpdateOneRequiredWithoutVenueReservationUserNestedInput = {
    create?: XOR<VenueCreateWithoutVenueReservationUserInput, VenueUncheckedCreateWithoutVenueReservationUserInput>
    connectOrCreate?: VenueCreateOrConnectWithoutVenueReservationUserInput
    upsert?: VenueUpsertWithoutVenueReservationUserInput
    connect?: VenueWhereUniqueInput
    update?: XOR<XOR<VenueUpdateToOneWithWhereWithoutVenueReservationUserInput, VenueUpdateWithoutVenueReservationUserInput>, VenueUncheckedUpdateWithoutVenueReservationUserInput>
  }

  export type UserUpdateOneRequiredWithoutVenueReservationUserNestedInput = {
    create?: XOR<UserCreateWithoutVenueReservationUserInput, UserUncheckedCreateWithoutVenueReservationUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutVenueReservationUserInput
    upsert?: UserUpsertWithoutVenueReservationUserInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVenueReservationUserInput, UserUpdateWithoutVenueReservationUserInput>, UserUncheckedUpdateWithoutVenueReservationUserInput>
  }

  export type UserCreateNestedOneWithoutVenuesInput = {
    create?: XOR<UserCreateWithoutVenuesInput, UserUncheckedCreateWithoutVenuesInput>
    connectOrCreate?: UserCreateOrConnectWithoutVenuesInput
    connect?: UserWhereUniqueInput
  }

  export type AmenityCreateNestedManyWithoutVenuesInput = {
    create?: XOR<AmenityCreateWithoutVenuesInput, AmenityUncheckedCreateWithoutVenuesInput> | AmenityCreateWithoutVenuesInput[] | AmenityUncheckedCreateWithoutVenuesInput[]
    connectOrCreate?: AmenityCreateOrConnectWithoutVenuesInput | AmenityCreateOrConnectWithoutVenuesInput[]
    connect?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
  }

  export type VenueRatingUserCreateNestedManyWithoutVenueInput = {
    create?: XOR<VenueRatingUserCreateWithoutVenueInput, VenueRatingUserUncheckedCreateWithoutVenueInput> | VenueRatingUserCreateWithoutVenueInput[] | VenueRatingUserUncheckedCreateWithoutVenueInput[]
    connectOrCreate?: VenueRatingUserCreateOrConnectWithoutVenueInput | VenueRatingUserCreateOrConnectWithoutVenueInput[]
    createMany?: VenueRatingUserCreateManyVenueInputEnvelope
    connect?: VenueRatingUserWhereUniqueInput | VenueRatingUserWhereUniqueInput[]
  }

  export type VenueReservationUserCreateNestedManyWithoutVenueInput = {
    create?: XOR<VenueReservationUserCreateWithoutVenueInput, VenueReservationUserUncheckedCreateWithoutVenueInput> | VenueReservationUserCreateWithoutVenueInput[] | VenueReservationUserUncheckedCreateWithoutVenueInput[]
    connectOrCreate?: VenueReservationUserCreateOrConnectWithoutVenueInput | VenueReservationUserCreateOrConnectWithoutVenueInput[]
    createMany?: VenueReservationUserCreateManyVenueInputEnvelope
    connect?: VenueReservationUserWhereUniqueInput | VenueReservationUserWhereUniqueInput[]
  }

  export type VenueFavouriteUserCreateNestedManyWithoutVenueInput = {
    create?: XOR<VenueFavouriteUserCreateWithoutVenueInput, VenueFavouriteUserUncheckedCreateWithoutVenueInput> | VenueFavouriteUserCreateWithoutVenueInput[] | VenueFavouriteUserUncheckedCreateWithoutVenueInput[]
    connectOrCreate?: VenueFavouriteUserCreateOrConnectWithoutVenueInput | VenueFavouriteUserCreateOrConnectWithoutVenueInput[]
    createMany?: VenueFavouriteUserCreateManyVenueInputEnvelope
    connect?: VenueFavouriteUserWhereUniqueInput | VenueFavouriteUserWhereUniqueInput[]
  }

  export type AmenityUncheckedCreateNestedManyWithoutVenuesInput = {
    create?: XOR<AmenityCreateWithoutVenuesInput, AmenityUncheckedCreateWithoutVenuesInput> | AmenityCreateWithoutVenuesInput[] | AmenityUncheckedCreateWithoutVenuesInput[]
    connectOrCreate?: AmenityCreateOrConnectWithoutVenuesInput | AmenityCreateOrConnectWithoutVenuesInput[]
    connect?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
  }

  export type VenueRatingUserUncheckedCreateNestedManyWithoutVenueInput = {
    create?: XOR<VenueRatingUserCreateWithoutVenueInput, VenueRatingUserUncheckedCreateWithoutVenueInput> | VenueRatingUserCreateWithoutVenueInput[] | VenueRatingUserUncheckedCreateWithoutVenueInput[]
    connectOrCreate?: VenueRatingUserCreateOrConnectWithoutVenueInput | VenueRatingUserCreateOrConnectWithoutVenueInput[]
    createMany?: VenueRatingUserCreateManyVenueInputEnvelope
    connect?: VenueRatingUserWhereUniqueInput | VenueRatingUserWhereUniqueInput[]
  }

  export type VenueReservationUserUncheckedCreateNestedManyWithoutVenueInput = {
    create?: XOR<VenueReservationUserCreateWithoutVenueInput, VenueReservationUserUncheckedCreateWithoutVenueInput> | VenueReservationUserCreateWithoutVenueInput[] | VenueReservationUserUncheckedCreateWithoutVenueInput[]
    connectOrCreate?: VenueReservationUserCreateOrConnectWithoutVenueInput | VenueReservationUserCreateOrConnectWithoutVenueInput[]
    createMany?: VenueReservationUserCreateManyVenueInputEnvelope
    connect?: VenueReservationUserWhereUniqueInput | VenueReservationUserWhereUniqueInput[]
  }

  export type VenueFavouriteUserUncheckedCreateNestedManyWithoutVenueInput = {
    create?: XOR<VenueFavouriteUserCreateWithoutVenueInput, VenueFavouriteUserUncheckedCreateWithoutVenueInput> | VenueFavouriteUserCreateWithoutVenueInput[] | VenueFavouriteUserUncheckedCreateWithoutVenueInput[]
    connectOrCreate?: VenueFavouriteUserCreateOrConnectWithoutVenueInput | VenueFavouriteUserCreateOrConnectWithoutVenueInput[]
    createMany?: VenueFavouriteUserCreateManyVenueInputEnvelope
    connect?: VenueFavouriteUserWhereUniqueInput | VenueFavouriteUserWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutVenuesNestedInput = {
    create?: XOR<UserCreateWithoutVenuesInput, UserUncheckedCreateWithoutVenuesInput>
    connectOrCreate?: UserCreateOrConnectWithoutVenuesInput
    upsert?: UserUpsertWithoutVenuesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVenuesInput, UserUpdateWithoutVenuesInput>, UserUncheckedUpdateWithoutVenuesInput>
  }

  export type AmenityUpdateManyWithoutVenuesNestedInput = {
    create?: XOR<AmenityCreateWithoutVenuesInput, AmenityUncheckedCreateWithoutVenuesInput> | AmenityCreateWithoutVenuesInput[] | AmenityUncheckedCreateWithoutVenuesInput[]
    connectOrCreate?: AmenityCreateOrConnectWithoutVenuesInput | AmenityCreateOrConnectWithoutVenuesInput[]
    upsert?: AmenityUpsertWithWhereUniqueWithoutVenuesInput | AmenityUpsertWithWhereUniqueWithoutVenuesInput[]
    set?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    disconnect?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    delete?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    connect?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    update?: AmenityUpdateWithWhereUniqueWithoutVenuesInput | AmenityUpdateWithWhereUniqueWithoutVenuesInput[]
    updateMany?: AmenityUpdateManyWithWhereWithoutVenuesInput | AmenityUpdateManyWithWhereWithoutVenuesInput[]
    deleteMany?: AmenityScalarWhereInput | AmenityScalarWhereInput[]
  }

  export type VenueRatingUserUpdateManyWithoutVenueNestedInput = {
    create?: XOR<VenueRatingUserCreateWithoutVenueInput, VenueRatingUserUncheckedCreateWithoutVenueInput> | VenueRatingUserCreateWithoutVenueInput[] | VenueRatingUserUncheckedCreateWithoutVenueInput[]
    connectOrCreate?: VenueRatingUserCreateOrConnectWithoutVenueInput | VenueRatingUserCreateOrConnectWithoutVenueInput[]
    upsert?: VenueRatingUserUpsertWithWhereUniqueWithoutVenueInput | VenueRatingUserUpsertWithWhereUniqueWithoutVenueInput[]
    createMany?: VenueRatingUserCreateManyVenueInputEnvelope
    set?: VenueRatingUserWhereUniqueInput | VenueRatingUserWhereUniqueInput[]
    disconnect?: VenueRatingUserWhereUniqueInput | VenueRatingUserWhereUniqueInput[]
    delete?: VenueRatingUserWhereUniqueInput | VenueRatingUserWhereUniqueInput[]
    connect?: VenueRatingUserWhereUniqueInput | VenueRatingUserWhereUniqueInput[]
    update?: VenueRatingUserUpdateWithWhereUniqueWithoutVenueInput | VenueRatingUserUpdateWithWhereUniqueWithoutVenueInput[]
    updateMany?: VenueRatingUserUpdateManyWithWhereWithoutVenueInput | VenueRatingUserUpdateManyWithWhereWithoutVenueInput[]
    deleteMany?: VenueRatingUserScalarWhereInput | VenueRatingUserScalarWhereInput[]
  }

  export type VenueReservationUserUpdateManyWithoutVenueNestedInput = {
    create?: XOR<VenueReservationUserCreateWithoutVenueInput, VenueReservationUserUncheckedCreateWithoutVenueInput> | VenueReservationUserCreateWithoutVenueInput[] | VenueReservationUserUncheckedCreateWithoutVenueInput[]
    connectOrCreate?: VenueReservationUserCreateOrConnectWithoutVenueInput | VenueReservationUserCreateOrConnectWithoutVenueInput[]
    upsert?: VenueReservationUserUpsertWithWhereUniqueWithoutVenueInput | VenueReservationUserUpsertWithWhereUniqueWithoutVenueInput[]
    createMany?: VenueReservationUserCreateManyVenueInputEnvelope
    set?: VenueReservationUserWhereUniqueInput | VenueReservationUserWhereUniqueInput[]
    disconnect?: VenueReservationUserWhereUniqueInput | VenueReservationUserWhereUniqueInput[]
    delete?: VenueReservationUserWhereUniqueInput | VenueReservationUserWhereUniqueInput[]
    connect?: VenueReservationUserWhereUniqueInput | VenueReservationUserWhereUniqueInput[]
    update?: VenueReservationUserUpdateWithWhereUniqueWithoutVenueInput | VenueReservationUserUpdateWithWhereUniqueWithoutVenueInput[]
    updateMany?: VenueReservationUserUpdateManyWithWhereWithoutVenueInput | VenueReservationUserUpdateManyWithWhereWithoutVenueInput[]
    deleteMany?: VenueReservationUserScalarWhereInput | VenueReservationUserScalarWhereInput[]
  }

  export type VenueFavouriteUserUpdateManyWithoutVenueNestedInput = {
    create?: XOR<VenueFavouriteUserCreateWithoutVenueInput, VenueFavouriteUserUncheckedCreateWithoutVenueInput> | VenueFavouriteUserCreateWithoutVenueInput[] | VenueFavouriteUserUncheckedCreateWithoutVenueInput[]
    connectOrCreate?: VenueFavouriteUserCreateOrConnectWithoutVenueInput | VenueFavouriteUserCreateOrConnectWithoutVenueInput[]
    upsert?: VenueFavouriteUserUpsertWithWhereUniqueWithoutVenueInput | VenueFavouriteUserUpsertWithWhereUniqueWithoutVenueInput[]
    createMany?: VenueFavouriteUserCreateManyVenueInputEnvelope
    set?: VenueFavouriteUserWhereUniqueInput | VenueFavouriteUserWhereUniqueInput[]
    disconnect?: VenueFavouriteUserWhereUniqueInput | VenueFavouriteUserWhereUniqueInput[]
    delete?: VenueFavouriteUserWhereUniqueInput | VenueFavouriteUserWhereUniqueInput[]
    connect?: VenueFavouriteUserWhereUniqueInput | VenueFavouriteUserWhereUniqueInput[]
    update?: VenueFavouriteUserUpdateWithWhereUniqueWithoutVenueInput | VenueFavouriteUserUpdateWithWhereUniqueWithoutVenueInput[]
    updateMany?: VenueFavouriteUserUpdateManyWithWhereWithoutVenueInput | VenueFavouriteUserUpdateManyWithWhereWithoutVenueInput[]
    deleteMany?: VenueFavouriteUserScalarWhereInput | VenueFavouriteUserScalarWhereInput[]
  }

  export type AmenityUncheckedUpdateManyWithoutVenuesNestedInput = {
    create?: XOR<AmenityCreateWithoutVenuesInput, AmenityUncheckedCreateWithoutVenuesInput> | AmenityCreateWithoutVenuesInput[] | AmenityUncheckedCreateWithoutVenuesInput[]
    connectOrCreate?: AmenityCreateOrConnectWithoutVenuesInput | AmenityCreateOrConnectWithoutVenuesInput[]
    upsert?: AmenityUpsertWithWhereUniqueWithoutVenuesInput | AmenityUpsertWithWhereUniqueWithoutVenuesInput[]
    set?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    disconnect?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    delete?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    connect?: AmenityWhereUniqueInput | AmenityWhereUniqueInput[]
    update?: AmenityUpdateWithWhereUniqueWithoutVenuesInput | AmenityUpdateWithWhereUniqueWithoutVenuesInput[]
    updateMany?: AmenityUpdateManyWithWhereWithoutVenuesInput | AmenityUpdateManyWithWhereWithoutVenuesInput[]
    deleteMany?: AmenityScalarWhereInput | AmenityScalarWhereInput[]
  }

  export type VenueRatingUserUncheckedUpdateManyWithoutVenueNestedInput = {
    create?: XOR<VenueRatingUserCreateWithoutVenueInput, VenueRatingUserUncheckedCreateWithoutVenueInput> | VenueRatingUserCreateWithoutVenueInput[] | VenueRatingUserUncheckedCreateWithoutVenueInput[]
    connectOrCreate?: VenueRatingUserCreateOrConnectWithoutVenueInput | VenueRatingUserCreateOrConnectWithoutVenueInput[]
    upsert?: VenueRatingUserUpsertWithWhereUniqueWithoutVenueInput | VenueRatingUserUpsertWithWhereUniqueWithoutVenueInput[]
    createMany?: VenueRatingUserCreateManyVenueInputEnvelope
    set?: VenueRatingUserWhereUniqueInput | VenueRatingUserWhereUniqueInput[]
    disconnect?: VenueRatingUserWhereUniqueInput | VenueRatingUserWhereUniqueInput[]
    delete?: VenueRatingUserWhereUniqueInput | VenueRatingUserWhereUniqueInput[]
    connect?: VenueRatingUserWhereUniqueInput | VenueRatingUserWhereUniqueInput[]
    update?: VenueRatingUserUpdateWithWhereUniqueWithoutVenueInput | VenueRatingUserUpdateWithWhereUniqueWithoutVenueInput[]
    updateMany?: VenueRatingUserUpdateManyWithWhereWithoutVenueInput | VenueRatingUserUpdateManyWithWhereWithoutVenueInput[]
    deleteMany?: VenueRatingUserScalarWhereInput | VenueRatingUserScalarWhereInput[]
  }

  export type VenueReservationUserUncheckedUpdateManyWithoutVenueNestedInput = {
    create?: XOR<VenueReservationUserCreateWithoutVenueInput, VenueReservationUserUncheckedCreateWithoutVenueInput> | VenueReservationUserCreateWithoutVenueInput[] | VenueReservationUserUncheckedCreateWithoutVenueInput[]
    connectOrCreate?: VenueReservationUserCreateOrConnectWithoutVenueInput | VenueReservationUserCreateOrConnectWithoutVenueInput[]
    upsert?: VenueReservationUserUpsertWithWhereUniqueWithoutVenueInput | VenueReservationUserUpsertWithWhereUniqueWithoutVenueInput[]
    createMany?: VenueReservationUserCreateManyVenueInputEnvelope
    set?: VenueReservationUserWhereUniqueInput | VenueReservationUserWhereUniqueInput[]
    disconnect?: VenueReservationUserWhereUniqueInput | VenueReservationUserWhereUniqueInput[]
    delete?: VenueReservationUserWhereUniqueInput | VenueReservationUserWhereUniqueInput[]
    connect?: VenueReservationUserWhereUniqueInput | VenueReservationUserWhereUniqueInput[]
    update?: VenueReservationUserUpdateWithWhereUniqueWithoutVenueInput | VenueReservationUserUpdateWithWhereUniqueWithoutVenueInput[]
    updateMany?: VenueReservationUserUpdateManyWithWhereWithoutVenueInput | VenueReservationUserUpdateManyWithWhereWithoutVenueInput[]
    deleteMany?: VenueReservationUserScalarWhereInput | VenueReservationUserScalarWhereInput[]
  }

  export type VenueFavouriteUserUncheckedUpdateManyWithoutVenueNestedInput = {
    create?: XOR<VenueFavouriteUserCreateWithoutVenueInput, VenueFavouriteUserUncheckedCreateWithoutVenueInput> | VenueFavouriteUserCreateWithoutVenueInput[] | VenueFavouriteUserUncheckedCreateWithoutVenueInput[]
    connectOrCreate?: VenueFavouriteUserCreateOrConnectWithoutVenueInput | VenueFavouriteUserCreateOrConnectWithoutVenueInput[]
    upsert?: VenueFavouriteUserUpsertWithWhereUniqueWithoutVenueInput | VenueFavouriteUserUpsertWithWhereUniqueWithoutVenueInput[]
    createMany?: VenueFavouriteUserCreateManyVenueInputEnvelope
    set?: VenueFavouriteUserWhereUniqueInput | VenueFavouriteUserWhereUniqueInput[]
    disconnect?: VenueFavouriteUserWhereUniqueInput | VenueFavouriteUserWhereUniqueInput[]
    delete?: VenueFavouriteUserWhereUniqueInput | VenueFavouriteUserWhereUniqueInput[]
    connect?: VenueFavouriteUserWhereUniqueInput | VenueFavouriteUserWhereUniqueInput[]
    update?: VenueFavouriteUserUpdateWithWhereUniqueWithoutVenueInput | VenueFavouriteUserUpdateWithWhereUniqueWithoutVenueInput[]
    updateMany?: VenueFavouriteUserUpdateManyWithWhereWithoutVenueInput | VenueFavouriteUserUpdateManyWithWhereWithoutVenueInput[]
    deleteMany?: VenueFavouriteUserScalarWhereInput | VenueFavouriteUserScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumStatusEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusEnum | EnumStatusEnumFieldRefInput<$PrismaModel>
    in?: $Enums.StatusEnum[] | ListEnumStatusEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusEnum[] | ListEnumStatusEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusEnumFilter<$PrismaModel> | $Enums.StatusEnum
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumStatusEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusEnum | EnumStatusEnumFieldRefInput<$PrismaModel>
    in?: $Enums.StatusEnum[] | ListEnumStatusEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusEnum[] | ListEnumStatusEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusEnumWithAggregatesFilter<$PrismaModel> | $Enums.StatusEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusEnumFilter<$PrismaModel>
    _max?: NestedEnumStatusEnumFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type CategoryCreateWithoutAmenitiesInput = {
    name: string
  }

  export type CategoryUncheckedCreateWithoutAmenitiesInput = {
    id?: number
    name: string
  }

  export type CategoryCreateOrConnectWithoutAmenitiesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutAmenitiesInput, CategoryUncheckedCreateWithoutAmenitiesInput>
  }

  export type OccasionCreateWithoutAmenitiesInput = {
    name: string
  }

  export type OccasionUncheckedCreateWithoutAmenitiesInput = {
    id?: number
    name: string
  }

  export type OccasionCreateOrConnectWithoutAmenitiesInput = {
    where: OccasionWhereUniqueInput
    create: XOR<OccasionCreateWithoutAmenitiesInput, OccasionUncheckedCreateWithoutAmenitiesInput>
  }

  export type VenueCreateWithoutAmenitiesInput = {
    pricePerNightInEURCent: number
    rating: number
    capacity: number
    amountsOfBeds: number
    extraSleepingDetails: string
    name: string
    images: JsonNullValueInput | InputJsonValue
    description: string
    checkInHour: number
    checkOutHour: number
    distanceFromCityCenterInM: number
    facebookUrl: string
    instagramUrl: string
    twitterUrl: string
    websiteUrl: string
    streetNumber: string
    streetName: string
    postalCode: string
    city: string
    owner: UserCreateNestedOneWithoutVenuesInput
    VenueRatingUser?: VenueRatingUserCreateNestedManyWithoutVenueInput
    venueReservationUser?: VenueReservationUserCreateNestedManyWithoutVenueInput
    venueFavouriteUser?: VenueFavouriteUserCreateNestedManyWithoutVenueInput
  }

  export type VenueUncheckedCreateWithoutAmenitiesInput = {
    id?: number
    pricePerNightInEURCent: number
    rating: number
    capacity: number
    amountsOfBeds: number
    extraSleepingDetails: string
    name: string
    images: JsonNullValueInput | InputJsonValue
    description: string
    checkInHour: number
    checkOutHour: number
    distanceFromCityCenterInM: number
    facebookUrl: string
    instagramUrl: string
    twitterUrl: string
    websiteUrl: string
    streetNumber: string
    streetName: string
    postalCode: string
    city: string
    ownerId: number
    VenueRatingUser?: VenueRatingUserUncheckedCreateNestedManyWithoutVenueInput
    venueReservationUser?: VenueReservationUserUncheckedCreateNestedManyWithoutVenueInput
    venueFavouriteUser?: VenueFavouriteUserUncheckedCreateNestedManyWithoutVenueInput
  }

  export type VenueCreateOrConnectWithoutAmenitiesInput = {
    where: VenueWhereUniqueInput
    create: XOR<VenueCreateWithoutAmenitiesInput, VenueUncheckedCreateWithoutAmenitiesInput>
  }

  export type CategoryUpsertWithoutAmenitiesInput = {
    update: XOR<CategoryUpdateWithoutAmenitiesInput, CategoryUncheckedUpdateWithoutAmenitiesInput>
    create: XOR<CategoryCreateWithoutAmenitiesInput, CategoryUncheckedCreateWithoutAmenitiesInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutAmenitiesInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutAmenitiesInput, CategoryUncheckedUpdateWithoutAmenitiesInput>
  }

  export type CategoryUpdateWithoutAmenitiesInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateWithoutAmenitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type OccasionUpsertWithWhereUniqueWithoutAmenitiesInput = {
    where: OccasionWhereUniqueInput
    update: XOR<OccasionUpdateWithoutAmenitiesInput, OccasionUncheckedUpdateWithoutAmenitiesInput>
    create: XOR<OccasionCreateWithoutAmenitiesInput, OccasionUncheckedCreateWithoutAmenitiesInput>
  }

  export type OccasionUpdateWithWhereUniqueWithoutAmenitiesInput = {
    where: OccasionWhereUniqueInput
    data: XOR<OccasionUpdateWithoutAmenitiesInput, OccasionUncheckedUpdateWithoutAmenitiesInput>
  }

  export type OccasionUpdateManyWithWhereWithoutAmenitiesInput = {
    where: OccasionScalarWhereInput
    data: XOR<OccasionUpdateManyMutationInput, OccasionUncheckedUpdateManyWithoutAmenitiesInput>
  }

  export type OccasionScalarWhereInput = {
    AND?: OccasionScalarWhereInput | OccasionScalarWhereInput[]
    OR?: OccasionScalarWhereInput[]
    NOT?: OccasionScalarWhereInput | OccasionScalarWhereInput[]
    id?: IntFilter<"Occasion"> | number
    name?: StringFilter<"Occasion"> | string
  }

  export type VenueUpsertWithWhereUniqueWithoutAmenitiesInput = {
    where: VenueWhereUniqueInput
    update: XOR<VenueUpdateWithoutAmenitiesInput, VenueUncheckedUpdateWithoutAmenitiesInput>
    create: XOR<VenueCreateWithoutAmenitiesInput, VenueUncheckedCreateWithoutAmenitiesInput>
  }

  export type VenueUpdateWithWhereUniqueWithoutAmenitiesInput = {
    where: VenueWhereUniqueInput
    data: XOR<VenueUpdateWithoutAmenitiesInput, VenueUncheckedUpdateWithoutAmenitiesInput>
  }

  export type VenueUpdateManyWithWhereWithoutAmenitiesInput = {
    where: VenueScalarWhereInput
    data: XOR<VenueUpdateManyMutationInput, VenueUncheckedUpdateManyWithoutAmenitiesInput>
  }

  export type VenueScalarWhereInput = {
    AND?: VenueScalarWhereInput | VenueScalarWhereInput[]
    OR?: VenueScalarWhereInput[]
    NOT?: VenueScalarWhereInput | VenueScalarWhereInput[]
    id?: IntFilter<"Venue"> | number
    pricePerNightInEURCent?: IntFilter<"Venue"> | number
    rating?: FloatFilter<"Venue"> | number
    capacity?: IntFilter<"Venue"> | number
    amountsOfBeds?: IntFilter<"Venue"> | number
    extraSleepingDetails?: StringFilter<"Venue"> | string
    name?: StringFilter<"Venue"> | string
    images?: JsonFilter<"Venue">
    description?: StringFilter<"Venue"> | string
    checkInHour?: IntFilter<"Venue"> | number
    checkOutHour?: IntFilter<"Venue"> | number
    distanceFromCityCenterInM?: IntFilter<"Venue"> | number
    facebookUrl?: StringFilter<"Venue"> | string
    instagramUrl?: StringFilter<"Venue"> | string
    twitterUrl?: StringFilter<"Venue"> | string
    websiteUrl?: StringFilter<"Venue"> | string
    streetNumber?: StringFilter<"Venue"> | string
    streetName?: StringFilter<"Venue"> | string
    postalCode?: StringFilter<"Venue"> | string
    city?: StringFilter<"Venue"> | string
    ownerId?: IntFilter<"Venue"> | number
  }

  export type AmenityCreateWithoutCategoryInput = {
    name: string
    occasions?: OccasionCreateNestedManyWithoutAmenitiesInput
    venues?: VenueCreateNestedManyWithoutAmenitiesInput
  }

  export type AmenityUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    occasions?: OccasionUncheckedCreateNestedManyWithoutAmenitiesInput
    venues?: VenueUncheckedCreateNestedManyWithoutAmenitiesInput
  }

  export type AmenityCreateOrConnectWithoutCategoryInput = {
    where: AmenityWhereUniqueInput
    create: XOR<AmenityCreateWithoutCategoryInput, AmenityUncheckedCreateWithoutCategoryInput>
  }

  export type AmenityCreateManyCategoryInputEnvelope = {
    data: AmenityCreateManyCategoryInput | AmenityCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type AmenityUpsertWithWhereUniqueWithoutCategoryInput = {
    where: AmenityWhereUniqueInput
    update: XOR<AmenityUpdateWithoutCategoryInput, AmenityUncheckedUpdateWithoutCategoryInput>
    create: XOR<AmenityCreateWithoutCategoryInput, AmenityUncheckedCreateWithoutCategoryInput>
  }

  export type AmenityUpdateWithWhereUniqueWithoutCategoryInput = {
    where: AmenityWhereUniqueInput
    data: XOR<AmenityUpdateWithoutCategoryInput, AmenityUncheckedUpdateWithoutCategoryInput>
  }

  export type AmenityUpdateManyWithWhereWithoutCategoryInput = {
    where: AmenityScalarWhereInput
    data: XOR<AmenityUpdateManyMutationInput, AmenityUncheckedUpdateManyWithoutCategoryInput>
  }

  export type AmenityScalarWhereInput = {
    AND?: AmenityScalarWhereInput | AmenityScalarWhereInput[]
    OR?: AmenityScalarWhereInput[]
    NOT?: AmenityScalarWhereInput | AmenityScalarWhereInput[]
    id?: IntFilter<"Amenity"> | number
    name?: StringFilter<"Amenity"> | string
    categoryId?: IntFilter<"Amenity"> | number
  }

  export type AmenityCreateWithoutOccasionsInput = {
    name: string
    category: CategoryCreateNestedOneWithoutAmenitiesInput
    venues?: VenueCreateNestedManyWithoutAmenitiesInput
  }

  export type AmenityUncheckedCreateWithoutOccasionsInput = {
    id?: number
    name: string
    categoryId: number
    venues?: VenueUncheckedCreateNestedManyWithoutAmenitiesInput
  }

  export type AmenityCreateOrConnectWithoutOccasionsInput = {
    where: AmenityWhereUniqueInput
    create: XOR<AmenityCreateWithoutOccasionsInput, AmenityUncheckedCreateWithoutOccasionsInput>
  }

  export type AmenityUpsertWithWhereUniqueWithoutOccasionsInput = {
    where: AmenityWhereUniqueInput
    update: XOR<AmenityUpdateWithoutOccasionsInput, AmenityUncheckedUpdateWithoutOccasionsInput>
    create: XOR<AmenityCreateWithoutOccasionsInput, AmenityUncheckedCreateWithoutOccasionsInput>
  }

  export type AmenityUpdateWithWhereUniqueWithoutOccasionsInput = {
    where: AmenityWhereUniqueInput
    data: XOR<AmenityUpdateWithoutOccasionsInput, AmenityUncheckedUpdateWithoutOccasionsInput>
  }

  export type AmenityUpdateManyWithWhereWithoutOccasionsInput = {
    where: AmenityScalarWhereInput
    data: XOR<AmenityUpdateManyMutationInput, AmenityUncheckedUpdateManyWithoutOccasionsInput>
  }

  export type VenueCreateWithoutOwnerInput = {
    pricePerNightInEURCent: number
    rating: number
    capacity: number
    amountsOfBeds: number
    extraSleepingDetails: string
    name: string
    images: JsonNullValueInput | InputJsonValue
    description: string
    checkInHour: number
    checkOutHour: number
    distanceFromCityCenterInM: number
    facebookUrl: string
    instagramUrl: string
    twitterUrl: string
    websiteUrl: string
    streetNumber: string
    streetName: string
    postalCode: string
    city: string
    amenities?: AmenityCreateNestedManyWithoutVenuesInput
    VenueRatingUser?: VenueRatingUserCreateNestedManyWithoutVenueInput
    venueReservationUser?: VenueReservationUserCreateNestedManyWithoutVenueInput
    venueFavouriteUser?: VenueFavouriteUserCreateNestedManyWithoutVenueInput
  }

  export type VenueUncheckedCreateWithoutOwnerInput = {
    id?: number
    pricePerNightInEURCent: number
    rating: number
    capacity: number
    amountsOfBeds: number
    extraSleepingDetails: string
    name: string
    images: JsonNullValueInput | InputJsonValue
    description: string
    checkInHour: number
    checkOutHour: number
    distanceFromCityCenterInM: number
    facebookUrl: string
    instagramUrl: string
    twitterUrl: string
    websiteUrl: string
    streetNumber: string
    streetName: string
    postalCode: string
    city: string
    amenities?: AmenityUncheckedCreateNestedManyWithoutVenuesInput
    VenueRatingUser?: VenueRatingUserUncheckedCreateNestedManyWithoutVenueInput
    venueReservationUser?: VenueReservationUserUncheckedCreateNestedManyWithoutVenueInput
    venueFavouriteUser?: VenueFavouriteUserUncheckedCreateNestedManyWithoutVenueInput
  }

  export type VenueCreateOrConnectWithoutOwnerInput = {
    where: VenueWhereUniqueInput
    create: XOR<VenueCreateWithoutOwnerInput, VenueUncheckedCreateWithoutOwnerInput>
  }

  export type VenueCreateManyOwnerInputEnvelope = {
    data: VenueCreateManyOwnerInput | VenueCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type VenueRatingUserCreateWithoutUserInput = {
    score: number
    review?: string | null
    venue: VenueCreateNestedOneWithoutVenueRatingUserInput
  }

  export type VenueRatingUserUncheckedCreateWithoutUserInput = {
    id?: number
    venueId: number
    score: number
    review?: string | null
  }

  export type VenueRatingUserCreateOrConnectWithoutUserInput = {
    where: VenueRatingUserWhereUniqueInput
    create: XOR<VenueRatingUserCreateWithoutUserInput, VenueRatingUserUncheckedCreateWithoutUserInput>
  }

  export type VenueRatingUserCreateManyUserInputEnvelope = {
    data: VenueRatingUserCreateManyUserInput | VenueRatingUserCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type VenueReservationUserCreateWithoutUserInput = {
    dateStart: Date | string
    dateEnd: Date | string
    status: $Enums.StatusEnum
    venue: VenueCreateNestedOneWithoutVenueReservationUserInput
  }

  export type VenueReservationUserUncheckedCreateWithoutUserInput = {
    id?: number
    venueId: number
    dateStart: Date | string
    dateEnd: Date | string
    status: $Enums.StatusEnum
  }

  export type VenueReservationUserCreateOrConnectWithoutUserInput = {
    where: VenueReservationUserWhereUniqueInput
    create: XOR<VenueReservationUserCreateWithoutUserInput, VenueReservationUserUncheckedCreateWithoutUserInput>
  }

  export type VenueReservationUserCreateManyUserInputEnvelope = {
    data: VenueReservationUserCreateManyUserInput | VenueReservationUserCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type VenueFavouriteUserCreateWithoutUserInput = {
    venue: VenueCreateNestedOneWithoutVenueFavouriteUserInput
  }

  export type VenueFavouriteUserUncheckedCreateWithoutUserInput = {
    id?: number
    venueId: number
  }

  export type VenueFavouriteUserCreateOrConnectWithoutUserInput = {
    where: VenueFavouriteUserWhereUniqueInput
    create: XOR<VenueFavouriteUserCreateWithoutUserInput, VenueFavouriteUserUncheckedCreateWithoutUserInput>
  }

  export type VenueFavouriteUserCreateManyUserInputEnvelope = {
    data: VenueFavouriteUserCreateManyUserInput | VenueFavouriteUserCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type VenueUpsertWithWhereUniqueWithoutOwnerInput = {
    where: VenueWhereUniqueInput
    update: XOR<VenueUpdateWithoutOwnerInput, VenueUncheckedUpdateWithoutOwnerInput>
    create: XOR<VenueCreateWithoutOwnerInput, VenueUncheckedCreateWithoutOwnerInput>
  }

  export type VenueUpdateWithWhereUniqueWithoutOwnerInput = {
    where: VenueWhereUniqueInput
    data: XOR<VenueUpdateWithoutOwnerInput, VenueUncheckedUpdateWithoutOwnerInput>
  }

  export type VenueUpdateManyWithWhereWithoutOwnerInput = {
    where: VenueScalarWhereInput
    data: XOR<VenueUpdateManyMutationInput, VenueUncheckedUpdateManyWithoutOwnerInput>
  }

  export type VenueRatingUserUpsertWithWhereUniqueWithoutUserInput = {
    where: VenueRatingUserWhereUniqueInput
    update: XOR<VenueRatingUserUpdateWithoutUserInput, VenueRatingUserUncheckedUpdateWithoutUserInput>
    create: XOR<VenueRatingUserCreateWithoutUserInput, VenueRatingUserUncheckedCreateWithoutUserInput>
  }

  export type VenueRatingUserUpdateWithWhereUniqueWithoutUserInput = {
    where: VenueRatingUserWhereUniqueInput
    data: XOR<VenueRatingUserUpdateWithoutUserInput, VenueRatingUserUncheckedUpdateWithoutUserInput>
  }

  export type VenueRatingUserUpdateManyWithWhereWithoutUserInput = {
    where: VenueRatingUserScalarWhereInput
    data: XOR<VenueRatingUserUpdateManyMutationInput, VenueRatingUserUncheckedUpdateManyWithoutUserInput>
  }

  export type VenueRatingUserScalarWhereInput = {
    AND?: VenueRatingUserScalarWhereInput | VenueRatingUserScalarWhereInput[]
    OR?: VenueRatingUserScalarWhereInput[]
    NOT?: VenueRatingUserScalarWhereInput | VenueRatingUserScalarWhereInput[]
    id?: IntFilter<"VenueRatingUser"> | number
    venueId?: IntFilter<"VenueRatingUser"> | number
    userId?: IntFilter<"VenueRatingUser"> | number
    score?: FloatFilter<"VenueRatingUser"> | number
    review?: StringNullableFilter<"VenueRatingUser"> | string | null
  }

  export type VenueReservationUserUpsertWithWhereUniqueWithoutUserInput = {
    where: VenueReservationUserWhereUniqueInput
    update: XOR<VenueReservationUserUpdateWithoutUserInput, VenueReservationUserUncheckedUpdateWithoutUserInput>
    create: XOR<VenueReservationUserCreateWithoutUserInput, VenueReservationUserUncheckedCreateWithoutUserInput>
  }

  export type VenueReservationUserUpdateWithWhereUniqueWithoutUserInput = {
    where: VenueReservationUserWhereUniqueInput
    data: XOR<VenueReservationUserUpdateWithoutUserInput, VenueReservationUserUncheckedUpdateWithoutUserInput>
  }

  export type VenueReservationUserUpdateManyWithWhereWithoutUserInput = {
    where: VenueReservationUserScalarWhereInput
    data: XOR<VenueReservationUserUpdateManyMutationInput, VenueReservationUserUncheckedUpdateManyWithoutUserInput>
  }

  export type VenueReservationUserScalarWhereInput = {
    AND?: VenueReservationUserScalarWhereInput | VenueReservationUserScalarWhereInput[]
    OR?: VenueReservationUserScalarWhereInput[]
    NOT?: VenueReservationUserScalarWhereInput | VenueReservationUserScalarWhereInput[]
    id?: IntFilter<"VenueReservationUser"> | number
    venueId?: IntFilter<"VenueReservationUser"> | number
    userId?: IntFilter<"VenueReservationUser"> | number
    dateStart?: DateTimeFilter<"VenueReservationUser"> | Date | string
    dateEnd?: DateTimeFilter<"VenueReservationUser"> | Date | string
    status?: EnumStatusEnumFilter<"VenueReservationUser"> | $Enums.StatusEnum
  }

  export type VenueFavouriteUserUpsertWithWhereUniqueWithoutUserInput = {
    where: VenueFavouriteUserWhereUniqueInput
    update: XOR<VenueFavouriteUserUpdateWithoutUserInput, VenueFavouriteUserUncheckedUpdateWithoutUserInput>
    create: XOR<VenueFavouriteUserCreateWithoutUserInput, VenueFavouriteUserUncheckedCreateWithoutUserInput>
  }

  export type VenueFavouriteUserUpdateWithWhereUniqueWithoutUserInput = {
    where: VenueFavouriteUserWhereUniqueInput
    data: XOR<VenueFavouriteUserUpdateWithoutUserInput, VenueFavouriteUserUncheckedUpdateWithoutUserInput>
  }

  export type VenueFavouriteUserUpdateManyWithWhereWithoutUserInput = {
    where: VenueFavouriteUserScalarWhereInput
    data: XOR<VenueFavouriteUserUpdateManyMutationInput, VenueFavouriteUserUncheckedUpdateManyWithoutUserInput>
  }

  export type VenueFavouriteUserScalarWhereInput = {
    AND?: VenueFavouriteUserScalarWhereInput | VenueFavouriteUserScalarWhereInput[]
    OR?: VenueFavouriteUserScalarWhereInput[]
    NOT?: VenueFavouriteUserScalarWhereInput | VenueFavouriteUserScalarWhereInput[]
    id?: IntFilter<"VenueFavouriteUser"> | number
    userId?: IntFilter<"VenueFavouriteUser"> | number
    venueId?: IntFilter<"VenueFavouriteUser"> | number
  }

  export type UserCreateWithoutVenueFavouriteUserInput = {
    email: string
    name: string
    phoneNumber: string
    password: string
    venues?: VenueCreateNestedManyWithoutOwnerInput
    venueRatingUser?: VenueRatingUserCreateNestedManyWithoutUserInput
    venueReservationUser?: VenueReservationUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutVenueFavouriteUserInput = {
    id?: number
    email: string
    name: string
    phoneNumber: string
    password: string
    venues?: VenueUncheckedCreateNestedManyWithoutOwnerInput
    venueRatingUser?: VenueRatingUserUncheckedCreateNestedManyWithoutUserInput
    venueReservationUser?: VenueReservationUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutVenueFavouriteUserInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVenueFavouriteUserInput, UserUncheckedCreateWithoutVenueFavouriteUserInput>
  }

  export type VenueCreateWithoutVenueFavouriteUserInput = {
    pricePerNightInEURCent: number
    rating: number
    capacity: number
    amountsOfBeds: number
    extraSleepingDetails: string
    name: string
    images: JsonNullValueInput | InputJsonValue
    description: string
    checkInHour: number
    checkOutHour: number
    distanceFromCityCenterInM: number
    facebookUrl: string
    instagramUrl: string
    twitterUrl: string
    websiteUrl: string
    streetNumber: string
    streetName: string
    postalCode: string
    city: string
    owner: UserCreateNestedOneWithoutVenuesInput
    amenities?: AmenityCreateNestedManyWithoutVenuesInput
    VenueRatingUser?: VenueRatingUserCreateNestedManyWithoutVenueInput
    venueReservationUser?: VenueReservationUserCreateNestedManyWithoutVenueInput
  }

  export type VenueUncheckedCreateWithoutVenueFavouriteUserInput = {
    id?: number
    pricePerNightInEURCent: number
    rating: number
    capacity: number
    amountsOfBeds: number
    extraSleepingDetails: string
    name: string
    images: JsonNullValueInput | InputJsonValue
    description: string
    checkInHour: number
    checkOutHour: number
    distanceFromCityCenterInM: number
    facebookUrl: string
    instagramUrl: string
    twitterUrl: string
    websiteUrl: string
    streetNumber: string
    streetName: string
    postalCode: string
    city: string
    ownerId: number
    amenities?: AmenityUncheckedCreateNestedManyWithoutVenuesInput
    VenueRatingUser?: VenueRatingUserUncheckedCreateNestedManyWithoutVenueInput
    venueReservationUser?: VenueReservationUserUncheckedCreateNestedManyWithoutVenueInput
  }

  export type VenueCreateOrConnectWithoutVenueFavouriteUserInput = {
    where: VenueWhereUniqueInput
    create: XOR<VenueCreateWithoutVenueFavouriteUserInput, VenueUncheckedCreateWithoutVenueFavouriteUserInput>
  }

  export type UserUpsertWithoutVenueFavouriteUserInput = {
    update: XOR<UserUpdateWithoutVenueFavouriteUserInput, UserUncheckedUpdateWithoutVenueFavouriteUserInput>
    create: XOR<UserCreateWithoutVenueFavouriteUserInput, UserUncheckedCreateWithoutVenueFavouriteUserInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVenueFavouriteUserInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVenueFavouriteUserInput, UserUncheckedUpdateWithoutVenueFavouriteUserInput>
  }

  export type UserUpdateWithoutVenueFavouriteUserInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    venues?: VenueUpdateManyWithoutOwnerNestedInput
    venueRatingUser?: VenueRatingUserUpdateManyWithoutUserNestedInput
    venueReservationUser?: VenueReservationUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutVenueFavouriteUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    venues?: VenueUncheckedUpdateManyWithoutOwnerNestedInput
    venueRatingUser?: VenueRatingUserUncheckedUpdateManyWithoutUserNestedInput
    venueReservationUser?: VenueReservationUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type VenueUpsertWithoutVenueFavouriteUserInput = {
    update: XOR<VenueUpdateWithoutVenueFavouriteUserInput, VenueUncheckedUpdateWithoutVenueFavouriteUserInput>
    create: XOR<VenueCreateWithoutVenueFavouriteUserInput, VenueUncheckedCreateWithoutVenueFavouriteUserInput>
    where?: VenueWhereInput
  }

  export type VenueUpdateToOneWithWhereWithoutVenueFavouriteUserInput = {
    where?: VenueWhereInput
    data: XOR<VenueUpdateWithoutVenueFavouriteUserInput, VenueUncheckedUpdateWithoutVenueFavouriteUserInput>
  }

  export type VenueUpdateWithoutVenueFavouriteUserInput = {
    pricePerNightInEURCent?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    amountsOfBeds?: IntFieldUpdateOperationsInput | number
    extraSleepingDetails?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    images?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    checkInHour?: IntFieldUpdateOperationsInput | number
    checkOutHour?: IntFieldUpdateOperationsInput | number
    distanceFromCityCenterInM?: IntFieldUpdateOperationsInput | number
    facebookUrl?: StringFieldUpdateOperationsInput | string
    instagramUrl?: StringFieldUpdateOperationsInput | string
    twitterUrl?: StringFieldUpdateOperationsInput | string
    websiteUrl?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    streetName?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutVenuesNestedInput
    amenities?: AmenityUpdateManyWithoutVenuesNestedInput
    VenueRatingUser?: VenueRatingUserUpdateManyWithoutVenueNestedInput
    venueReservationUser?: VenueReservationUserUpdateManyWithoutVenueNestedInput
  }

  export type VenueUncheckedUpdateWithoutVenueFavouriteUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    pricePerNightInEURCent?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    amountsOfBeds?: IntFieldUpdateOperationsInput | number
    extraSleepingDetails?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    images?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    checkInHour?: IntFieldUpdateOperationsInput | number
    checkOutHour?: IntFieldUpdateOperationsInput | number
    distanceFromCityCenterInM?: IntFieldUpdateOperationsInput | number
    facebookUrl?: StringFieldUpdateOperationsInput | string
    instagramUrl?: StringFieldUpdateOperationsInput | string
    twitterUrl?: StringFieldUpdateOperationsInput | string
    websiteUrl?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    streetName?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    amenities?: AmenityUncheckedUpdateManyWithoutVenuesNestedInput
    VenueRatingUser?: VenueRatingUserUncheckedUpdateManyWithoutVenueNestedInput
    venueReservationUser?: VenueReservationUserUncheckedUpdateManyWithoutVenueNestedInput
  }

  export type VenueCreateWithoutVenueRatingUserInput = {
    pricePerNightInEURCent: number
    rating: number
    capacity: number
    amountsOfBeds: number
    extraSleepingDetails: string
    name: string
    images: JsonNullValueInput | InputJsonValue
    description: string
    checkInHour: number
    checkOutHour: number
    distanceFromCityCenterInM: number
    facebookUrl: string
    instagramUrl: string
    twitterUrl: string
    websiteUrl: string
    streetNumber: string
    streetName: string
    postalCode: string
    city: string
    owner: UserCreateNestedOneWithoutVenuesInput
    amenities?: AmenityCreateNestedManyWithoutVenuesInput
    venueReservationUser?: VenueReservationUserCreateNestedManyWithoutVenueInput
    venueFavouriteUser?: VenueFavouriteUserCreateNestedManyWithoutVenueInput
  }

  export type VenueUncheckedCreateWithoutVenueRatingUserInput = {
    id?: number
    pricePerNightInEURCent: number
    rating: number
    capacity: number
    amountsOfBeds: number
    extraSleepingDetails: string
    name: string
    images: JsonNullValueInput | InputJsonValue
    description: string
    checkInHour: number
    checkOutHour: number
    distanceFromCityCenterInM: number
    facebookUrl: string
    instagramUrl: string
    twitterUrl: string
    websiteUrl: string
    streetNumber: string
    streetName: string
    postalCode: string
    city: string
    ownerId: number
    amenities?: AmenityUncheckedCreateNestedManyWithoutVenuesInput
    venueReservationUser?: VenueReservationUserUncheckedCreateNestedManyWithoutVenueInput
    venueFavouriteUser?: VenueFavouriteUserUncheckedCreateNestedManyWithoutVenueInput
  }

  export type VenueCreateOrConnectWithoutVenueRatingUserInput = {
    where: VenueWhereUniqueInput
    create: XOR<VenueCreateWithoutVenueRatingUserInput, VenueUncheckedCreateWithoutVenueRatingUserInput>
  }

  export type UserCreateWithoutVenueRatingUserInput = {
    email: string
    name: string
    phoneNumber: string
    password: string
    venues?: VenueCreateNestedManyWithoutOwnerInput
    venueReservationUser?: VenueReservationUserCreateNestedManyWithoutUserInput
    venueFavouriteUser?: VenueFavouriteUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutVenueRatingUserInput = {
    id?: number
    email: string
    name: string
    phoneNumber: string
    password: string
    venues?: VenueUncheckedCreateNestedManyWithoutOwnerInput
    venueReservationUser?: VenueReservationUserUncheckedCreateNestedManyWithoutUserInput
    venueFavouriteUser?: VenueFavouriteUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutVenueRatingUserInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVenueRatingUserInput, UserUncheckedCreateWithoutVenueRatingUserInput>
  }

  export type VenueUpsertWithoutVenueRatingUserInput = {
    update: XOR<VenueUpdateWithoutVenueRatingUserInput, VenueUncheckedUpdateWithoutVenueRatingUserInput>
    create: XOR<VenueCreateWithoutVenueRatingUserInput, VenueUncheckedCreateWithoutVenueRatingUserInput>
    where?: VenueWhereInput
  }

  export type VenueUpdateToOneWithWhereWithoutVenueRatingUserInput = {
    where?: VenueWhereInput
    data: XOR<VenueUpdateWithoutVenueRatingUserInput, VenueUncheckedUpdateWithoutVenueRatingUserInput>
  }

  export type VenueUpdateWithoutVenueRatingUserInput = {
    pricePerNightInEURCent?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    amountsOfBeds?: IntFieldUpdateOperationsInput | number
    extraSleepingDetails?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    images?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    checkInHour?: IntFieldUpdateOperationsInput | number
    checkOutHour?: IntFieldUpdateOperationsInput | number
    distanceFromCityCenterInM?: IntFieldUpdateOperationsInput | number
    facebookUrl?: StringFieldUpdateOperationsInput | string
    instagramUrl?: StringFieldUpdateOperationsInput | string
    twitterUrl?: StringFieldUpdateOperationsInput | string
    websiteUrl?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    streetName?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutVenuesNestedInput
    amenities?: AmenityUpdateManyWithoutVenuesNestedInput
    venueReservationUser?: VenueReservationUserUpdateManyWithoutVenueNestedInput
    venueFavouriteUser?: VenueFavouriteUserUpdateManyWithoutVenueNestedInput
  }

  export type VenueUncheckedUpdateWithoutVenueRatingUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    pricePerNightInEURCent?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    amountsOfBeds?: IntFieldUpdateOperationsInput | number
    extraSleepingDetails?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    images?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    checkInHour?: IntFieldUpdateOperationsInput | number
    checkOutHour?: IntFieldUpdateOperationsInput | number
    distanceFromCityCenterInM?: IntFieldUpdateOperationsInput | number
    facebookUrl?: StringFieldUpdateOperationsInput | string
    instagramUrl?: StringFieldUpdateOperationsInput | string
    twitterUrl?: StringFieldUpdateOperationsInput | string
    websiteUrl?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    streetName?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    amenities?: AmenityUncheckedUpdateManyWithoutVenuesNestedInput
    venueReservationUser?: VenueReservationUserUncheckedUpdateManyWithoutVenueNestedInput
    venueFavouriteUser?: VenueFavouriteUserUncheckedUpdateManyWithoutVenueNestedInput
  }

  export type UserUpsertWithoutVenueRatingUserInput = {
    update: XOR<UserUpdateWithoutVenueRatingUserInput, UserUncheckedUpdateWithoutVenueRatingUserInput>
    create: XOR<UserCreateWithoutVenueRatingUserInput, UserUncheckedCreateWithoutVenueRatingUserInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVenueRatingUserInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVenueRatingUserInput, UserUncheckedUpdateWithoutVenueRatingUserInput>
  }

  export type UserUpdateWithoutVenueRatingUserInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    venues?: VenueUpdateManyWithoutOwnerNestedInput
    venueReservationUser?: VenueReservationUserUpdateManyWithoutUserNestedInput
    venueFavouriteUser?: VenueFavouriteUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutVenueRatingUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    venues?: VenueUncheckedUpdateManyWithoutOwnerNestedInput
    venueReservationUser?: VenueReservationUserUncheckedUpdateManyWithoutUserNestedInput
    venueFavouriteUser?: VenueFavouriteUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type VenueCreateWithoutVenueReservationUserInput = {
    pricePerNightInEURCent: number
    rating: number
    capacity: number
    amountsOfBeds: number
    extraSleepingDetails: string
    name: string
    images: JsonNullValueInput | InputJsonValue
    description: string
    checkInHour: number
    checkOutHour: number
    distanceFromCityCenterInM: number
    facebookUrl: string
    instagramUrl: string
    twitterUrl: string
    websiteUrl: string
    streetNumber: string
    streetName: string
    postalCode: string
    city: string
    owner: UserCreateNestedOneWithoutVenuesInput
    amenities?: AmenityCreateNestedManyWithoutVenuesInput
    VenueRatingUser?: VenueRatingUserCreateNestedManyWithoutVenueInput
    venueFavouriteUser?: VenueFavouriteUserCreateNestedManyWithoutVenueInput
  }

  export type VenueUncheckedCreateWithoutVenueReservationUserInput = {
    id?: number
    pricePerNightInEURCent: number
    rating: number
    capacity: number
    amountsOfBeds: number
    extraSleepingDetails: string
    name: string
    images: JsonNullValueInput | InputJsonValue
    description: string
    checkInHour: number
    checkOutHour: number
    distanceFromCityCenterInM: number
    facebookUrl: string
    instagramUrl: string
    twitterUrl: string
    websiteUrl: string
    streetNumber: string
    streetName: string
    postalCode: string
    city: string
    ownerId: number
    amenities?: AmenityUncheckedCreateNestedManyWithoutVenuesInput
    VenueRatingUser?: VenueRatingUserUncheckedCreateNestedManyWithoutVenueInput
    venueFavouriteUser?: VenueFavouriteUserUncheckedCreateNestedManyWithoutVenueInput
  }

  export type VenueCreateOrConnectWithoutVenueReservationUserInput = {
    where: VenueWhereUniqueInput
    create: XOR<VenueCreateWithoutVenueReservationUserInput, VenueUncheckedCreateWithoutVenueReservationUserInput>
  }

  export type UserCreateWithoutVenueReservationUserInput = {
    email: string
    name: string
    phoneNumber: string
    password: string
    venues?: VenueCreateNestedManyWithoutOwnerInput
    venueRatingUser?: VenueRatingUserCreateNestedManyWithoutUserInput
    venueFavouriteUser?: VenueFavouriteUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutVenueReservationUserInput = {
    id?: number
    email: string
    name: string
    phoneNumber: string
    password: string
    venues?: VenueUncheckedCreateNestedManyWithoutOwnerInput
    venueRatingUser?: VenueRatingUserUncheckedCreateNestedManyWithoutUserInput
    venueFavouriteUser?: VenueFavouriteUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutVenueReservationUserInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVenueReservationUserInput, UserUncheckedCreateWithoutVenueReservationUserInput>
  }

  export type VenueUpsertWithoutVenueReservationUserInput = {
    update: XOR<VenueUpdateWithoutVenueReservationUserInput, VenueUncheckedUpdateWithoutVenueReservationUserInput>
    create: XOR<VenueCreateWithoutVenueReservationUserInput, VenueUncheckedCreateWithoutVenueReservationUserInput>
    where?: VenueWhereInput
  }

  export type VenueUpdateToOneWithWhereWithoutVenueReservationUserInput = {
    where?: VenueWhereInput
    data: XOR<VenueUpdateWithoutVenueReservationUserInput, VenueUncheckedUpdateWithoutVenueReservationUserInput>
  }

  export type VenueUpdateWithoutVenueReservationUserInput = {
    pricePerNightInEURCent?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    amountsOfBeds?: IntFieldUpdateOperationsInput | number
    extraSleepingDetails?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    images?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    checkInHour?: IntFieldUpdateOperationsInput | number
    checkOutHour?: IntFieldUpdateOperationsInput | number
    distanceFromCityCenterInM?: IntFieldUpdateOperationsInput | number
    facebookUrl?: StringFieldUpdateOperationsInput | string
    instagramUrl?: StringFieldUpdateOperationsInput | string
    twitterUrl?: StringFieldUpdateOperationsInput | string
    websiteUrl?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    streetName?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutVenuesNestedInput
    amenities?: AmenityUpdateManyWithoutVenuesNestedInput
    VenueRatingUser?: VenueRatingUserUpdateManyWithoutVenueNestedInput
    venueFavouriteUser?: VenueFavouriteUserUpdateManyWithoutVenueNestedInput
  }

  export type VenueUncheckedUpdateWithoutVenueReservationUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    pricePerNightInEURCent?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    amountsOfBeds?: IntFieldUpdateOperationsInput | number
    extraSleepingDetails?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    images?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    checkInHour?: IntFieldUpdateOperationsInput | number
    checkOutHour?: IntFieldUpdateOperationsInput | number
    distanceFromCityCenterInM?: IntFieldUpdateOperationsInput | number
    facebookUrl?: StringFieldUpdateOperationsInput | string
    instagramUrl?: StringFieldUpdateOperationsInput | string
    twitterUrl?: StringFieldUpdateOperationsInput | string
    websiteUrl?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    streetName?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    amenities?: AmenityUncheckedUpdateManyWithoutVenuesNestedInput
    VenueRatingUser?: VenueRatingUserUncheckedUpdateManyWithoutVenueNestedInput
    venueFavouriteUser?: VenueFavouriteUserUncheckedUpdateManyWithoutVenueNestedInput
  }

  export type UserUpsertWithoutVenueReservationUserInput = {
    update: XOR<UserUpdateWithoutVenueReservationUserInput, UserUncheckedUpdateWithoutVenueReservationUserInput>
    create: XOR<UserCreateWithoutVenueReservationUserInput, UserUncheckedCreateWithoutVenueReservationUserInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVenueReservationUserInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVenueReservationUserInput, UserUncheckedUpdateWithoutVenueReservationUserInput>
  }

  export type UserUpdateWithoutVenueReservationUserInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    venues?: VenueUpdateManyWithoutOwnerNestedInput
    venueRatingUser?: VenueRatingUserUpdateManyWithoutUserNestedInput
    venueFavouriteUser?: VenueFavouriteUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutVenueReservationUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    venues?: VenueUncheckedUpdateManyWithoutOwnerNestedInput
    venueRatingUser?: VenueRatingUserUncheckedUpdateManyWithoutUserNestedInput
    venueFavouriteUser?: VenueFavouriteUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutVenuesInput = {
    email: string
    name: string
    phoneNumber: string
    password: string
    venueRatingUser?: VenueRatingUserCreateNestedManyWithoutUserInput
    venueReservationUser?: VenueReservationUserCreateNestedManyWithoutUserInput
    venueFavouriteUser?: VenueFavouriteUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutVenuesInput = {
    id?: number
    email: string
    name: string
    phoneNumber: string
    password: string
    venueRatingUser?: VenueRatingUserUncheckedCreateNestedManyWithoutUserInput
    venueReservationUser?: VenueReservationUserUncheckedCreateNestedManyWithoutUserInput
    venueFavouriteUser?: VenueFavouriteUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutVenuesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVenuesInput, UserUncheckedCreateWithoutVenuesInput>
  }

  export type AmenityCreateWithoutVenuesInput = {
    name: string
    category: CategoryCreateNestedOneWithoutAmenitiesInput
    occasions?: OccasionCreateNestedManyWithoutAmenitiesInput
  }

  export type AmenityUncheckedCreateWithoutVenuesInput = {
    id?: number
    name: string
    categoryId: number
    occasions?: OccasionUncheckedCreateNestedManyWithoutAmenitiesInput
  }

  export type AmenityCreateOrConnectWithoutVenuesInput = {
    where: AmenityWhereUniqueInput
    create: XOR<AmenityCreateWithoutVenuesInput, AmenityUncheckedCreateWithoutVenuesInput>
  }

  export type VenueRatingUserCreateWithoutVenueInput = {
    score: number
    review?: string | null
    user: UserCreateNestedOneWithoutVenueRatingUserInput
  }

  export type VenueRatingUserUncheckedCreateWithoutVenueInput = {
    id?: number
    userId: number
    score: number
    review?: string | null
  }

  export type VenueRatingUserCreateOrConnectWithoutVenueInput = {
    where: VenueRatingUserWhereUniqueInput
    create: XOR<VenueRatingUserCreateWithoutVenueInput, VenueRatingUserUncheckedCreateWithoutVenueInput>
  }

  export type VenueRatingUserCreateManyVenueInputEnvelope = {
    data: VenueRatingUserCreateManyVenueInput | VenueRatingUserCreateManyVenueInput[]
    skipDuplicates?: boolean
  }

  export type VenueReservationUserCreateWithoutVenueInput = {
    dateStart: Date | string
    dateEnd: Date | string
    status: $Enums.StatusEnum
    user: UserCreateNestedOneWithoutVenueReservationUserInput
  }

  export type VenueReservationUserUncheckedCreateWithoutVenueInput = {
    id?: number
    userId: number
    dateStart: Date | string
    dateEnd: Date | string
    status: $Enums.StatusEnum
  }

  export type VenueReservationUserCreateOrConnectWithoutVenueInput = {
    where: VenueReservationUserWhereUniqueInput
    create: XOR<VenueReservationUserCreateWithoutVenueInput, VenueReservationUserUncheckedCreateWithoutVenueInput>
  }

  export type VenueReservationUserCreateManyVenueInputEnvelope = {
    data: VenueReservationUserCreateManyVenueInput | VenueReservationUserCreateManyVenueInput[]
    skipDuplicates?: boolean
  }

  export type VenueFavouriteUserCreateWithoutVenueInput = {
    user: UserCreateNestedOneWithoutVenueFavouriteUserInput
  }

  export type VenueFavouriteUserUncheckedCreateWithoutVenueInput = {
    id?: number
    userId: number
  }

  export type VenueFavouriteUserCreateOrConnectWithoutVenueInput = {
    where: VenueFavouriteUserWhereUniqueInput
    create: XOR<VenueFavouriteUserCreateWithoutVenueInput, VenueFavouriteUserUncheckedCreateWithoutVenueInput>
  }

  export type VenueFavouriteUserCreateManyVenueInputEnvelope = {
    data: VenueFavouriteUserCreateManyVenueInput | VenueFavouriteUserCreateManyVenueInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutVenuesInput = {
    update: XOR<UserUpdateWithoutVenuesInput, UserUncheckedUpdateWithoutVenuesInput>
    create: XOR<UserCreateWithoutVenuesInput, UserUncheckedCreateWithoutVenuesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVenuesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVenuesInput, UserUncheckedUpdateWithoutVenuesInput>
  }

  export type UserUpdateWithoutVenuesInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    venueRatingUser?: VenueRatingUserUpdateManyWithoutUserNestedInput
    venueReservationUser?: VenueReservationUserUpdateManyWithoutUserNestedInput
    venueFavouriteUser?: VenueFavouriteUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutVenuesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    venueRatingUser?: VenueRatingUserUncheckedUpdateManyWithoutUserNestedInput
    venueReservationUser?: VenueReservationUserUncheckedUpdateManyWithoutUserNestedInput
    venueFavouriteUser?: VenueFavouriteUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AmenityUpsertWithWhereUniqueWithoutVenuesInput = {
    where: AmenityWhereUniqueInput
    update: XOR<AmenityUpdateWithoutVenuesInput, AmenityUncheckedUpdateWithoutVenuesInput>
    create: XOR<AmenityCreateWithoutVenuesInput, AmenityUncheckedCreateWithoutVenuesInput>
  }

  export type AmenityUpdateWithWhereUniqueWithoutVenuesInput = {
    where: AmenityWhereUniqueInput
    data: XOR<AmenityUpdateWithoutVenuesInput, AmenityUncheckedUpdateWithoutVenuesInput>
  }

  export type AmenityUpdateManyWithWhereWithoutVenuesInput = {
    where: AmenityScalarWhereInput
    data: XOR<AmenityUpdateManyMutationInput, AmenityUncheckedUpdateManyWithoutVenuesInput>
  }

  export type VenueRatingUserUpsertWithWhereUniqueWithoutVenueInput = {
    where: VenueRatingUserWhereUniqueInput
    update: XOR<VenueRatingUserUpdateWithoutVenueInput, VenueRatingUserUncheckedUpdateWithoutVenueInput>
    create: XOR<VenueRatingUserCreateWithoutVenueInput, VenueRatingUserUncheckedCreateWithoutVenueInput>
  }

  export type VenueRatingUserUpdateWithWhereUniqueWithoutVenueInput = {
    where: VenueRatingUserWhereUniqueInput
    data: XOR<VenueRatingUserUpdateWithoutVenueInput, VenueRatingUserUncheckedUpdateWithoutVenueInput>
  }

  export type VenueRatingUserUpdateManyWithWhereWithoutVenueInput = {
    where: VenueRatingUserScalarWhereInput
    data: XOR<VenueRatingUserUpdateManyMutationInput, VenueRatingUserUncheckedUpdateManyWithoutVenueInput>
  }

  export type VenueReservationUserUpsertWithWhereUniqueWithoutVenueInput = {
    where: VenueReservationUserWhereUniqueInput
    update: XOR<VenueReservationUserUpdateWithoutVenueInput, VenueReservationUserUncheckedUpdateWithoutVenueInput>
    create: XOR<VenueReservationUserCreateWithoutVenueInput, VenueReservationUserUncheckedCreateWithoutVenueInput>
  }

  export type VenueReservationUserUpdateWithWhereUniqueWithoutVenueInput = {
    where: VenueReservationUserWhereUniqueInput
    data: XOR<VenueReservationUserUpdateWithoutVenueInput, VenueReservationUserUncheckedUpdateWithoutVenueInput>
  }

  export type VenueReservationUserUpdateManyWithWhereWithoutVenueInput = {
    where: VenueReservationUserScalarWhereInput
    data: XOR<VenueReservationUserUpdateManyMutationInput, VenueReservationUserUncheckedUpdateManyWithoutVenueInput>
  }

  export type VenueFavouriteUserUpsertWithWhereUniqueWithoutVenueInput = {
    where: VenueFavouriteUserWhereUniqueInput
    update: XOR<VenueFavouriteUserUpdateWithoutVenueInput, VenueFavouriteUserUncheckedUpdateWithoutVenueInput>
    create: XOR<VenueFavouriteUserCreateWithoutVenueInput, VenueFavouriteUserUncheckedCreateWithoutVenueInput>
  }

  export type VenueFavouriteUserUpdateWithWhereUniqueWithoutVenueInput = {
    where: VenueFavouriteUserWhereUniqueInput
    data: XOR<VenueFavouriteUserUpdateWithoutVenueInput, VenueFavouriteUserUncheckedUpdateWithoutVenueInput>
  }

  export type VenueFavouriteUserUpdateManyWithWhereWithoutVenueInput = {
    where: VenueFavouriteUserScalarWhereInput
    data: XOR<VenueFavouriteUserUpdateManyMutationInput, VenueFavouriteUserUncheckedUpdateManyWithoutVenueInput>
  }

  export type OccasionUpdateWithoutAmenitiesInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type OccasionUncheckedUpdateWithoutAmenitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type OccasionUncheckedUpdateManyWithoutAmenitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type VenueUpdateWithoutAmenitiesInput = {
    pricePerNightInEURCent?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    amountsOfBeds?: IntFieldUpdateOperationsInput | number
    extraSleepingDetails?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    images?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    checkInHour?: IntFieldUpdateOperationsInput | number
    checkOutHour?: IntFieldUpdateOperationsInput | number
    distanceFromCityCenterInM?: IntFieldUpdateOperationsInput | number
    facebookUrl?: StringFieldUpdateOperationsInput | string
    instagramUrl?: StringFieldUpdateOperationsInput | string
    twitterUrl?: StringFieldUpdateOperationsInput | string
    websiteUrl?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    streetName?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutVenuesNestedInput
    VenueRatingUser?: VenueRatingUserUpdateManyWithoutVenueNestedInput
    venueReservationUser?: VenueReservationUserUpdateManyWithoutVenueNestedInput
    venueFavouriteUser?: VenueFavouriteUserUpdateManyWithoutVenueNestedInput
  }

  export type VenueUncheckedUpdateWithoutAmenitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    pricePerNightInEURCent?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    amountsOfBeds?: IntFieldUpdateOperationsInput | number
    extraSleepingDetails?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    images?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    checkInHour?: IntFieldUpdateOperationsInput | number
    checkOutHour?: IntFieldUpdateOperationsInput | number
    distanceFromCityCenterInM?: IntFieldUpdateOperationsInput | number
    facebookUrl?: StringFieldUpdateOperationsInput | string
    instagramUrl?: StringFieldUpdateOperationsInput | string
    twitterUrl?: StringFieldUpdateOperationsInput | string
    websiteUrl?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    streetName?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    VenueRatingUser?: VenueRatingUserUncheckedUpdateManyWithoutVenueNestedInput
    venueReservationUser?: VenueReservationUserUncheckedUpdateManyWithoutVenueNestedInput
    venueFavouriteUser?: VenueFavouriteUserUncheckedUpdateManyWithoutVenueNestedInput
  }

  export type VenueUncheckedUpdateManyWithoutAmenitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    pricePerNightInEURCent?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    amountsOfBeds?: IntFieldUpdateOperationsInput | number
    extraSleepingDetails?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    images?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    checkInHour?: IntFieldUpdateOperationsInput | number
    checkOutHour?: IntFieldUpdateOperationsInput | number
    distanceFromCityCenterInM?: IntFieldUpdateOperationsInput | number
    facebookUrl?: StringFieldUpdateOperationsInput | string
    instagramUrl?: StringFieldUpdateOperationsInput | string
    twitterUrl?: StringFieldUpdateOperationsInput | string
    websiteUrl?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    streetName?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type AmenityCreateManyCategoryInput = {
    id?: number
    name: string
  }

  export type AmenityUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    occasions?: OccasionUpdateManyWithoutAmenitiesNestedInput
    venues?: VenueUpdateManyWithoutAmenitiesNestedInput
  }

  export type AmenityUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    occasions?: OccasionUncheckedUpdateManyWithoutAmenitiesNestedInput
    venues?: VenueUncheckedUpdateManyWithoutAmenitiesNestedInput
  }

  export type AmenityUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AmenityUpdateWithoutOccasionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: CategoryUpdateOneRequiredWithoutAmenitiesNestedInput
    venues?: VenueUpdateManyWithoutAmenitiesNestedInput
  }

  export type AmenityUncheckedUpdateWithoutOccasionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    venues?: VenueUncheckedUpdateManyWithoutAmenitiesNestedInput
  }

  export type AmenityUncheckedUpdateManyWithoutOccasionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type VenueCreateManyOwnerInput = {
    id?: number
    pricePerNightInEURCent: number
    rating: number
    capacity: number
    amountsOfBeds: number
    extraSleepingDetails: string
    name: string
    images: JsonNullValueInput | InputJsonValue
    description: string
    checkInHour: number
    checkOutHour: number
    distanceFromCityCenterInM: number
    facebookUrl: string
    instagramUrl: string
    twitterUrl: string
    websiteUrl: string
    streetNumber: string
    streetName: string
    postalCode: string
    city: string
  }

  export type VenueRatingUserCreateManyUserInput = {
    id?: number
    venueId: number
    score: number
    review?: string | null
  }

  export type VenueReservationUserCreateManyUserInput = {
    id?: number
    venueId: number
    dateStart: Date | string
    dateEnd: Date | string
    status: $Enums.StatusEnum
  }

  export type VenueFavouriteUserCreateManyUserInput = {
    id?: number
    venueId: number
  }

  export type VenueUpdateWithoutOwnerInput = {
    pricePerNightInEURCent?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    amountsOfBeds?: IntFieldUpdateOperationsInput | number
    extraSleepingDetails?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    images?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    checkInHour?: IntFieldUpdateOperationsInput | number
    checkOutHour?: IntFieldUpdateOperationsInput | number
    distanceFromCityCenterInM?: IntFieldUpdateOperationsInput | number
    facebookUrl?: StringFieldUpdateOperationsInput | string
    instagramUrl?: StringFieldUpdateOperationsInput | string
    twitterUrl?: StringFieldUpdateOperationsInput | string
    websiteUrl?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    streetName?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    amenities?: AmenityUpdateManyWithoutVenuesNestedInput
    VenueRatingUser?: VenueRatingUserUpdateManyWithoutVenueNestedInput
    venueReservationUser?: VenueReservationUserUpdateManyWithoutVenueNestedInput
    venueFavouriteUser?: VenueFavouriteUserUpdateManyWithoutVenueNestedInput
  }

  export type VenueUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    pricePerNightInEURCent?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    amountsOfBeds?: IntFieldUpdateOperationsInput | number
    extraSleepingDetails?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    images?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    checkInHour?: IntFieldUpdateOperationsInput | number
    checkOutHour?: IntFieldUpdateOperationsInput | number
    distanceFromCityCenterInM?: IntFieldUpdateOperationsInput | number
    facebookUrl?: StringFieldUpdateOperationsInput | string
    instagramUrl?: StringFieldUpdateOperationsInput | string
    twitterUrl?: StringFieldUpdateOperationsInput | string
    websiteUrl?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    streetName?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    amenities?: AmenityUncheckedUpdateManyWithoutVenuesNestedInput
    VenueRatingUser?: VenueRatingUserUncheckedUpdateManyWithoutVenueNestedInput
    venueReservationUser?: VenueReservationUserUncheckedUpdateManyWithoutVenueNestedInput
    venueFavouriteUser?: VenueFavouriteUserUncheckedUpdateManyWithoutVenueNestedInput
  }

  export type VenueUncheckedUpdateManyWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    pricePerNightInEURCent?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    amountsOfBeds?: IntFieldUpdateOperationsInput | number
    extraSleepingDetails?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    images?: JsonNullValueInput | InputJsonValue
    description?: StringFieldUpdateOperationsInput | string
    checkInHour?: IntFieldUpdateOperationsInput | number
    checkOutHour?: IntFieldUpdateOperationsInput | number
    distanceFromCityCenterInM?: IntFieldUpdateOperationsInput | number
    facebookUrl?: StringFieldUpdateOperationsInput | string
    instagramUrl?: StringFieldUpdateOperationsInput | string
    twitterUrl?: StringFieldUpdateOperationsInput | string
    websiteUrl?: StringFieldUpdateOperationsInput | string
    streetNumber?: StringFieldUpdateOperationsInput | string
    streetName?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
  }

  export type VenueRatingUserUpdateWithoutUserInput = {
    score?: FloatFieldUpdateOperationsInput | number
    review?: NullableStringFieldUpdateOperationsInput | string | null
    venue?: VenueUpdateOneRequiredWithoutVenueRatingUserNestedInput
  }

  export type VenueRatingUserUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    venueId?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    review?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VenueRatingUserUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    venueId?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    review?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VenueReservationUserUpdateWithoutUserInput = {
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
    venue?: VenueUpdateOneRequiredWithoutVenueReservationUserNestedInput
  }

  export type VenueReservationUserUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    venueId?: IntFieldUpdateOperationsInput | number
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
  }

  export type VenueReservationUserUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    venueId?: IntFieldUpdateOperationsInput | number
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
  }

  export type VenueFavouriteUserUpdateWithoutUserInput = {
    venue?: VenueUpdateOneRequiredWithoutVenueFavouriteUserNestedInput
  }

  export type VenueFavouriteUserUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    venueId?: IntFieldUpdateOperationsInput | number
  }

  export type VenueFavouriteUserUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    venueId?: IntFieldUpdateOperationsInput | number
  }

  export type VenueRatingUserCreateManyVenueInput = {
    id?: number
    userId: number
    score: number
    review?: string | null
  }

  export type VenueReservationUserCreateManyVenueInput = {
    id?: number
    userId: number
    dateStart: Date | string
    dateEnd: Date | string
    status: $Enums.StatusEnum
  }

  export type VenueFavouriteUserCreateManyVenueInput = {
    id?: number
    userId: number
  }

  export type AmenityUpdateWithoutVenuesInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: CategoryUpdateOneRequiredWithoutAmenitiesNestedInput
    occasions?: OccasionUpdateManyWithoutAmenitiesNestedInput
  }

  export type AmenityUncheckedUpdateWithoutVenuesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    occasions?: OccasionUncheckedUpdateManyWithoutAmenitiesNestedInput
  }

  export type AmenityUncheckedUpdateManyWithoutVenuesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type VenueRatingUserUpdateWithoutVenueInput = {
    score?: FloatFieldUpdateOperationsInput | number
    review?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutVenueRatingUserNestedInput
  }

  export type VenueRatingUserUncheckedUpdateWithoutVenueInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    review?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VenueRatingUserUncheckedUpdateManyWithoutVenueInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    review?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VenueReservationUserUpdateWithoutVenueInput = {
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
    user?: UserUpdateOneRequiredWithoutVenueReservationUserNestedInput
  }

  export type VenueReservationUserUncheckedUpdateWithoutVenueInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
  }

  export type VenueReservationUserUncheckedUpdateManyWithoutVenueInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
  }

  export type VenueFavouriteUserUpdateWithoutVenueInput = {
    user?: UserUpdateOneRequiredWithoutVenueFavouriteUserNestedInput
  }

  export type VenueFavouriteUserUncheckedUpdateWithoutVenueInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type VenueFavouriteUserUncheckedUpdateManyWithoutVenueInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}